-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity resonator_ddc_phase_sincos_LUT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    acc : IN STD_LOGIC_VECTOR (20 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (51 downto 0) );
end;


architecture behav of resonator_ddc_phase_sincos_LUT is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv18_20001 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal cos_lut_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal cos_lut_ce0 : STD_LOGIC;
    signal cos_lut_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal cos_lut_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal cos_lut_ce1 : STD_LOGIC;
    signal cos_lut_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal fine_lut_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal fine_lut_ce0 : STD_LOGIC;
    signal fine_lut_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal fine_adr_V_fu_96_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal fine_adr_V_reg_349 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal fine_adr_V_reg_349_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal fine_adr_V_reg_349_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal fine_adr_V_reg_349_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal fine_adr_V_reg_349_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal msb_V_reg_354 : STD_LOGIC_VECTOR (1 downto 0);
    signal msb_V_reg_354_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal msb_V_reg_354_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal msb_V_reg_354_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal msb_V_reg_354_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal lsb_V_fu_110_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal lsb_V_reg_364 : STD_LOGIC_VECTOR (9 downto 0);
    signal sin_adr_V_fu_120_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sin_adr_V_reg_370 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln1049_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_reg_380 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_reg_380_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_reg_380_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_reg_380_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal r_reg_394 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_2_reg_399 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_2_reg_399_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal r_2_reg_399_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln712_fu_139_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln712_reg_405 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln712_reg_405_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_4_fu_142_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_4_reg_412 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_4_reg_412_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln799_fu_148_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln799_reg_417 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln712_1_fu_152_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln712_1_reg_422 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln712_1_reg_422_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_5_fu_155_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_5_reg_427 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_5_reg_427_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln799_1_fu_161_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln799_1_reg_432 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln799_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln799_reg_437 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln799_1_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln799_1_reg_442 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_447 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp2_fu_180_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal phitmp2_reg_453 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln1049_1_fu_256_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln1049_1_reg_458 : STD_LOGIC_VECTOR (17 downto 0);
    signal and_ln1049_4_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1049_4_reg_463 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_lut_word_fu_323_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_lut_word_reg_468 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln573_fu_126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln573_1_fu_135_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln573_2_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phitmp3_fu_186_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal cos_lut_word_fu_199_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal xor_ln1049_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1049_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_1_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_lut_word_1_fu_192_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln1049_fu_219_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln53_2_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln42_fu_205_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln53_fu_231_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal and_ln1049_1_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln53_1_fu_244_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln53_4_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_5_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_3_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1049_3_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1049_2_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1049_3_fu_295_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln53_2_fu_302_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln1049_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln53_3_fu_309_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal cos_lut_word_2_fu_335_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to5 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component resonator_ddc_phase_sincos_LUT_cos_lut IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component resonator_ddc_phase_sincos_LUT_fine_lut IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    cos_lut_U : component resonator_ddc_phase_sincos_LUT_cos_lut
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cos_lut_address0,
        ce0 => cos_lut_ce0,
        q0 => cos_lut_q0,
        address1 => cos_lut_address1,
        ce1 => cos_lut_ce1,
        q1 => cos_lut_q1);

    fine_lut_U : component resonator_ddc_phase_sincos_LUT_fine_lut
    generic map (
        DataWidth => 16,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fine_lut_address0,
        ce0 => fine_lut_ce0,
        q0 => fine_lut_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                and_ln1049_4_reg_463 <= and_ln1049_4_fu_289_p2;
                fine_adr_V_reg_349_pp0_iter2_reg <= fine_adr_V_reg_349_pp0_iter1_reg;
                fine_adr_V_reg_349_pp0_iter3_reg <= fine_adr_V_reg_349_pp0_iter2_reg;
                fine_adr_V_reg_349_pp0_iter4_reg <= fine_adr_V_reg_349_pp0_iter3_reg;
                icmp_ln1049_reg_380_pp0_iter2_reg <= icmp_ln1049_reg_380;
                icmp_ln1049_reg_380_pp0_iter3_reg <= icmp_ln1049_reg_380_pp0_iter2_reg;
                icmp_ln1049_reg_380_pp0_iter4_reg <= icmp_ln1049_reg_380_pp0_iter3_reg;
                icmp_ln53_reg_447 <= icmp_ln53_fu_175_p2;
                icmp_ln799_1_reg_442 <= icmp_ln799_1_fu_170_p2;
                icmp_ln799_reg_437 <= icmp_ln799_fu_165_p2;
                msb_V_reg_354_pp0_iter2_reg <= msb_V_reg_354_pp0_iter1_reg;
                msb_V_reg_354_pp0_iter3_reg <= msb_V_reg_354_pp0_iter2_reg;
                msb_V_reg_354_pp0_iter4_reg <= msb_V_reg_354_pp0_iter3_reg;
                phitmp2_reg_453 <= phitmp2_fu_180_p3;
                r_2_reg_399_pp0_iter3_reg <= r_2_reg_399;
                r_2_reg_399_pp0_iter4_reg <= r_2_reg_399_pp0_iter3_reg;
                r_4_reg_412 <= r_4_fu_142_p2;
                r_4_reg_412_pp0_iter4_reg <= r_4_reg_412;
                r_5_reg_427 <= r_5_fu_155_p2;
                r_5_reg_427_pp0_iter4_reg <= r_5_reg_427;
                select_ln1049_1_reg_458 <= select_ln1049_1_fu_256_p3;
                sin_lut_word_reg_468 <= sin_lut_word_fu_323_p3;
                trunc_ln799_1_reg_432 <= trunc_ln799_1_fu_161_p1;
                trunc_ln799_reg_417 <= trunc_ln799_fu_148_p1;
                    zext_ln712_1_reg_422(16 downto 0) <= zext_ln712_1_fu_152_p1(16 downto 0);
                    zext_ln712_1_reg_422_pp0_iter4_reg(16 downto 0) <= zext_ln712_1_reg_422(16 downto 0);
                    zext_ln712_reg_405(16 downto 0) <= zext_ln712_fu_139_p1(16 downto 0);
                    zext_ln712_reg_405_pp0_iter4_reg(16 downto 0) <= zext_ln712_reg_405(16 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                fine_adr_V_reg_349 <= fine_adr_V_fu_96_p1;
                fine_adr_V_reg_349_pp0_iter1_reg <= fine_adr_V_reg_349;
                icmp_ln1049_reg_380 <= icmp_ln1049_fu_130_p2;
                lsb_V_reg_364 <= acc(18 downto 9);
                msb_V_reg_354 <= acc(20 downto 19);
                msb_V_reg_354_pp0_iter1_reg <= msb_V_reg_354;
                sin_adr_V_reg_370 <= sin_adr_V_fu_120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                r_2_reg_399 <= cos_lut_q0;
                r_reg_394 <= cos_lut_q1;
            end if;
        end if;
    end process;
    zext_ln712_reg_405(17) <= '0';
    zext_ln712_reg_405_pp0_iter4_reg(17) <= '0';
    zext_ln712_1_reg_422(17) <= '0';
    zext_ln712_1_reg_422_pp0_iter4_reg(17) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln1049_1_fu_252_p2 <= (icmp_ln53_reg_447 and icmp_ln1049_reg_380_pp0_iter4_reg);
    and_ln1049_2_fu_278_p2 <= (icmp_ln53_5_fu_273_p2 and icmp_ln53_4_fu_268_p2);
    and_ln1049_3_fu_284_p2 <= (icmp_ln53_3_fu_263_p2 and icmp_ln1049_reg_380_pp0_iter4_reg);
    and_ln1049_4_fu_289_p2 <= (and_ln1049_3_fu_284_p2 and and_ln1049_2_fu_278_p2);
    and_ln1049_fu_214_p2 <= (xor_ln1049_fu_209_p2 and icmp_ln53_reg_447);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to5)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to5 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ((fine_lut_q0 & sin_lut_word_reg_468) & cos_lut_word_2_fu_335_p3);
    cos_lut_address0 <= zext_ln573_1_fu_135_p1(10 - 1 downto 0);
    cos_lut_address1 <= zext_ln573_fu_126_p1(10 - 1 downto 0);

    cos_lut_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cos_lut_ce0 <= ap_const_logic_1;
        else 
            cos_lut_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cos_lut_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cos_lut_ce1 <= ap_const_logic_1;
        else 
            cos_lut_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    cos_lut_word_1_fu_192_p3 <= 
        ap_const_lv18_0 when (icmp_ln1049_reg_380_pp0_iter4_reg(0) = '1') else 
        phitmp3_fu_186_p3;
    cos_lut_word_2_fu_335_p3 <= 
        phitmp2_reg_453 when (and_ln1049_4_reg_463(0) = '1') else 
        select_ln1049_1_reg_458;
    cos_lut_word_fu_199_p3 <= 
        ap_const_lv17_0 when (icmp_ln1049_reg_380_pp0_iter4_reg(0) = '1') else 
        r_2_reg_399_pp0_iter4_reg;
    fine_adr_V_fu_96_p1 <= acc(9 - 1 downto 0);
    fine_lut_address0 <= zext_ln573_2_fu_331_p1(9 - 1 downto 0);

    fine_lut_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            fine_lut_ce0 <= ap_const_logic_1;
        else 
            fine_lut_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1049_fu_130_p2 <= "1" when (lsb_V_reg_364 = ap_const_lv10_0) else "0";
    icmp_ln53_1_fu_226_p2 <= "1" when (msb_V_reg_354_pp0_iter4_reg = ap_const_lv2_1) else "0";
    icmp_ln53_2_fu_239_p2 <= "1" when (msb_V_reg_354_pp0_iter4_reg = ap_const_lv2_3) else "0";
    icmp_ln53_3_fu_263_p2 <= "0" when (msb_V_reg_354_pp0_iter4_reg = ap_const_lv2_0) else "1";
    icmp_ln53_4_fu_268_p2 <= "0" when (msb_V_reg_354_pp0_iter4_reg = ap_const_lv2_1) else "1";
    icmp_ln53_5_fu_273_p2 <= "0" when (msb_V_reg_354_pp0_iter4_reg = ap_const_lv2_3) else "1";
    icmp_ln53_fu_175_p2 <= "1" when (msb_V_reg_354_pp0_iter3_reg = ap_const_lv2_0) else "0";
    icmp_ln799_1_fu_170_p2 <= "1" when (trunc_ln799_1_reg_432 = ap_const_lv17_0) else "0";
    icmp_ln799_fu_165_p2 <= "1" when (trunc_ln799_reg_417 = ap_const_lv17_0) else "0";
    lsb_V_fu_110_p4 <= acc(18 downto 9);
    or_ln1049_fu_317_p2 <= (and_ln1049_4_fu_289_p2 or and_ln1049_1_fu_252_p2);
    phitmp2_fu_180_p3 <= 
        ap_const_lv18_20001 when (icmp_ln799_reg_437(0) = '1') else 
        r_4_reg_412_pp0_iter4_reg;
    phitmp3_fu_186_p3 <= 
        ap_const_lv18_20001 when (icmp_ln799_1_reg_442(0) = '1') else 
        r_5_reg_427_pp0_iter4_reg;
    r_4_fu_142_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(zext_ln712_fu_139_p1));
    r_5_fu_155_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(zext_ln712_1_fu_152_p1));
    select_ln1049_1_fu_256_p3 <= 
        zext_ln712_reg_405_pp0_iter4_reg when (and_ln1049_1_fu_252_p2(0) = '1') else 
        select_ln53_1_fu_244_p3;
    select_ln1049_3_fu_295_p3 <= 
        zext_ln712_1_reg_422_pp0_iter4_reg when (and_ln1049_fu_214_p2(0) = '1') else 
        phitmp3_fu_186_p3;
    select_ln1049_fu_219_p3 <= 
        zext_ln712_reg_405_pp0_iter4_reg when (and_ln1049_fu_214_p2(0) = '1') else 
        phitmp2_fu_180_p3;
    select_ln53_1_fu_244_p3 <= 
        zext_ln42_fu_205_p1 when (icmp_ln53_2_fu_239_p2(0) = '1') else 
        select_ln53_fu_231_p3;
    select_ln53_2_fu_302_p3 <= 
        zext_ln712_reg_405_pp0_iter4_reg when (icmp_ln53_1_fu_226_p2(0) = '1') else 
        select_ln1049_3_fu_295_p3;
    select_ln53_3_fu_309_p3 <= 
        phitmp2_fu_180_p3 when (icmp_ln53_2_fu_239_p2(0) = '1') else 
        select_ln53_2_fu_302_p3;
    select_ln53_fu_231_p3 <= 
        cos_lut_word_1_fu_192_p3 when (icmp_ln53_1_fu_226_p2(0) = '1') else 
        select_ln1049_fu_219_p3;
    sin_adr_V_fu_120_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(lsb_V_fu_110_p4));
    sin_lut_word_fu_323_p3 <= 
        ap_const_lv18_0 when (or_ln1049_fu_317_p2(0) = '1') else 
        select_ln53_3_fu_309_p3;
    trunc_ln799_1_fu_161_p1 <= r_5_fu_155_p2(17 - 1 downto 0);
    trunc_ln799_fu_148_p1 <= r_4_fu_142_p2(17 - 1 downto 0);
    xor_ln1049_fu_209_p2 <= (icmp_ln1049_reg_380_pp0_iter4_reg xor ap_const_lv1_1);
    zext_ln42_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cos_lut_word_fu_199_p3),18));
    zext_ln573_1_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sin_adr_V_reg_370),64));
    zext_ln573_2_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fine_adr_V_reg_349_pp0_iter4_reg),64));
    zext_ln573_fu_126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lsb_V_reg_364),64));
    zext_ln712_1_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_2_reg_399),18));
    zext_ln712_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_reg_394),18));
end behav;
