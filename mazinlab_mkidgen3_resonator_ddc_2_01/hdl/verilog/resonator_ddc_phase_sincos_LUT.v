// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module resonator_ddc_phase_sincos_LUT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        acc,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [20:0] acc;
output  [51:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_subdone;
wire   [9:0] cos_lut_address0;
reg    cos_lut_ce0;
wire   [16:0] cos_lut_q0;
wire   [9:0] cos_lut_address1;
reg    cos_lut_ce1;
wire   [16:0] cos_lut_q1;
wire   [8:0] fine_lut_address0;
reg    fine_lut_ce0;
wire   [15:0] fine_lut_q0;
wire   [8:0] fine_adr_V_fu_96_p1;
reg   [8:0] fine_adr_V_reg_349;
wire    ap_block_pp0_stage0_11001;
reg   [8:0] fine_adr_V_reg_349_pp0_iter1_reg;
reg   [8:0] fine_adr_V_reg_349_pp0_iter2_reg;
reg   [8:0] fine_adr_V_reg_349_pp0_iter3_reg;
reg   [8:0] fine_adr_V_reg_349_pp0_iter4_reg;
reg   [1:0] msb_V_reg_354;
reg   [1:0] msb_V_reg_354_pp0_iter1_reg;
reg   [1:0] msb_V_reg_354_pp0_iter2_reg;
reg   [1:0] msb_V_reg_354_pp0_iter3_reg;
reg   [1:0] msb_V_reg_354_pp0_iter4_reg;
wire   [9:0] lsb_V_fu_110_p4;
reg   [9:0] lsb_V_reg_364;
wire   [9:0] sin_adr_V_fu_120_p2;
reg   [9:0] sin_adr_V_reg_370;
wire   [0:0] icmp_ln1049_fu_130_p2;
reg   [0:0] icmp_ln1049_reg_380;
reg   [0:0] icmp_ln1049_reg_380_pp0_iter2_reg;
reg   [0:0] icmp_ln1049_reg_380_pp0_iter3_reg;
reg   [0:0] icmp_ln1049_reg_380_pp0_iter4_reg;
reg   [16:0] r_reg_394;
reg   [16:0] r_2_reg_399;
reg   [16:0] r_2_reg_399_pp0_iter3_reg;
reg   [16:0] r_2_reg_399_pp0_iter4_reg;
wire   [17:0] zext_ln712_fu_139_p1;
reg   [17:0] zext_ln712_reg_405;
reg   [17:0] zext_ln712_reg_405_pp0_iter4_reg;
wire   [17:0] r_4_fu_142_p2;
reg   [17:0] r_4_reg_412;
reg   [17:0] r_4_reg_412_pp0_iter4_reg;
wire   [16:0] trunc_ln799_fu_148_p1;
reg   [16:0] trunc_ln799_reg_417;
wire   [17:0] zext_ln712_1_fu_152_p1;
reg   [17:0] zext_ln712_1_reg_422;
reg   [17:0] zext_ln712_1_reg_422_pp0_iter4_reg;
wire   [17:0] r_5_fu_155_p2;
reg   [17:0] r_5_reg_427;
reg   [17:0] r_5_reg_427_pp0_iter4_reg;
wire   [16:0] trunc_ln799_1_fu_161_p1;
reg   [16:0] trunc_ln799_1_reg_432;
wire   [0:0] icmp_ln799_fu_165_p2;
reg   [0:0] icmp_ln799_reg_437;
wire   [0:0] icmp_ln799_1_fu_170_p2;
reg   [0:0] icmp_ln799_1_reg_442;
wire   [0:0] icmp_ln53_fu_175_p2;
reg   [0:0] icmp_ln53_reg_447;
wire   [17:0] phitmp2_fu_180_p3;
reg   [17:0] phitmp2_reg_453;
wire   [17:0] select_ln1049_1_fu_256_p3;
reg   [17:0] select_ln1049_1_reg_458;
wire   [0:0] and_ln1049_4_fu_289_p2;
reg   [0:0] and_ln1049_4_reg_463;
wire   [17:0] sin_lut_word_fu_323_p3;
reg   [17:0] sin_lut_word_reg_468;
wire   [63:0] zext_ln573_fu_126_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln573_1_fu_135_p1;
wire   [63:0] zext_ln573_2_fu_331_p1;
wire   [17:0] phitmp3_fu_186_p3;
wire   [16:0] cos_lut_word_fu_199_p3;
wire   [0:0] xor_ln1049_fu_209_p2;
wire   [0:0] and_ln1049_fu_214_p2;
wire   [0:0] icmp_ln53_1_fu_226_p2;
wire   [17:0] cos_lut_word_1_fu_192_p3;
wire   [17:0] select_ln1049_fu_219_p3;
wire   [0:0] icmp_ln53_2_fu_239_p2;
wire   [17:0] zext_ln42_fu_205_p1;
wire   [17:0] select_ln53_fu_231_p3;
wire   [0:0] and_ln1049_1_fu_252_p2;
wire   [17:0] select_ln53_1_fu_244_p3;
wire   [0:0] icmp_ln53_4_fu_268_p2;
wire   [0:0] icmp_ln53_5_fu_273_p2;
wire   [0:0] icmp_ln53_3_fu_263_p2;
wire   [0:0] and_ln1049_3_fu_284_p2;
wire   [0:0] and_ln1049_2_fu_278_p2;
wire   [17:0] select_ln1049_3_fu_295_p3;
wire   [17:0] select_ln53_2_fu_302_p3;
wire   [0:0] or_ln1049_fu_317_p2;
wire   [17:0] select_ln53_3_fu_309_p3;
wire   [17:0] cos_lut_word_2_fu_335_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to5;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

resonator_ddc_phase_sincos_LUT_cos_lut #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
cos_lut_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cos_lut_address0),
    .ce0(cos_lut_ce0),
    .q0(cos_lut_q0),
    .address1(cos_lut_address1),
    .ce1(cos_lut_ce1),
    .q1(cos_lut_q1)
);

resonator_ddc_phase_sincos_LUT_fine_lut #(
    .DataWidth( 16 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
fine_lut_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fine_lut_address0),
    .ce0(fine_lut_ce0),
    .q0(fine_lut_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        and_ln1049_4_reg_463 <= and_ln1049_4_fu_289_p2;
        fine_adr_V_reg_349_pp0_iter2_reg <= fine_adr_V_reg_349_pp0_iter1_reg;
        fine_adr_V_reg_349_pp0_iter3_reg <= fine_adr_V_reg_349_pp0_iter2_reg;
        fine_adr_V_reg_349_pp0_iter4_reg <= fine_adr_V_reg_349_pp0_iter3_reg;
        icmp_ln1049_reg_380_pp0_iter2_reg <= icmp_ln1049_reg_380;
        icmp_ln1049_reg_380_pp0_iter3_reg <= icmp_ln1049_reg_380_pp0_iter2_reg;
        icmp_ln1049_reg_380_pp0_iter4_reg <= icmp_ln1049_reg_380_pp0_iter3_reg;
        icmp_ln53_reg_447 <= icmp_ln53_fu_175_p2;
        icmp_ln799_1_reg_442 <= icmp_ln799_1_fu_170_p2;
        icmp_ln799_reg_437 <= icmp_ln799_fu_165_p2;
        msb_V_reg_354_pp0_iter2_reg <= msb_V_reg_354_pp0_iter1_reg;
        msb_V_reg_354_pp0_iter3_reg <= msb_V_reg_354_pp0_iter2_reg;
        msb_V_reg_354_pp0_iter4_reg <= msb_V_reg_354_pp0_iter3_reg;
        phitmp2_reg_453 <= phitmp2_fu_180_p3;
        r_2_reg_399_pp0_iter3_reg <= r_2_reg_399;
        r_2_reg_399_pp0_iter4_reg <= r_2_reg_399_pp0_iter3_reg;
        r_4_reg_412 <= r_4_fu_142_p2;
        r_4_reg_412_pp0_iter4_reg <= r_4_reg_412;
        r_5_reg_427 <= r_5_fu_155_p2;
        r_5_reg_427_pp0_iter4_reg <= r_5_reg_427;
        select_ln1049_1_reg_458 <= select_ln1049_1_fu_256_p3;
        sin_lut_word_reg_468 <= sin_lut_word_fu_323_p3;
        trunc_ln799_1_reg_432 <= trunc_ln799_1_fu_161_p1;
        trunc_ln799_reg_417 <= trunc_ln799_fu_148_p1;
        zext_ln712_1_reg_422[16 : 0] <= zext_ln712_1_fu_152_p1[16 : 0];
        zext_ln712_1_reg_422_pp0_iter4_reg[16 : 0] <= zext_ln712_1_reg_422[16 : 0];
        zext_ln712_reg_405[16 : 0] <= zext_ln712_fu_139_p1[16 : 0];
        zext_ln712_reg_405_pp0_iter4_reg[16 : 0] <= zext_ln712_reg_405[16 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fine_adr_V_reg_349 <= fine_adr_V_fu_96_p1;
        fine_adr_V_reg_349_pp0_iter1_reg <= fine_adr_V_reg_349;
        icmp_ln1049_reg_380 <= icmp_ln1049_fu_130_p2;
        lsb_V_reg_364 <= {{acc[18:9]}};
        msb_V_reg_354 <= {{acc[20:19]}};
        msb_V_reg_354_pp0_iter1_reg <= msb_V_reg_354;
        sin_adr_V_reg_370 <= sin_adr_V_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_ce))) begin
        r_2_reg_399 <= cos_lut_q0;
        r_reg_394 <= cos_lut_q1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to5 = 1'b1;
    end else begin
        ap_idle_pp0_0to5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to5 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cos_lut_ce0 = 1'b1;
    end else begin
        cos_lut_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cos_lut_ce1 = 1'b1;
    end else begin
        cos_lut_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_ce))) begin
        fine_lut_ce0 = 1'b1;
    end else begin
        fine_lut_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln1049_1_fu_252_p2 = (icmp_ln53_reg_447 & icmp_ln1049_reg_380_pp0_iter4_reg);

assign and_ln1049_2_fu_278_p2 = (icmp_ln53_5_fu_273_p2 & icmp_ln53_4_fu_268_p2);

assign and_ln1049_3_fu_284_p2 = (icmp_ln53_3_fu_263_p2 & icmp_ln1049_reg_380_pp0_iter4_reg);

assign and_ln1049_4_fu_289_p2 = (and_ln1049_3_fu_284_p2 & and_ln1049_2_fu_278_p2);

assign and_ln1049_fu_214_p2 = (xor_ln1049_fu_209_p2 & icmp_ln53_reg_447);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = {{{fine_lut_q0}, {sin_lut_word_reg_468}}, {cos_lut_word_2_fu_335_p3}};

assign cos_lut_address0 = zext_ln573_1_fu_135_p1;

assign cos_lut_address1 = zext_ln573_fu_126_p1;

assign cos_lut_word_1_fu_192_p3 = ((icmp_ln1049_reg_380_pp0_iter4_reg[0:0] == 1'b1) ? 18'd0 : phitmp3_fu_186_p3);

assign cos_lut_word_2_fu_335_p3 = ((and_ln1049_4_reg_463[0:0] == 1'b1) ? phitmp2_reg_453 : select_ln1049_1_reg_458);

assign cos_lut_word_fu_199_p3 = ((icmp_ln1049_reg_380_pp0_iter4_reg[0:0] == 1'b1) ? 17'd0 : r_2_reg_399_pp0_iter4_reg);

assign fine_adr_V_fu_96_p1 = acc[8:0];

assign fine_lut_address0 = zext_ln573_2_fu_331_p1;

assign icmp_ln1049_fu_130_p2 = ((lsb_V_reg_364 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln53_1_fu_226_p2 = ((msb_V_reg_354_pp0_iter4_reg == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln53_2_fu_239_p2 = ((msb_V_reg_354_pp0_iter4_reg == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln53_3_fu_263_p2 = ((msb_V_reg_354_pp0_iter4_reg != 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln53_4_fu_268_p2 = ((msb_V_reg_354_pp0_iter4_reg != 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln53_5_fu_273_p2 = ((msb_V_reg_354_pp0_iter4_reg != 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_175_p2 = ((msb_V_reg_354_pp0_iter3_reg == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln799_1_fu_170_p2 = ((trunc_ln799_1_reg_432 == 17'd0) ? 1'b1 : 1'b0);

assign icmp_ln799_fu_165_p2 = ((trunc_ln799_reg_417 == 17'd0) ? 1'b1 : 1'b0);

assign lsb_V_fu_110_p4 = {{acc[18:9]}};

assign or_ln1049_fu_317_p2 = (and_ln1049_4_fu_289_p2 | and_ln1049_1_fu_252_p2);

assign phitmp2_fu_180_p3 = ((icmp_ln799_reg_437[0:0] == 1'b1) ? 18'd131073 : r_4_reg_412_pp0_iter4_reg);

assign phitmp3_fu_186_p3 = ((icmp_ln799_1_reg_442[0:0] == 1'b1) ? 18'd131073 : r_5_reg_427_pp0_iter4_reg);

assign r_4_fu_142_p2 = (18'd0 - zext_ln712_fu_139_p1);

assign r_5_fu_155_p2 = (18'd0 - zext_ln712_1_fu_152_p1);

assign select_ln1049_1_fu_256_p3 = ((and_ln1049_1_fu_252_p2[0:0] == 1'b1) ? zext_ln712_reg_405_pp0_iter4_reg : select_ln53_1_fu_244_p3);

assign select_ln1049_3_fu_295_p3 = ((and_ln1049_fu_214_p2[0:0] == 1'b1) ? zext_ln712_1_reg_422_pp0_iter4_reg : phitmp3_fu_186_p3);

assign select_ln1049_fu_219_p3 = ((and_ln1049_fu_214_p2[0:0] == 1'b1) ? zext_ln712_reg_405_pp0_iter4_reg : phitmp2_fu_180_p3);

assign select_ln53_1_fu_244_p3 = ((icmp_ln53_2_fu_239_p2[0:0] == 1'b1) ? zext_ln42_fu_205_p1 : select_ln53_fu_231_p3);

assign select_ln53_2_fu_302_p3 = ((icmp_ln53_1_fu_226_p2[0:0] == 1'b1) ? zext_ln712_reg_405_pp0_iter4_reg : select_ln1049_3_fu_295_p3);

assign select_ln53_3_fu_309_p3 = ((icmp_ln53_2_fu_239_p2[0:0] == 1'b1) ? phitmp2_fu_180_p3 : select_ln53_2_fu_302_p3);

assign select_ln53_fu_231_p3 = ((icmp_ln53_1_fu_226_p2[0:0] == 1'b1) ? cos_lut_word_1_fu_192_p3 : select_ln1049_fu_219_p3);

assign sin_adr_V_fu_120_p2 = (10'd0 - lsb_V_fu_110_p4);

assign sin_lut_word_fu_323_p3 = ((or_ln1049_fu_317_p2[0:0] == 1'b1) ? 18'd0 : select_ln53_3_fu_309_p3);

assign trunc_ln799_1_fu_161_p1 = r_5_fu_155_p2[16:0];

assign trunc_ln799_fu_148_p1 = r_4_fu_142_p2[16:0];

assign xor_ln1049_fu_209_p2 = (icmp_ln1049_reg_380_pp0_iter4_reg ^ 1'd1);

assign zext_ln42_fu_205_p1 = cos_lut_word_fu_199_p3;

assign zext_ln573_1_fu_135_p1 = sin_adr_V_reg_370;

assign zext_ln573_2_fu_331_p1 = fine_adr_V_reg_349_pp0_iter4_reg;

assign zext_ln573_fu_126_p1 = lsb_V_reg_364;

assign zext_ln712_1_fu_152_p1 = r_2_reg_399;

assign zext_ln712_fu_139_p1 = r_reg_394;

always @ (posedge ap_clk) begin
    zext_ln712_reg_405[17] <= 1'b0;
    zext_ln712_reg_405_pp0_iter4_reg[17] <= 1'b0;
    zext_ln712_1_reg_422[17] <= 1'b0;
    zext_ln712_1_reg_422_pp0_iter4_reg[17] <= 1'b0;
end

endmodule //resonator_ddc_phase_sincos_LUT
