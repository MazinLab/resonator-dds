// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="resonator_ddc_control_mem_resonator_ddc_control_mem,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.237000,HLS_SYN_LAT=5,HLS_SYN_TPT=1,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=1335,HLS_SYN_LUT=583,HLS_VERSION=2022_1}" *)

module resonator_ddc_control_mem (
        ap_clk,
        ap_rst_n,
        res_in_TDATA,
        res_in_TVALID,
        res_in_TREADY,
        res_in_TKEEP,
        res_in_TSTRB,
        res_in_TUSER,
        res_in_TLAST,
        tones_and_centers_Addr_A,
        tones_and_centers_EN_A,
        tones_and_centers_WEN_A,
        tones_and_centers_Din_A,
        tones_and_centers_Dout_A,
        tones_and_centers_Clk_A,
        tones_and_centers_Rst_A,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TUSER,
        out_r_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [255:0] res_in_TDATA;
input   res_in_TVALID;
output   res_in_TREADY;
input  [31:0] res_in_TKEEP;
input  [31:0] res_in_TSTRB;
input  [7:0] res_in_TUSER;
input  [0:0] res_in_TLAST;
output  [31:0] tones_and_centers_Addr_A;
output   tones_and_centers_EN_A;
output  [63:0] tones_and_centers_WEN_A;
output  [511:0] tones_and_centers_Din_A;
input  [511:0] tones_and_centers_Dout_A;
output   tones_and_centers_Clk_A;
output   tones_and_centers_Rst_A;
output  [679:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [84:0] out_r_TKEEP;
output  [84:0] out_r_TSTRB;
output  [7:0] out_r_TUSER;
output  [0:0] out_r_TLAST;

reg res_in_TREADY;
reg tones_and_centers_EN_A;
reg tones_and_centers_Rst_A;

 reg    ap_rst_n_inv;
reg   [167:0] accg_V;
wire   [7:0] accumulator_V_address0;
reg    accumulator_V_ce0;
reg    accumulator_V_we0;
wire   [7:0] accumulator_V_address1;
reg    accumulator_V_ce1;
wire   [167:0] accumulator_V_q1;
reg    res_in_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    out_r_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg   [255:0] tmp_data_V_1_reg_697;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state5_pp0_stage0_iter4;
wire    regslice_both_out_r_V_data_V_U_apdone_blk;
reg    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [255:0] tmp_data_V_1_reg_697_pp0_iter1_reg;
reg   [255:0] tmp_data_V_1_reg_697_pp0_iter2_reg;
reg   [255:0] tmp_data_V_1_reg_697_pp0_iter3_reg;
reg   [7:0] tmp_user_V_reg_702;
reg   [7:0] tmp_user_V_reg_702_pp0_iter1_reg;
reg   [7:0] tmp_user_V_reg_702_pp0_iter2_reg;
reg   [7:0] tmp_user_V_reg_702_pp0_iter3_reg;
reg   [0:0] tmp_last_V_reg_708;
reg   [0:0] tmp_last_V_reg_708_pp0_iter1_reg;
reg   [0:0] tmp_last_V_reg_708_pp0_iter2_reg;
reg   [0:0] tmp_last_V_reg_708_pp0_iter3_reg;
wire   [63:0] zext_ln587_fu_263_p1;
reg   [63:0] zext_ln587_reg_713;
reg   [63:0] zext_ln587_reg_713_pp0_iter1_reg;
wire   [7:0] add_ln232_fu_268_p2;
reg   [7:0] add_ln232_reg_728;
reg   [20:0] phase0_V_reg_733;
wire   [20:0] tmp_V_fu_283_p1;
reg   [20:0] tmp_V_reg_738;
wire   [10:0] trunc_ln1393_fu_287_p1;
reg   [10:0] trunc_ln1393_reg_744;
reg   [20:0] phase0_V_1_reg_749;
reg   [20:0] tmp_V_1_reg_754;
reg   [10:0] tmp_1_reg_760;
reg   [20:0] phase0_V_2_reg_765;
reg   [20:0] tmp_V_2_reg_770;
reg   [10:0] tmp_2_reg_776;
reg   [20:0] phase0_V_3_reg_781;
reg   [20:0] tmp_V_3_reg_786;
reg   [10:0] tmp_3_reg_792;
reg   [20:0] phase0_V_4_reg_797;
reg   [20:0] tmp_V_4_reg_802;
reg   [10:0] tmp_4_reg_808;
reg   [20:0] phase0_V_5_reg_813;
reg   [20:0] tmp_V_5_reg_818;
reg   [10:0] tmp_5_reg_824;
reg   [20:0] phase0_V_6_reg_829;
reg   [20:0] tmp_V_6_reg_834;
reg   [10:0] tmp_6_reg_840;
reg   [20:0] phase0_V_7_reg_845;
reg   [20:0] tmp_V_7_reg_850;
reg   [10:0] tmp_7_reg_856;
reg   [255:0] p_Result_17_reg_861;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire   [63:0] zext_ln587_1_fu_511_p1;
wire   [167:0] p_Result_s_fu_648_p9;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] tones_and_centers_Addr_A_orig;
wire   [20:0] shl_ln_fu_524_p3;
wire   [20:0] shl_ln1393_1_fu_540_p3;
wire   [20:0] shl_ln1393_2_fu_556_p3;
wire   [20:0] shl_ln1393_3_fu_572_p3;
wire   [20:0] shl_ln1393_4_fu_588_p3;
wire   [20:0] shl_ln1393_5_fu_604_p3;
wire   [20:0] shl_ln1393_6_fu_620_p3;
wire   [20:0] shl_ln1393_7_fu_636_p3;
wire   [20:0] p_Val2_17_fu_643_p2;
wire   [20:0] p_Val2_15_fu_627_p2;
wire   [20:0] p_Val2_13_fu_611_p2;
wire   [20:0] p_Val2_11_fu_595_p2;
wire   [20:0] p_Val2_9_fu_579_p2;
wire   [20:0] p_Val2_7_fu_563_p2;
wire   [20:0] p_Val2_5_fu_547_p2;
wire   [20:0] p_Val2_3_fu_531_p2;
wire   [20:0] p_Val2_16_fu_632_p2;
wire   [20:0] p_Val2_14_fu_616_p2;
wire   [20:0] p_Val2_12_fu_600_p2;
wire   [20:0] p_Val2_10_fu_584_p2;
wire   [20:0] p_Val2_8_fu_568_p2;
wire   [20:0] p_Val2_6_fu_552_p2;
wire   [20:0] p_Val2_4_fu_536_p2;
wire   [20:0] p_Val2_s_fu_520_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [679:0] out_r_TDATA_int_regslice;
reg    out_r_TVALID_int_regslice;
wire    out_r_TREADY_int_regslice;
wire    regslice_both_out_r_V_data_V_U_vld_out;
wire    regslice_both_out_r_V_keep_V_U_apdone_blk;
wire    regslice_both_out_r_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out_r_V_keep_V_U_vld_out;
wire    regslice_both_out_r_V_strb_V_U_apdone_blk;
wire    regslice_both_out_r_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out_r_V_strb_V_U_vld_out;
wire    regslice_both_out_r_V_user_V_U_apdone_blk;
wire    regslice_both_out_r_V_user_V_U_ack_in_dummy;
wire    regslice_both_out_r_V_user_V_U_vld_out;
wire    regslice_both_out_r_V_last_V_U_apdone_blk;
wire    regslice_both_out_r_V_last_V_U_ack_in_dummy;
wire    regslice_both_out_r_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 accg_V = 168'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

resonator_ddc_control_mem_accumulator_V_RAM_AUTO_1R1W #(
    .DataWidth( 168 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
accumulator_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(accumulator_V_address0),
    .ce0(accumulator_V_ce0),
    .we0(accumulator_V_we0),
    .d0(accg_V),
    .address1(accumulator_V_address1),
    .ce1(accumulator_V_ce1),
    .q1(accumulator_V_q1)
);

resonator_ddc_control_mem_regslice_both #(
    .DataWidth( 680 ))
regslice_both_out_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_r_TDATA_int_regslice),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(out_r_TREADY_int_regslice),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_r_V_data_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_r_V_data_V_U_apdone_blk)
);

resonator_ddc_control_mem_regslice_both #(
    .DataWidth( 85 ))
regslice_both_out_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(85'd0),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_r_V_keep_V_U_ack_in_dummy),
    .data_out(out_r_TKEEP),
    .vld_out(regslice_both_out_r_V_keep_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_r_V_keep_V_U_apdone_blk)
);

resonator_ddc_control_mem_regslice_both #(
    .DataWidth( 85 ))
regslice_both_out_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(85'd0),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_r_V_strb_V_U_ack_in_dummy),
    .data_out(out_r_TSTRB),
    .vld_out(regslice_both_out_r_V_strb_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_r_V_strb_V_U_apdone_blk)
);

resonator_ddc_control_mem_regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_user_V_reg_702_pp0_iter3_reg),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_r_V_user_V_U_ack_in_dummy),
    .data_out(out_r_TUSER),
    .vld_out(regslice_both_out_r_V_user_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_r_V_user_V_U_apdone_blk)
);

resonator_ddc_control_mem_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_V_reg_708_pp0_iter3_reg),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_r_V_last_V_U_ack_in_dummy),
    .data_out(out_r_TLAST),
    .vld_out(regslice_both_out_r_V_last_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_r_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        accg_V <= p_Result_s_fu_648_p9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln232_reg_728 <= add_ln232_fu_268_p2;
        p_Result_17_reg_861 <= {{tones_and_centers_Dout_A[511:256]}};
        phase0_V_1_reg_749 <= {{tones_and_centers_Dout_A[129:109]}};
        phase0_V_2_reg_765 <= {{tones_and_centers_Dout_A[150:130]}};
        phase0_V_3_reg_781 <= {{tones_and_centers_Dout_A[171:151]}};
        phase0_V_4_reg_797 <= {{tones_and_centers_Dout_A[192:172]}};
        phase0_V_5_reg_813 <= {{tones_and_centers_Dout_A[213:193]}};
        phase0_V_6_reg_829 <= {{tones_and_centers_Dout_A[234:214]}};
        phase0_V_7_reg_845 <= {{tones_and_centers_Dout_A[255:235]}};
        phase0_V_reg_733 <= {{tones_and_centers_Dout_A[108:88]}};
        tmp_1_reg_760 <= {{tones_and_centers_Dout_A[21:11]}};
        tmp_2_reg_776 <= {{tones_and_centers_Dout_A[32:22]}};
        tmp_3_reg_792 <= {{tones_and_centers_Dout_A[43:33]}};
        tmp_4_reg_808 <= {{tones_and_centers_Dout_A[54:44]}};
        tmp_5_reg_824 <= {{tones_and_centers_Dout_A[65:55]}};
        tmp_6_reg_840 <= {{tones_and_centers_Dout_A[76:66]}};
        tmp_7_reg_856 <= {{tones_and_centers_Dout_A[87:77]}};
        tmp_V_1_reg_754 <= {{accumulator_V_q1[41:21]}};
        tmp_V_2_reg_770 <= {{accumulator_V_q1[62:42]}};
        tmp_V_3_reg_786 <= {{accumulator_V_q1[83:63]}};
        tmp_V_4_reg_802 <= {{accumulator_V_q1[104:84]}};
        tmp_V_5_reg_818 <= {{accumulator_V_q1[125:105]}};
        tmp_V_6_reg_834 <= {{accumulator_V_q1[146:126]}};
        tmp_V_7_reg_850 <= {{accumulator_V_q1[167:147]}};
        tmp_V_reg_738 <= tmp_V_fu_283_p1;
        tmp_data_V_1_reg_697_pp0_iter2_reg <= tmp_data_V_1_reg_697_pp0_iter1_reg;
        tmp_data_V_1_reg_697_pp0_iter3_reg <= tmp_data_V_1_reg_697_pp0_iter2_reg;
        tmp_last_V_reg_708_pp0_iter2_reg <= tmp_last_V_reg_708_pp0_iter1_reg;
        tmp_last_V_reg_708_pp0_iter3_reg <= tmp_last_V_reg_708_pp0_iter2_reg;
        tmp_user_V_reg_702_pp0_iter2_reg <= tmp_user_V_reg_702_pp0_iter1_reg;
        tmp_user_V_reg_702_pp0_iter3_reg <= tmp_user_V_reg_702_pp0_iter2_reg;
        trunc_ln1393_reg_744 <= trunc_ln1393_fu_287_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_V_1_reg_697 <= res_in_TDATA;
        tmp_data_V_1_reg_697_pp0_iter1_reg <= tmp_data_V_1_reg_697;
        tmp_last_V_reg_708 <= res_in_TLAST;
        tmp_last_V_reg_708_pp0_iter1_reg <= tmp_last_V_reg_708;
        tmp_user_V_reg_702 <= res_in_TUSER;
        tmp_user_V_reg_702_pp0_iter1_reg <= tmp_user_V_reg_702;
        zext_ln587_reg_713[7 : 0] <= zext_ln587_fu_263_p1[7 : 0];
        zext_ln587_reg_713_pp0_iter1_reg[7 : 0] <= zext_ln587_reg_713[7 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        accumulator_V_ce0 = 1'b1;
    end else begin
        accumulator_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        accumulator_V_ce1 = 1'b1;
    end else begin
        accumulator_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        accumulator_V_we0 = 1'b1;
    end else begin
        accumulator_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_r_TDATA_blk_n = out_r_TREADY_int_regslice;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_r_TVALID_int_regslice = 1'b1;
    end else begin
        out_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_in_TDATA_blk_n = res_in_TVALID;
    end else begin
        res_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_in_TREADY = 1'b1;
    end else begin
        res_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        tones_and_centers_EN_A = 1'b1;
    end else begin
        tones_and_centers_EN_A = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accumulator_V_address0 = zext_ln587_1_fu_511_p1;

assign accumulator_V_address1 = zext_ln587_reg_713_pp0_iter1_reg;

assign add_ln232_fu_268_p2 = ($signed(tmp_user_V_reg_702_pp0_iter2_reg) + $signed(8'd255));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((res_in_TVALID == 1'b0) & (1'b1 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & ((regslice_both_out_r_V_data_V_U_apdone_blk == 1'b1) | (out_r_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (out_r_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((res_in_TVALID == 1'b0) & (1'b1 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & ((regslice_both_out_r_V_data_V_U_apdone_blk == 1'b1) | (out_r_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (out_r_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((res_in_TVALID == 1'b0) & (1'b1 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & ((regslice_both_out_r_V_data_V_U_apdone_blk == 1'b1) | (out_r_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (out_r_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (res_in_TVALID == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (out_r_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = ((regslice_both_out_r_V_data_V_U_apdone_blk == 1'b1) | (out_r_TREADY_int_regslice == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign out_r_TDATA_int_regslice = {{{{{{{{{{p_Result_17_reg_861}, {p_Val2_16_fu_632_p2}}, {p_Val2_14_fu_616_p2}}, {p_Val2_12_fu_600_p2}}, {p_Val2_10_fu_584_p2}}, {p_Val2_8_fu_568_p2}}, {p_Val2_6_fu_552_p2}}, {p_Val2_4_fu_536_p2}}, {p_Val2_s_fu_520_p2}}, {tmp_data_V_1_reg_697_pp0_iter3_reg}};

assign out_r_TVALID = regslice_both_out_r_V_data_V_U_vld_out;

assign p_Result_s_fu_648_p9 = {{{{{{{{p_Val2_17_fu_643_p2}, {p_Val2_15_fu_627_p2}}, {p_Val2_13_fu_611_p2}}, {p_Val2_11_fu_595_p2}}, {p_Val2_9_fu_579_p2}}, {p_Val2_7_fu_563_p2}}, {p_Val2_5_fu_547_p2}}, {p_Val2_3_fu_531_p2}};

assign p_Val2_10_fu_584_p2 = (tmp_V_4_reg_802 + phase0_V_4_reg_797);

assign p_Val2_11_fu_595_p2 = (tmp_V_4_reg_802 + shl_ln1393_4_fu_588_p3);

assign p_Val2_12_fu_600_p2 = (tmp_V_5_reg_818 + phase0_V_5_reg_813);

assign p_Val2_13_fu_611_p2 = (tmp_V_5_reg_818 + shl_ln1393_5_fu_604_p3);

assign p_Val2_14_fu_616_p2 = (tmp_V_6_reg_834 + phase0_V_6_reg_829);

assign p_Val2_15_fu_627_p2 = (tmp_V_6_reg_834 + shl_ln1393_6_fu_620_p3);

assign p_Val2_16_fu_632_p2 = (tmp_V_7_reg_850 + phase0_V_7_reg_845);

assign p_Val2_17_fu_643_p2 = (tmp_V_7_reg_850 + shl_ln1393_7_fu_636_p3);

assign p_Val2_3_fu_531_p2 = (tmp_V_reg_738 + shl_ln_fu_524_p3);

assign p_Val2_4_fu_536_p2 = (tmp_V_1_reg_754 + phase0_V_1_reg_749);

assign p_Val2_5_fu_547_p2 = (tmp_V_1_reg_754 + shl_ln1393_1_fu_540_p3);

assign p_Val2_6_fu_552_p2 = (tmp_V_2_reg_770 + phase0_V_2_reg_765);

assign p_Val2_7_fu_563_p2 = (tmp_V_2_reg_770 + shl_ln1393_2_fu_556_p3);

assign p_Val2_8_fu_568_p2 = (tmp_V_3_reg_786 + phase0_V_3_reg_781);

assign p_Val2_9_fu_579_p2 = (tmp_V_3_reg_786 + shl_ln1393_3_fu_572_p3);

assign p_Val2_s_fu_520_p2 = (tmp_V_reg_738 + phase0_V_reg_733);

assign shl_ln1393_1_fu_540_p3 = {{tmp_1_reg_760}, {10'd0}};

assign shl_ln1393_2_fu_556_p3 = {{tmp_2_reg_776}, {10'd0}};

assign shl_ln1393_3_fu_572_p3 = {{tmp_3_reg_792}, {10'd0}};

assign shl_ln1393_4_fu_588_p3 = {{tmp_4_reg_808}, {10'd0}};

assign shl_ln1393_5_fu_604_p3 = {{tmp_5_reg_824}, {10'd0}};

assign shl_ln1393_6_fu_620_p3 = {{tmp_6_reg_840}, {10'd0}};

assign shl_ln1393_7_fu_636_p3 = {{tmp_7_reg_856}, {10'd0}};

assign shl_ln_fu_524_p3 = {{trunc_ln1393_reg_744}, {10'd0}};

assign tmp_V_fu_283_p1 = accumulator_V_q1[20:0];

assign tones_and_centers_Addr_A = tones_and_centers_Addr_A_orig << 32'd6;

assign tones_and_centers_Addr_A_orig = zext_ln587_fu_263_p1;

assign tones_and_centers_Clk_A = ap_clk;

assign tones_and_centers_Din_A = 512'd0;

always @ (*) begin
    tones_and_centers_Rst_A = ~ap_rst_n;
end

assign tones_and_centers_WEN_A = 64'd0;

assign trunc_ln1393_fu_287_p1 = tones_and_centers_Dout_A[10:0];

assign zext_ln587_1_fu_511_p1 = add_ln232_reg_728;

assign zext_ln587_fu_263_p1 = res_in_TUSER;

always @ (posedge ap_clk) begin
    zext_ln587_reg_713[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln587_reg_713_pp0_iter1_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end


reg find_kernel_block = 0;
// synthesis translate_off
`include "resonator_ddc_control_mem_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //resonator_ddc_control_mem

