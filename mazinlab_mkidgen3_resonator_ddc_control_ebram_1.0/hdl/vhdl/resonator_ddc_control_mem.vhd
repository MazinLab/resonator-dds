-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity resonator_ddc_control_mem is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    res_in_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    res_in_TVALID : IN STD_LOGIC;
    res_in_TREADY : OUT STD_LOGIC;
    res_in_TKEEP : IN STD_LOGIC_VECTOR (31 downto 0);
    res_in_TSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
    res_in_TUSER : IN STD_LOGIC_VECTOR (7 downto 0);
    res_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    tones_and_centers_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    tones_and_centers_EN_A : OUT STD_LOGIC;
    tones_and_centers_WEN_A : OUT STD_LOGIC_VECTOR (63 downto 0);
    tones_and_centers_Din_A : OUT STD_LOGIC_VECTOR (511 downto 0);
    tones_and_centers_Dout_A : IN STD_LOGIC_VECTOR (511 downto 0);
    tones_and_centers_Clk_A : OUT STD_LOGIC;
    tones_and_centers_Rst_A : OUT STD_LOGIC;
    out_r_TDATA : OUT STD_LOGIC_VECTOR (679 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (84 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (84 downto 0);
    out_r_TUSER : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of resonator_ddc_control_mem is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "resonator_ddc_control_mem_resonator_ddc_control_mem,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.237000,HLS_SYN_LAT=5,HLS_SYN_TPT=1,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=1335,HLS_SYN_LUT=583,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv85_0 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_AB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_AC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101100";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_C1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000001";
    constant ap_const_lv32_D5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010101";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_D6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010110";
    constant ap_const_lv32_EA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101010";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_92 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010010";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_EB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101011";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_93 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010011";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal accg_V : STD_LOGIC_VECTOR (167 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal accumulator_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal accumulator_V_ce0 : STD_LOGIC;
    signal accumulator_V_we0 : STD_LOGIC;
    signal accumulator_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal accumulator_V_ce1 : STD_LOGIC;
    signal accumulator_V_q1 : STD_LOGIC_VECTOR (167 downto 0);
    signal res_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal tmp_data_V_1_reg_697 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal regslice_both_out_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_data_V_1_reg_697_pp0_iter1_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_data_V_1_reg_697_pp0_iter2_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_data_V_1_reg_697_pp0_iter3_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_user_V_reg_702 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_702_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_702_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_702_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_last_V_reg_708 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_708_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_708_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_708_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln587_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln587_reg_713 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln587_reg_713_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln232_fu_268_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln232_reg_728 : STD_LOGIC_VECTOR (7 downto 0);
    signal phase0_V_reg_733 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_V_fu_283_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_V_reg_738 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln1393_fu_287_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1393_reg_744 : STD_LOGIC_VECTOR (10 downto 0);
    signal phase0_V_1_reg_749 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_V_1_reg_754 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_1_reg_760 : STD_LOGIC_VECTOR (10 downto 0);
    signal phase0_V_2_reg_765 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_V_2_reg_770 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_2_reg_776 : STD_LOGIC_VECTOR (10 downto 0);
    signal phase0_V_3_reg_781 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_V_3_reg_786 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_3_reg_792 : STD_LOGIC_VECTOR (10 downto 0);
    signal phase0_V_4_reg_797 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_V_4_reg_802 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_4_reg_808 : STD_LOGIC_VECTOR (10 downto 0);
    signal phase0_V_5_reg_813 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_V_5_reg_818 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_5_reg_824 : STD_LOGIC_VECTOR (10 downto 0);
    signal phase0_V_6_reg_829 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_V_6_reg_834 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_6_reg_840 : STD_LOGIC_VECTOR (10 downto 0);
    signal phase0_V_7_reg_845 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_V_7_reg_850 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_7_reg_856 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_17_reg_861 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal zext_ln587_1_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_648_p9 : STD_LOGIC_VECTOR (167 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tones_and_centers_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_524_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1393_1_fu_540_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1393_2_fu_556_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1393_3_fu_572_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1393_4_fu_588_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1393_5_fu_604_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1393_6_fu_620_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1393_7_fu_636_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_17_fu_643_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_15_fu_627_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_13_fu_611_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_11_fu_595_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_9_fu_579_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_7_fu_563_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_5_fu_547_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_3_fu_531_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_16_fu_632_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_14_fu_616_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_12_fu_600_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_10_fu_584_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_8_fu_568_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_6_fu_552_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_4_fu_536_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_s_fu_520_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal out_r_TDATA_int_regslice : STD_LOGIC_VECTOR (679 downto 0);
    signal out_r_TVALID_int_regslice : STD_LOGIC;
    signal out_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_r_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_r_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_r_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_r_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_r_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_r_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component resonator_ddc_control_mem_accumulator_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (167 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (167 downto 0) );
    end component;


    component resonator_ddc_control_mem_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    accumulator_V_U : component resonator_ddc_control_mem_accumulator_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 168,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => accumulator_V_address0,
        ce0 => accumulator_V_ce0,
        we0 => accumulator_V_we0,
        d0 => accg_V,
        address1 => accumulator_V_address1,
        ce1 => accumulator_V_ce1,
        q1 => accumulator_V_q1);

    regslice_both_out_r_V_data_V_U : component resonator_ddc_control_mem_regslice_both
    generic map (
        DataWidth => 680)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_r_TDATA_int_regslice,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => out_r_TREADY_int_regslice,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_r_V_data_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_V_data_V_U_apdone_blk);

    regslice_both_out_r_V_keep_V_U : component resonator_ddc_control_mem_regslice_both
    generic map (
        DataWidth => 85)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv85_0,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_r_V_keep_V_U_ack_in_dummy,
        data_out => out_r_TKEEP,
        vld_out => regslice_both_out_r_V_keep_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_V_keep_V_U_apdone_blk);

    regslice_both_out_r_V_strb_V_U : component resonator_ddc_control_mem_regslice_both
    generic map (
        DataWidth => 85)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv85_0,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_r_V_strb_V_U_ack_in_dummy,
        data_out => out_r_TSTRB,
        vld_out => regslice_both_out_r_V_strb_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_V_strb_V_U_apdone_blk);

    regslice_both_out_r_V_user_V_U : component resonator_ddc_control_mem_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_user_V_reg_702_pp0_iter3_reg,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_r_V_user_V_U_ack_in_dummy,
        data_out => out_r_TUSER,
        vld_out => regslice_both_out_r_V_user_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_V_user_V_U_apdone_blk);

    regslice_both_out_r_V_last_V_U : component resonator_ddc_control_mem_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_last_V_reg_708_pp0_iter3_reg,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_r_V_last_V_U_ack_in_dummy,
        data_out => out_r_TLAST,
        vld_out => regslice_both_out_r_V_last_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                accg_V <= p_Result_s_fu_648_p9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln232_reg_728 <= add_ln232_fu_268_p2;
                p_Result_17_reg_861 <= tones_and_centers_Dout_A(511 downto 256);
                phase0_V_1_reg_749 <= tones_and_centers_Dout_A(129 downto 109);
                phase0_V_2_reg_765 <= tones_and_centers_Dout_A(150 downto 130);
                phase0_V_3_reg_781 <= tones_and_centers_Dout_A(171 downto 151);
                phase0_V_4_reg_797 <= tones_and_centers_Dout_A(192 downto 172);
                phase0_V_5_reg_813 <= tones_and_centers_Dout_A(213 downto 193);
                phase0_V_6_reg_829 <= tones_and_centers_Dout_A(234 downto 214);
                phase0_V_7_reg_845 <= tones_and_centers_Dout_A(255 downto 235);
                phase0_V_reg_733 <= tones_and_centers_Dout_A(108 downto 88);
                tmp_1_reg_760 <= tones_and_centers_Dout_A(21 downto 11);
                tmp_2_reg_776 <= tones_and_centers_Dout_A(32 downto 22);
                tmp_3_reg_792 <= tones_and_centers_Dout_A(43 downto 33);
                tmp_4_reg_808 <= tones_and_centers_Dout_A(54 downto 44);
                tmp_5_reg_824 <= tones_and_centers_Dout_A(65 downto 55);
                tmp_6_reg_840 <= tones_and_centers_Dout_A(76 downto 66);
                tmp_7_reg_856 <= tones_and_centers_Dout_A(87 downto 77);
                tmp_V_1_reg_754 <= accumulator_V_q1(41 downto 21);
                tmp_V_2_reg_770 <= accumulator_V_q1(62 downto 42);
                tmp_V_3_reg_786 <= accumulator_V_q1(83 downto 63);
                tmp_V_4_reg_802 <= accumulator_V_q1(104 downto 84);
                tmp_V_5_reg_818 <= accumulator_V_q1(125 downto 105);
                tmp_V_6_reg_834 <= accumulator_V_q1(146 downto 126);
                tmp_V_7_reg_850 <= accumulator_V_q1(167 downto 147);
                tmp_V_reg_738 <= tmp_V_fu_283_p1;
                tmp_data_V_1_reg_697_pp0_iter2_reg <= tmp_data_V_1_reg_697_pp0_iter1_reg;
                tmp_data_V_1_reg_697_pp0_iter3_reg <= tmp_data_V_1_reg_697_pp0_iter2_reg;
                tmp_last_V_reg_708_pp0_iter2_reg <= tmp_last_V_reg_708_pp0_iter1_reg;
                tmp_last_V_reg_708_pp0_iter3_reg <= tmp_last_V_reg_708_pp0_iter2_reg;
                tmp_user_V_reg_702_pp0_iter2_reg <= tmp_user_V_reg_702_pp0_iter1_reg;
                tmp_user_V_reg_702_pp0_iter3_reg <= tmp_user_V_reg_702_pp0_iter2_reg;
                trunc_ln1393_reg_744 <= trunc_ln1393_fu_287_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_data_V_1_reg_697 <= res_in_TDATA;
                tmp_data_V_1_reg_697_pp0_iter1_reg <= tmp_data_V_1_reg_697;
                tmp_last_V_reg_708 <= res_in_TLAST;
                tmp_last_V_reg_708_pp0_iter1_reg <= tmp_last_V_reg_708;
                tmp_user_V_reg_702 <= res_in_TUSER;
                tmp_user_V_reg_702_pp0_iter1_reg <= tmp_user_V_reg_702;
                    zext_ln587_reg_713(7 downto 0) <= zext_ln587_fu_263_p1(7 downto 0);
                    zext_ln587_reg_713_pp0_iter1_reg(7 downto 0) <= zext_ln587_reg_713(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln587_reg_713(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln587_reg_713_pp0_iter1_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    accumulator_V_address0 <= zext_ln587_1_fu_511_p1(8 - 1 downto 0);
    accumulator_V_address1 <= zext_ln587_reg_713_pp0_iter1_reg(8 - 1 downto 0);

    accumulator_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            accumulator_V_ce0 <= ap_const_logic_1;
        else 
            accumulator_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    accumulator_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            accumulator_V_ce1 <= ap_const_logic_1;
        else 
            accumulator_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    accumulator_V_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            accumulator_V_we0 <= ap_const_logic_1;
        else 
            accumulator_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln232_fu_268_p2 <= std_logic_vector(unsigned(tmp_user_V_reg_702_pp0_iter2_reg) + unsigned(ap_const_lv8_FF));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(res_in_TVALID, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, regslice_both_out_r_V_data_V_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((res_in_TVALID = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((regslice_both_out_r_V_data_V_U_apdone_blk = ap_const_logic_1) or (out_r_TREADY_int_regslice = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (out_r_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(res_in_TVALID, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, regslice_both_out_r_V_data_V_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((res_in_TVALID = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((regslice_both_out_r_V_data_V_U_apdone_blk = ap_const_logic_1) or (out_r_TREADY_int_regslice = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (out_r_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(res_in_TVALID, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, regslice_both_out_r_V_data_V_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((res_in_TVALID = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((regslice_both_out_r_V_data_V_U_apdone_blk = ap_const_logic_1) or (out_r_TREADY_int_regslice = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (out_r_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(res_in_TVALID)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (res_in_TVALID = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter4_assign_proc : process(out_r_TREADY_int_regslice)
    begin
                ap_block_state5_pp0_stage0_iter4 <= (out_r_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state6_pp0_stage0_iter5_assign_proc : process(regslice_both_out_r_V_data_V_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
                ap_block_state6_pp0_stage0_iter5 <= ((regslice_both_out_r_V_data_V_U_apdone_blk = ap_const_logic_1) or (out_r_TREADY_int_regslice = ap_const_logic_0));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    out_r_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, out_r_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            out_r_TDATA_blk_n <= out_r_TREADY_int_regslice;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TDATA_int_regslice <= (((((((((p_Result_17_reg_861 & p_Val2_16_fu_632_p2) & p_Val2_14_fu_616_p2) & p_Val2_12_fu_600_p2) & p_Val2_10_fu_584_p2) & p_Val2_8_fu_568_p2) & p_Val2_6_fu_552_p2) & p_Val2_4_fu_536_p2) & p_Val2_s_fu_520_p2) & tmp_data_V_1_reg_697_pp0_iter3_reg);
    out_r_TVALID <= regslice_both_out_r_V_data_V_U_vld_out;

    out_r_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_648_p9 <= (((((((p_Val2_17_fu_643_p2 & p_Val2_15_fu_627_p2) & p_Val2_13_fu_611_p2) & p_Val2_11_fu_595_p2) & p_Val2_9_fu_579_p2) & p_Val2_7_fu_563_p2) & p_Val2_5_fu_547_p2) & p_Val2_3_fu_531_p2);
    p_Val2_10_fu_584_p2 <= std_logic_vector(unsigned(tmp_V_4_reg_802) + unsigned(phase0_V_4_reg_797));
    p_Val2_11_fu_595_p2 <= std_logic_vector(unsigned(tmp_V_4_reg_802) + unsigned(shl_ln1393_4_fu_588_p3));
    p_Val2_12_fu_600_p2 <= std_logic_vector(unsigned(tmp_V_5_reg_818) + unsigned(phase0_V_5_reg_813));
    p_Val2_13_fu_611_p2 <= std_logic_vector(unsigned(tmp_V_5_reg_818) + unsigned(shl_ln1393_5_fu_604_p3));
    p_Val2_14_fu_616_p2 <= std_logic_vector(unsigned(tmp_V_6_reg_834) + unsigned(phase0_V_6_reg_829));
    p_Val2_15_fu_627_p2 <= std_logic_vector(unsigned(tmp_V_6_reg_834) + unsigned(shl_ln1393_6_fu_620_p3));
    p_Val2_16_fu_632_p2 <= std_logic_vector(unsigned(tmp_V_7_reg_850) + unsigned(phase0_V_7_reg_845));
    p_Val2_17_fu_643_p2 <= std_logic_vector(unsigned(tmp_V_7_reg_850) + unsigned(shl_ln1393_7_fu_636_p3));
    p_Val2_3_fu_531_p2 <= std_logic_vector(unsigned(tmp_V_reg_738) + unsigned(shl_ln_fu_524_p3));
    p_Val2_4_fu_536_p2 <= std_logic_vector(unsigned(tmp_V_1_reg_754) + unsigned(phase0_V_1_reg_749));
    p_Val2_5_fu_547_p2 <= std_logic_vector(unsigned(tmp_V_1_reg_754) + unsigned(shl_ln1393_1_fu_540_p3));
    p_Val2_6_fu_552_p2 <= std_logic_vector(unsigned(tmp_V_2_reg_770) + unsigned(phase0_V_2_reg_765));
    p_Val2_7_fu_563_p2 <= std_logic_vector(unsigned(tmp_V_2_reg_770) + unsigned(shl_ln1393_2_fu_556_p3));
    p_Val2_8_fu_568_p2 <= std_logic_vector(unsigned(tmp_V_3_reg_786) + unsigned(phase0_V_3_reg_781));
    p_Val2_9_fu_579_p2 <= std_logic_vector(unsigned(tmp_V_3_reg_786) + unsigned(shl_ln1393_3_fu_572_p3));
    p_Val2_s_fu_520_p2 <= std_logic_vector(unsigned(tmp_V_reg_738) + unsigned(phase0_V_reg_733));

    res_in_TDATA_blk_n_assign_proc : process(res_in_TVALID, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_in_TDATA_blk_n <= res_in_TVALID;
        else 
            res_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    res_in_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_in_TREADY <= ap_const_logic_1;
        else 
            res_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln1393_1_fu_540_p3 <= (tmp_1_reg_760 & ap_const_lv10_0);
    shl_ln1393_2_fu_556_p3 <= (tmp_2_reg_776 & ap_const_lv10_0);
    shl_ln1393_3_fu_572_p3 <= (tmp_3_reg_792 & ap_const_lv10_0);
    shl_ln1393_4_fu_588_p3 <= (tmp_4_reg_808 & ap_const_lv10_0);
    shl_ln1393_5_fu_604_p3 <= (tmp_5_reg_824 & ap_const_lv10_0);
    shl_ln1393_6_fu_620_p3 <= (tmp_6_reg_840 & ap_const_lv10_0);
    shl_ln1393_7_fu_636_p3 <= (tmp_7_reg_856 & ap_const_lv10_0);
    shl_ln_fu_524_p3 <= (trunc_ln1393_reg_744 & ap_const_lv10_0);
    tmp_V_fu_283_p1 <= accumulator_V_q1(21 - 1 downto 0);
    tones_and_centers_Addr_A <= std_logic_vector(shift_left(unsigned(tones_and_centers_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    tones_and_centers_Addr_A_orig <= zext_ln587_fu_263_p1(32 - 1 downto 0);
    tones_and_centers_Clk_A <= ap_clk;
    tones_and_centers_Din_A <= ap_const_lv512_lc_1;

    tones_and_centers_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            tones_and_centers_EN_A <= ap_const_logic_1;
        else 
            tones_and_centers_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    tones_and_centers_Rst_A_assign_proc : process(ap_rst_n)
    begin
                tones_and_centers_Rst_A <= not(ap_rst_n);
    end process;

    tones_and_centers_WEN_A <= ap_const_lv64_0;
    trunc_ln1393_fu_287_p1 <= tones_and_centers_Dout_A(11 - 1 downto 0);
    zext_ln587_1_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln232_reg_728),64));
    zext_ln587_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_in_TUSER),64));
end behav;
