-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity resonator_dds is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 14;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    res_in_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    res_in_TVALID : IN STD_LOGIC;
    res_in_TREADY : OUT STD_LOGIC;
    res_in_TUSER : IN STD_LOGIC_VECTOR (7 downto 0);
    res_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    res_out_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    res_out_TVALID : OUT STD_LOGIC;
    res_out_TREADY : IN STD_LOGIC;
    res_out_TUSER : OUT STD_LOGIC_VECTOR (7 downto 0);
    res_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of resonator_dds is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "resonator_dds_resonator_dds,hls_ip_2020_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.288000,HLS_SYN_LAT=30,HLS_SYN_TPT=1,HLS_SYN_MEM=36,HLS_SYN_DSP=0,HLS_SYN_FF=19970,HLS_SYN_LUT=13076,HLS_VERSION=2020_1_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal tones_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tones_ce0 : STD_LOGIC;
    signal tones_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal cycle : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal res_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal res_out_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal data_in_data_V_reg_171 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal regslice_both_res_out_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal data_in_data_V_reg_171_pp0_iter1_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal data_in_data_V_reg_171_pp0_iter2_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal data_in_data_V_reg_171_pp0_iter3_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal data_in_data_V_reg_171_pp0_iter4_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal data_in_data_V_reg_171_pp0_iter5_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal data_in_data_V_reg_171_pp0_iter6_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal data_in_data_V_reg_171_pp0_iter7_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal data_in_data_V_reg_171_pp0_iter8_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal data_in_data_V_reg_171_pp0_iter9_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal data_in_data_V_reg_171_pp0_iter10_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal data_in_data_V_reg_171_pp0_iter11_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal data_in_data_V_reg_171_pp0_iter12_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal data_in_data_V_reg_171_pp0_iter13_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal data_in_data_V_reg_171_pp0_iter14_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal data_in_data_V_reg_171_pp0_iter15_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal data_in_data_V_reg_171_pp0_iter16_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal data_in_data_V_reg_171_pp0_iter17_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal data_in_data_V_reg_171_pp0_iter18_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal data_in_data_V_reg_171_pp0_iter19_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_user_V_reg_176 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter12_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter13_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter15_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter17_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter18_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter19_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter20_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter21_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter22_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter23_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter24_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter25_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter26_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter27_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_176_pp0_iter28_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tones_load_reg_188 : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_accumulate_fu_130_ap_return : STD_LOGIC_VECTOR (175 downto 0);
    signal accg_reg_193 : STD_LOGIC_VECTOR (175 downto 0);
    signal grp_get_dds_fu_114_ap_return : STD_LOGIC_VECTOR (255 downto 0);
    signal ddsg_reg_198 : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_ddc_fu_123_ap_return : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal grp_get_dds_fu_114_ap_start : STD_LOGIC;
    signal grp_get_dds_fu_114_ap_done : STD_LOGIC;
    signal grp_get_dds_fu_114_ap_idle : STD_LOGIC;
    signal grp_get_dds_fu_114_ap_ready : STD_LOGIC;
    signal grp_get_dds_fu_114_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call22 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call22 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call22 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call22 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call22 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call22 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call22 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call22 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call22 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call22 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10_ignore_call22 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11_ignore_call22 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12_ignore_call22 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13_ignore_call22 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14_ignore_call22 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15_ignore_call22 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16_ignore_call22 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17_ignore_call22 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18_ignore_call22 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19_ignore_call22 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20_ignore_call22 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21_ignore_call22 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22_ignore_call22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23_ignore_call22 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24_ignore_call22 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25_ignore_call22 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26_ignore_call22 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27_ignore_call22 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28_ignore_call22 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29_ignore_call22 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30_ignore_call22 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp44 : BOOLEAN;
    signal grp_ddc_fu_123_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call23 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call23 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call23 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call23 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call23 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call23 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call23 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call23 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call23 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call23 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10_ignore_call23 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11_ignore_call23 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12_ignore_call23 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13_ignore_call23 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14_ignore_call23 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15_ignore_call23 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16_ignore_call23 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17_ignore_call23 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18_ignore_call23 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19_ignore_call23 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20_ignore_call23 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21_ignore_call23 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22_ignore_call23 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23_ignore_call23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24_ignore_call23 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25_ignore_call23 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26_ignore_call23 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27_ignore_call23 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28_ignore_call23 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29_ignore_call23 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30_ignore_call23 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp59 : BOOLEAN;
    signal grp_accumulate_fu_130_ap_start : STD_LOGIC;
    signal grp_accumulate_fu_130_ap_done : STD_LOGIC;
    signal grp_accumulate_fu_130_ap_idle : STD_LOGIC;
    signal grp_accumulate_fu_130_ap_ready : STD_LOGIC;
    signal grp_accumulate_fu_130_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call21 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call21 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call21 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call21 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call21 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call21 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call21 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call21 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call21 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call21 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10_ignore_call21 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11_ignore_call21 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12_ignore_call21 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13_ignore_call21 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14_ignore_call21 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15_ignore_call21 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16_ignore_call21 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17_ignore_call21 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18_ignore_call21 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19_ignore_call21 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20_ignore_call21 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21_ignore_call21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22_ignore_call21 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23_ignore_call21 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24_ignore_call21 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25_ignore_call21 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26_ignore_call21 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27_ignore_call21 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28_ignore_call21 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29_ignore_call21 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30_ignore_call21 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp41 : BOOLEAN;
    signal grp_get_dds_fu_114_ap_start_reg : STD_LOGIC := '0';
    signal grp_accumulate_fu_130_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln538_fu_148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln695_fu_153_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_res_in_V_data_V_U_apdone_blk : STD_LOGIC;
    signal res_in_TDATA_int_regslice : STD_LOGIC_VECTOR (255 downto 0);
    signal res_in_TVALID_int_regslice : STD_LOGIC;
    signal res_in_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_res_in_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_res_in_V_user_V_U_apdone_blk : STD_LOGIC;
    signal res_in_TUSER_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_res_in_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_res_in_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_res_in_V_last_V_U_apdone_blk : STD_LOGIC;
    signal res_in_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_res_in_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_res_in_V_last_V_U_ack_in : STD_LOGIC;
    signal res_out_TVALID_int_regslice : STD_LOGIC;
    signal res_out_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_res_out_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_res_out_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_res_out_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_res_out_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_res_out_V_last_V_U_apdone_blk : STD_LOGIC;
    signal res_out_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_res_out_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_res_out_V_last_V_U_vld_out : STD_LOGIC;

    component resonator_dds_get_dds IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        accg : IN STD_LOGIC_VECTOR (175 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component resonator_dds_ddc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        in_r : IN STD_LOGIC_VECTOR (255 downto 0);
        ddsgroup : IN STD_LOGIC_VECTOR (255 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (255 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component resonator_dds_accumulate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        group_r : IN STD_LOGIC_VECTOR (7 downto 0);
        tonesgroup : IN STD_LOGIC_VECTOR (255 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (175 downto 0) );
    end component;


    component resonator_dds_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        tones_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        tones_ce0 : IN STD_LOGIC;
        tones_q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component resonator_dds_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        tones_address0 => tones_address0,
        tones_ce0 => tones_ce0,
        tones_q0 => tones_q0);

    grp_get_dds_fu_114 : component resonator_dds_get_dds
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_get_dds_fu_114_ap_start,
        ap_done => grp_get_dds_fu_114_ap_done,
        ap_idle => grp_get_dds_fu_114_ap_idle,
        ap_ready => grp_get_dds_fu_114_ap_ready,
        ap_ce => grp_get_dds_fu_114_ap_ce,
        accg => accg_reg_193,
        ap_return => grp_get_dds_fu_114_ap_return);

    grp_ddc_fu_123 : component resonator_dds_ddc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        in_r => data_in_data_V_reg_171_pp0_iter19_reg,
        ddsgroup => ddsg_reg_198,
        ap_return => grp_ddc_fu_123_ap_return,
        ap_ce => grp_ddc_fu_123_ap_ce);

    grp_accumulate_fu_130 : component resonator_dds_accumulate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_accumulate_fu_130_ap_start,
        ap_done => grp_accumulate_fu_130_ap_done,
        ap_idle => grp_accumulate_fu_130_ap_idle,
        ap_ready => grp_accumulate_fu_130_ap_ready,
        ap_ce => grp_accumulate_fu_130_ap_ce,
        group_r => tmp_user_V_reg_176_pp0_iter1_reg,
        tonesgroup => tones_load_reg_188,
        ap_return => grp_accumulate_fu_130_ap_return);

    regslice_both_res_in_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => res_in_TDATA,
        vld_in => res_in_TVALID,
        ack_in => regslice_both_res_in_V_data_V_U_ack_in,
        data_out => res_in_TDATA_int_regslice,
        vld_out => res_in_TVALID_int_regslice,
        ack_out => res_in_TREADY_int_regslice,
        apdone_blk => regslice_both_res_in_V_data_V_U_apdone_blk);

    regslice_both_res_in_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => res_in_TUSER,
        vld_in => res_in_TVALID,
        ack_in => regslice_both_res_in_V_user_V_U_ack_in,
        data_out => res_in_TUSER_int_regslice,
        vld_out => regslice_both_res_in_V_user_V_U_vld_out,
        ack_out => res_in_TREADY_int_regslice,
        apdone_blk => regslice_both_res_in_V_user_V_U_apdone_blk);

    regslice_both_res_in_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => res_in_TLAST,
        vld_in => res_in_TVALID,
        ack_in => regslice_both_res_in_V_last_V_U_ack_in,
        data_out => res_in_TLAST_int_regslice,
        vld_out => regslice_both_res_in_V_last_V_U_vld_out,
        ack_out => res_in_TREADY_int_regslice,
        apdone_blk => regslice_both_res_in_V_last_V_U_apdone_blk);

    regslice_both_res_out_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_ddc_fu_123_ap_return,
        vld_in => res_out_TVALID_int_regslice,
        ack_in => res_out_TREADY_int_regslice,
        data_out => res_out_TDATA,
        vld_out => regslice_both_res_out_V_data_V_U_vld_out,
        ack_out => res_out_TREADY,
        apdone_blk => regslice_both_res_out_V_data_V_U_apdone_blk);

    regslice_both_res_out_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_user_V_reg_176_pp0_iter28_reg,
        vld_in => res_out_TVALID_int_regslice,
        ack_in => regslice_both_res_out_V_user_V_U_ack_in_dummy,
        data_out => res_out_TUSER,
        vld_out => regslice_both_res_out_V_user_V_U_vld_out,
        ack_out => res_out_TREADY,
        apdone_blk => regslice_both_res_out_V_user_V_U_apdone_blk);

    regslice_both_res_out_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => res_out_TLAST_int_regslice,
        vld_in => res_out_TVALID_int_regslice,
        ack_in => regslice_both_res_out_V_last_V_U_ack_in_dummy,
        data_out => res_out_TLAST,
        vld_out => regslice_both_res_out_V_last_V_U_vld_out,
        ack_out => res_out_TREADY,
        apdone_blk => regslice_both_res_out_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_accumulate_fu_130_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_accumulate_fu_130_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    grp_accumulate_fu_130_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_accumulate_fu_130_ap_ready = ap_const_logic_1)) then 
                    grp_accumulate_fu_130_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_get_dds_fu_114_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_get_dds_fu_114_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                    grp_get_dds_fu_114_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_get_dds_fu_114_ap_ready = ap_const_logic_1)) then 
                    grp_get_dds_fu_114_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                accg_reg_193 <= grp_accumulate_fu_130_ap_return;
                data_in_data_V_reg_171_pp0_iter10_reg <= data_in_data_V_reg_171_pp0_iter9_reg;
                data_in_data_V_reg_171_pp0_iter11_reg <= data_in_data_V_reg_171_pp0_iter10_reg;
                data_in_data_V_reg_171_pp0_iter12_reg <= data_in_data_V_reg_171_pp0_iter11_reg;
                data_in_data_V_reg_171_pp0_iter13_reg <= data_in_data_V_reg_171_pp0_iter12_reg;
                data_in_data_V_reg_171_pp0_iter14_reg <= data_in_data_V_reg_171_pp0_iter13_reg;
                data_in_data_V_reg_171_pp0_iter15_reg <= data_in_data_V_reg_171_pp0_iter14_reg;
                data_in_data_V_reg_171_pp0_iter16_reg <= data_in_data_V_reg_171_pp0_iter15_reg;
                data_in_data_V_reg_171_pp0_iter17_reg <= data_in_data_V_reg_171_pp0_iter16_reg;
                data_in_data_V_reg_171_pp0_iter18_reg <= data_in_data_V_reg_171_pp0_iter17_reg;
                data_in_data_V_reg_171_pp0_iter19_reg <= data_in_data_V_reg_171_pp0_iter18_reg;
                data_in_data_V_reg_171_pp0_iter2_reg <= data_in_data_V_reg_171_pp0_iter1_reg;
                data_in_data_V_reg_171_pp0_iter3_reg <= data_in_data_V_reg_171_pp0_iter2_reg;
                data_in_data_V_reg_171_pp0_iter4_reg <= data_in_data_V_reg_171_pp0_iter3_reg;
                data_in_data_V_reg_171_pp0_iter5_reg <= data_in_data_V_reg_171_pp0_iter4_reg;
                data_in_data_V_reg_171_pp0_iter6_reg <= data_in_data_V_reg_171_pp0_iter5_reg;
                data_in_data_V_reg_171_pp0_iter7_reg <= data_in_data_V_reg_171_pp0_iter6_reg;
                data_in_data_V_reg_171_pp0_iter8_reg <= data_in_data_V_reg_171_pp0_iter7_reg;
                data_in_data_V_reg_171_pp0_iter9_reg <= data_in_data_V_reg_171_pp0_iter8_reg;
                ddsg_reg_198 <= grp_get_dds_fu_114_ap_return;
                tmp_user_V_reg_176_pp0_iter10_reg <= tmp_user_V_reg_176_pp0_iter9_reg;
                tmp_user_V_reg_176_pp0_iter11_reg <= tmp_user_V_reg_176_pp0_iter10_reg;
                tmp_user_V_reg_176_pp0_iter12_reg <= tmp_user_V_reg_176_pp0_iter11_reg;
                tmp_user_V_reg_176_pp0_iter13_reg <= tmp_user_V_reg_176_pp0_iter12_reg;
                tmp_user_V_reg_176_pp0_iter14_reg <= tmp_user_V_reg_176_pp0_iter13_reg;
                tmp_user_V_reg_176_pp0_iter15_reg <= tmp_user_V_reg_176_pp0_iter14_reg;
                tmp_user_V_reg_176_pp0_iter16_reg <= tmp_user_V_reg_176_pp0_iter15_reg;
                tmp_user_V_reg_176_pp0_iter17_reg <= tmp_user_V_reg_176_pp0_iter16_reg;
                tmp_user_V_reg_176_pp0_iter18_reg <= tmp_user_V_reg_176_pp0_iter17_reg;
                tmp_user_V_reg_176_pp0_iter19_reg <= tmp_user_V_reg_176_pp0_iter18_reg;
                tmp_user_V_reg_176_pp0_iter20_reg <= tmp_user_V_reg_176_pp0_iter19_reg;
                tmp_user_V_reg_176_pp0_iter21_reg <= tmp_user_V_reg_176_pp0_iter20_reg;
                tmp_user_V_reg_176_pp0_iter22_reg <= tmp_user_V_reg_176_pp0_iter21_reg;
                tmp_user_V_reg_176_pp0_iter23_reg <= tmp_user_V_reg_176_pp0_iter22_reg;
                tmp_user_V_reg_176_pp0_iter24_reg <= tmp_user_V_reg_176_pp0_iter23_reg;
                tmp_user_V_reg_176_pp0_iter25_reg <= tmp_user_V_reg_176_pp0_iter24_reg;
                tmp_user_V_reg_176_pp0_iter26_reg <= tmp_user_V_reg_176_pp0_iter25_reg;
                tmp_user_V_reg_176_pp0_iter27_reg <= tmp_user_V_reg_176_pp0_iter26_reg;
                tmp_user_V_reg_176_pp0_iter28_reg <= tmp_user_V_reg_176_pp0_iter27_reg;
                tmp_user_V_reg_176_pp0_iter2_reg <= tmp_user_V_reg_176_pp0_iter1_reg;
                tmp_user_V_reg_176_pp0_iter3_reg <= tmp_user_V_reg_176_pp0_iter2_reg;
                tmp_user_V_reg_176_pp0_iter4_reg <= tmp_user_V_reg_176_pp0_iter3_reg;
                tmp_user_V_reg_176_pp0_iter5_reg <= tmp_user_V_reg_176_pp0_iter4_reg;
                tmp_user_V_reg_176_pp0_iter6_reg <= tmp_user_V_reg_176_pp0_iter5_reg;
                tmp_user_V_reg_176_pp0_iter7_reg <= tmp_user_V_reg_176_pp0_iter6_reg;
                tmp_user_V_reg_176_pp0_iter8_reg <= tmp_user_V_reg_176_pp0_iter7_reg;
                tmp_user_V_reg_176_pp0_iter9_reg <= tmp_user_V_reg_176_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cycle <= add_ln695_fu_153_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                data_in_data_V_reg_171 <= res_in_TDATA_int_regslice;
                data_in_data_V_reg_171_pp0_iter1_reg <= data_in_data_V_reg_171;
                tmp_user_V_reg_176 <= cycle;
                tmp_user_V_reg_176_pp0_iter1_reg <= tmp_user_V_reg_176;
                tones_load_reg_188 <= tones_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln695_fu_153_p2 <= std_logic_vector(unsigned(cycle) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter30, regslice_both_res_out_V_data_V_U_apdone_blk, res_in_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((res_in_TVALID_int_regslice = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter30 = ap_const_logic_1) and (regslice_both_res_out_V_data_V_U_apdone_blk = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, regslice_both_res_out_V_data_V_U_apdone_blk, res_in_TVALID_int_regslice, res_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((res_out_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1)) or ((res_in_TVALID_int_regslice = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter30 = ap_const_logic_1) and ((res_out_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_res_out_V_data_V_U_apdone_blk = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp41_assign_proc : process(ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, regslice_both_res_out_V_data_V_U_apdone_blk, res_in_TVALID_int_regslice, res_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp41 <= (((res_out_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1)) or ((res_in_TVALID_int_regslice = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter30 = ap_const_logic_1) and ((res_out_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_res_out_V_data_V_U_apdone_blk = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp44_assign_proc : process(ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, regslice_both_res_out_V_data_V_U_apdone_blk, res_in_TVALID_int_regslice, res_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp44 <= (((res_out_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1)) or ((res_in_TVALID_int_regslice = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter30 = ap_const_logic_1) and ((res_out_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_res_out_V_data_V_U_apdone_blk = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp59_assign_proc : process(ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, regslice_both_res_out_V_data_V_U_apdone_blk, res_in_TVALID_int_regslice, res_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp59 <= (((res_out_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1)) or ((res_in_TVALID_int_regslice = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter30 = ap_const_logic_1) and ((res_out_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_res_out_V_data_V_U_apdone_blk = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, regslice_both_res_out_V_data_V_U_apdone_blk, res_in_TVALID_int_regslice, res_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((res_out_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1)) or ((res_in_TVALID_int_regslice = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter30 = ap_const_logic_1) and ((res_out_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_res_out_V_data_V_U_apdone_blk = ap_const_logic_1))));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(res_in_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (res_in_TVALID_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call21_assign_proc : process(res_in_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call21 <= (res_in_TVALID_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call22_assign_proc : process(res_in_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call22 <= (res_in_TVALID_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call23_assign_proc : process(res_in_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call23 <= (res_in_TVALID_int_regslice = ap_const_logic_0);
    end process;

        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state31_pp0_stage0_iter30_assign_proc : process(regslice_both_res_out_V_data_V_U_apdone_blk)
    begin
                ap_block_state31_pp0_stage0_iter30 <= (regslice_both_res_out_V_data_V_U_apdone_blk = ap_const_logic_1);
    end process;


    ap_block_state31_pp0_stage0_iter30_ignore_call21_assign_proc : process(regslice_both_res_out_V_data_V_U_apdone_blk)
    begin
                ap_block_state31_pp0_stage0_iter30_ignore_call21 <= (regslice_both_res_out_V_data_V_U_apdone_blk = ap_const_logic_1);
    end process;


    ap_block_state31_pp0_stage0_iter30_ignore_call22_assign_proc : process(regslice_both_res_out_V_data_V_U_apdone_blk)
    begin
                ap_block_state31_pp0_stage0_iter30_ignore_call22 <= (regslice_both_res_out_V_data_V_U_apdone_blk = ap_const_logic_1);
    end process;


    ap_block_state31_pp0_stage0_iter30_ignore_call23_assign_proc : process(regslice_both_res_out_V_data_V_U_apdone_blk)
    begin
                ap_block_state31_pp0_stage0_iter30_ignore_call23 <= (regslice_both_res_out_V_data_V_U_apdone_blk = ap_const_logic_1);
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28)
    begin
        if (((ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_accumulate_fu_130_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp41)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp41) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_accumulate_fu_130_ap_ce <= ap_const_logic_1;
        else 
            grp_accumulate_fu_130_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_accumulate_fu_130_ap_start <= grp_accumulate_fu_130_ap_start_reg;

    grp_ddc_fu_123_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp59)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp59) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_ddc_fu_123_ap_ce <= ap_const_logic_1;
        else 
            grp_ddc_fu_123_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_get_dds_fu_114_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp44)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp44) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_get_dds_fu_114_ap_ce <= ap_const_logic_1;
        else 
            grp_get_dds_fu_114_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_get_dds_fu_114_ap_start <= grp_get_dds_fu_114_ap_start_reg;

    res_in_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, res_in_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_in_TDATA_blk_n <= res_in_TVALID_int_regslice;
        else 
            res_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_in_TREADY <= regslice_both_res_in_V_data_V_U_ack_in;

    res_in_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_in_TREADY_int_regslice <= ap_const_logic_1;
        else 
            res_in_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    res_out_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, res_out_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter30 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter29 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            res_out_TDATA_blk_n <= res_out_TREADY_int_regslice;
        else 
            res_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_out_TLAST_int_regslice <= "1" when (tmp_user_V_reg_176_pp0_iter28_reg = ap_const_lv8_FF) else "0";
    res_out_TVALID <= regslice_both_res_out_V_data_V_U_vld_out;

    res_out_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter29, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter29 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_out_TVALID_int_regslice <= ap_const_logic_1;
        else 
            res_out_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    tones_address0 <= zext_ln538_fu_148_p1(8 - 1 downto 0);

    tones_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tones_ce0 <= ap_const_logic_1;
        else 
            tones_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln538_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cycle),64));
end behav;
