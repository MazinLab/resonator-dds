-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity resonator_dds_phase_to_sincos_wLUT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    acc : IN STD_LOGIC_VECTOR (21 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of resonator_dds_phase_to_sincos_wLUT is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv18_20001 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_8001 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal cos_lut_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal cos_lut_ce0 : STD_LOGIC;
    signal cos_lut_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal cos_lut_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal cos_lut_ce1 : STD_LOGIC;
    signal cos_lut_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal fine_lut_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal fine_lut_ce0 : STD_LOGIC;
    signal fine_lut_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_reg_883 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_s_reg_883_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_s_reg_883_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_s_reg_883_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal msb_V_reg_888 : STD_LOGIC_VECTOR (1 downto 0);
    signal msb_V_reg_888_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal msb_V_reg_888_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal msb_V_reg_888_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal msb_V_reg_888_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal lsb_V_fu_154_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal lsb_V_reg_898 : STD_LOGIC_VECTOR (9 downto 0);
    signal sin_adr_V_fu_164_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sin_adr_V_reg_904 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln874_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln874_reg_914 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln874_reg_914_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln874_reg_914_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln874_reg_914_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_lut_word_V_3_reg_928 : STD_LOGIC_VECTOR (16 downto 0);
    signal sin_lut_word_V_reg_933 : STD_LOGIC_VECTOR (16 downto 0);
    signal sin_lut_word_V_reg_933_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal sin_lut_word_V_reg_933_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln703_fu_183_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln703_reg_939 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln703_reg_939_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_fu_186_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_reg_946 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_reg_946_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln790_fu_192_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln790_reg_951 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln703_1_fu_196_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln703_1_reg_956 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln703_1_reg_956_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_1_fu_199_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_1_reg_961 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_1_reg_961_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln790_1_fu_205_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln790_1_reg_966 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln790_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln790_reg_971 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln790_1_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln790_1_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_1_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_1_reg_981 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_lut_word_V_fu_228_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal cos_lut_word_V_reg_992 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln874_3_fu_304_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln874_3_reg_997 : STD_LOGIC_VECTOR (17 downto 0);
    signal and_ln874_4_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln874_4_reg_1002 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_lut_word_V_4_fu_371_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_lut_word_V_4_reg_1007 : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_lut_word_V_4_reg_1007_pp0_iter6_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_lut_word_V_4_reg_1007_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_lut_word_V_4_reg_1007_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_lut_word_V_4_reg_1007_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal fine_word_V_reg_1013 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1192_2_fu_379_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1192_2_reg_1018 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1192_2_reg_1018_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1192_2_reg_1018_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1192_2_reg_1018_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1192_2_reg_1018_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln874_4_fu_383_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln874_4_reg_1023 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln874_4_reg_1023_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln1118_fu_391_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_865_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal ret_V_reg_1049 : STD_LOGIC_VECTOR (43 downto 0);
    signal ret_V_reg_1049_pp0_iter10_reg : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Result_10_reg_1056 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_1056_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_1056_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_1056_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln718_fu_416_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln718_reg_1064 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Result_12_reg_1069 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_reg_1069_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_reg_1069_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_reg_1069_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_876_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_3_reg_1075 : STD_LOGIC_VECTOR (33 downto 0);
    signal trunc_ln1192_fu_426_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln1192_reg_1081 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_reg_1086 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1192_1_fu_464_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln1192_1_reg_1091 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln1192_1_reg_1091_pp0_iter11_reg : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln1192_2_fu_469_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal add_ln1192_2_reg_1096 : STD_LOGIC_VECTOR (42 downto 0);
    signal add_ln1192_2_reg_1096_pp0_iter11_reg : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Result_14_reg_1102 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_reg_1102_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_reg_1102_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_reg_1102_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln718_1_fu_483_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln718_1_reg_1110 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Result_16_reg_1115 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_reg_1115_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_reg_1115_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_reg_1115_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_5_fu_533_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_5_reg_1121 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_5_reg_1121_pp0_iter12_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_13_reg_1127 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_13_reg_1127_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln790_2_fu_547_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln790_2_reg_1135 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_1_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_1_reg_1140 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_reg_1145 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_reg_1151 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln790_2_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln790_2_reg_1158 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_fu_614_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_8_reg_1163 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_8_reg_1163_pp0_iter13_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_17_reg_1169 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_reg_1169_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln790_3_fu_628_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln790_3_reg_1177 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_fu_727_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_1182 : STD_LOGIC_VECTOR (15 downto 0);
    signal carry_3_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_3_reg_1187 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_reg_1193 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln790_3_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln790_3_reg_1200 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln538_fu_170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln538_1_fu_179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln538_2_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phitmp3_fu_234_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln874_1_fu_247_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln58_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln874_fu_240_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal xor_ln874_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln874_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_fu_262_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln58_2_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln44_fu_253_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln874_2_fu_280_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal and_ln874_1_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_1_fu_292_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln58_4_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_5_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_3_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln874_3_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln874_2_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_lut_word_V_1_fu_343_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_lut_word_V_2_fu_350_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln874_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_lut_word_V_3_fu_357_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_fu_398_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal lhs_V_1_fu_434_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal sext_ln1192_fu_441_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal sext_ln703_1_fu_445_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln1192_1_fu_451_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln1192_1_fu_448_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal ret_V_1_fu_458_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Result_s_27_fu_504_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_fu_511_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln412_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_4_fu_495_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_fu_529_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln416_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_585_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_1_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_fu_592_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln412_1_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_7_fu_576_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_1_fu_610_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln781_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_632_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_637_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln781_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln788_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln788_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_713_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_fu_720_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln416_1_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln781_1_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_1_fu_755_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_1_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_1_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_1_fu_760_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_1_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln781_1_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln788_1_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln788_2_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_836_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_1_fu_843_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_fu_850_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_865_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_876_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_865_ce : STD_LOGIC;
    signal grp_fu_876_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to13 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component resonator_dds_mac_mulsub_18s_16ns_43s_44_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (42 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component resonator_dds_mul_mul_18s_16ns_34_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component resonator_dds_phase_to_sincos_wLUT_cos_lut IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component resonator_dds_phase_to_sincos_wLUT_fine_lut IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    cos_lut_U : component resonator_dds_phase_to_sincos_wLUT_cos_lut
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cos_lut_address0,
        ce0 => cos_lut_ce0,
        q0 => cos_lut_q0,
        address1 => cos_lut_address1,
        ce1 => cos_lut_ce1,
        q1 => cos_lut_q1);

    fine_lut_U : component resonator_dds_phase_to_sincos_wLUT_fine_lut
    generic map (
        DataWidth => 16,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fine_lut_address0,
        ce0 => fine_lut_ce0,
        q0 => fine_lut_q0);

    mac_mulsub_18s_16ns_43s_44_4_1_U4 : component resonator_dds_mac_mulsub_18s_16ns_43s_44_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        din2_WIDTH => 43,
        dout_WIDTH => 44)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sin_lut_word_V_4_reg_1007,
        din1 => grp_fu_865_p1,
        din2 => lhs_V_fu_398_p3,
        ce => grp_fu_865_ce,
        dout => grp_fu_865_p3);

    mul_mul_18s_16ns_34_4_1_U5 : component resonator_dds_mul_mul_18s_16ns_34_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln874_4_fu_383_p3,
        din1 => grp_fu_876_p1,
        ce => grp_fu_876_ce,
        dout => grp_fu_876_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                Range1_all_zeros_1_reg_1193 <= Range1_all_zeros_1_fu_745_p2;
                Range1_all_zeros_reg_1151 <= Range1_all_zeros_fu_566_p2;
                add_ln1192_1_reg_1091 <= add_ln1192_1_fu_464_p2;
                add_ln1192_1_reg_1091_pp0_iter11_reg <= add_ln1192_1_reg_1091;
                add_ln1192_2_reg_1096 <= add_ln1192_2_fu_469_p2;
                add_ln1192_2_reg_1096_pp0_iter11_reg <= add_ln1192_2_reg_1096;
                and_ln874_4_reg_1002 <= and_ln874_4_fu_337_p2;
                carry_1_reg_1145 <= carry_1_fu_561_p2;
                carry_3_reg_1187 <= carry_3_fu_740_p2;
                cos_lut_word_V_reg_992 <= cos_lut_word_V_fu_228_p3;
                fine_word_V_reg_1013 <= fine_lut_q0;
                i_reg_1182 <= i_fu_727_p3;
                icmp_ln58_1_reg_981 <= icmp_ln58_1_fu_219_p2;
                icmp_ln790_1_reg_976 <= icmp_ln790_1_fu_214_p2;
                icmp_ln790_2_reg_1158 <= icmp_ln790_2_fu_571_p2;
                icmp_ln790_3_reg_1200 <= icmp_ln790_3_fu_750_p2;
                icmp_ln790_reg_971 <= icmp_ln790_fu_209_p2;
                icmp_ln874_reg_914_pp0_iter2_reg <= icmp_ln874_reg_914;
                icmp_ln874_reg_914_pp0_iter3_reg <= icmp_ln874_reg_914_pp0_iter2_reg;
                icmp_ln874_reg_914_pp0_iter4_reg <= icmp_ln874_reg_914_pp0_iter3_reg;
                msb_V_reg_888_pp0_iter2_reg <= msb_V_reg_888_pp0_iter1_reg;
                msb_V_reg_888_pp0_iter3_reg <= msb_V_reg_888_pp0_iter2_reg;
                msb_V_reg_888_pp0_iter4_reg <= msb_V_reg_888_pp0_iter3_reg;
                p_Result_10_reg_1056 <= grp_fu_865_p3(43 downto 43);
                p_Result_10_reg_1056_pp0_iter10_reg <= p_Result_10_reg_1056;
                p_Result_10_reg_1056_pp0_iter11_reg <= p_Result_10_reg_1056_pp0_iter10_reg;
                p_Result_10_reg_1056_pp0_iter12_reg <= p_Result_10_reg_1056_pp0_iter11_reg;
                p_Result_12_reg_1069 <= grp_fu_865_p3(42 downto 42);
                p_Result_12_reg_1069_pp0_iter10_reg <= p_Result_12_reg_1069;
                p_Result_12_reg_1069_pp0_iter11_reg <= p_Result_12_reg_1069_pp0_iter10_reg;
                p_Result_12_reg_1069_pp0_iter12_reg <= p_Result_12_reg_1069_pp0_iter11_reg;
                p_Result_13_reg_1127 <= p_Val2_5_fu_533_p2(15 downto 15);
                p_Result_13_reg_1127_pp0_iter12_reg <= p_Result_13_reg_1127;
                p_Result_14_reg_1102 <= ret_V_1_fu_458_p2(43 downto 43);
                p_Result_14_reg_1102_pp0_iter11_reg <= p_Result_14_reg_1102;
                p_Result_14_reg_1102_pp0_iter12_reg <= p_Result_14_reg_1102_pp0_iter11_reg;
                p_Result_14_reg_1102_pp0_iter13_reg <= p_Result_14_reg_1102_pp0_iter12_reg;
                p_Result_16_reg_1115 <= add_ln1192_2_fu_469_p2(42 downto 42);
                p_Result_16_reg_1115_pp0_iter11_reg <= p_Result_16_reg_1115;
                p_Result_16_reg_1115_pp0_iter12_reg <= p_Result_16_reg_1115_pp0_iter11_reg;
                p_Result_16_reg_1115_pp0_iter13_reg <= p_Result_16_reg_1115_pp0_iter12_reg;
                p_Result_17_reg_1169 <= p_Val2_8_fu_614_p2(15 downto 15);
                p_Result_17_reg_1169_pp0_iter13_reg <= p_Result_17_reg_1169;
                p_Result_s_reg_883_pp0_iter2_reg <= p_Result_s_reg_883_pp0_iter1_reg;
                p_Result_s_reg_883_pp0_iter3_reg <= p_Result_s_reg_883_pp0_iter2_reg;
                p_Val2_5_reg_1121 <= p_Val2_5_fu_533_p2;
                p_Val2_5_reg_1121_pp0_iter12_reg <= p_Val2_5_reg_1121;
                p_Val2_8_reg_1163 <= p_Val2_8_fu_614_p2;
                p_Val2_8_reg_1163_pp0_iter13_reg <= p_Val2_8_reg_1163;
                r_1_reg_1140 <= r_1_fu_551_p2;
                r_V_1_reg_961 <= r_V_1_fu_199_p2;
                r_V_1_reg_961_pp0_iter4_reg <= r_V_1_reg_961;
                r_V_3_reg_1075 <= grp_fu_876_p2;
                r_V_reg_946 <= r_V_fu_186_p2;
                r_V_reg_946_pp0_iter4_reg <= r_V_reg_946;
                r_reg_1086 <= r_fu_429_p2;
                ret_V_reg_1049_pp0_iter10_reg <= ret_V_reg_1049;
                select_ln874_3_reg_997 <= select_ln874_3_fu_304_p3;
                select_ln874_4_reg_1023 <= select_ln874_4_fu_383_p3;
                select_ln874_4_reg_1023_pp0_iter7_reg <= select_ln874_4_reg_1023;
                sin_lut_word_V_4_reg_1007 <= sin_lut_word_V_4_fu_371_p3;
                sin_lut_word_V_4_reg_1007_pp0_iter6_reg <= sin_lut_word_V_4_reg_1007;
                sin_lut_word_V_4_reg_1007_pp0_iter7_reg <= sin_lut_word_V_4_reg_1007_pp0_iter6_reg;
                sin_lut_word_V_4_reg_1007_pp0_iter8_reg <= sin_lut_word_V_4_reg_1007_pp0_iter7_reg;
                sin_lut_word_V_4_reg_1007_pp0_iter9_reg <= sin_lut_word_V_4_reg_1007_pp0_iter8_reg;
                sin_lut_word_V_reg_933_pp0_iter3_reg <= sin_lut_word_V_reg_933;
                sin_lut_word_V_reg_933_pp0_iter4_reg <= sin_lut_word_V_reg_933_pp0_iter3_reg;
                trunc_ln1192_2_reg_1018 <= trunc_ln1192_2_fu_379_p1;
                trunc_ln1192_2_reg_1018_pp0_iter6_reg <= trunc_ln1192_2_reg_1018;
                trunc_ln1192_2_reg_1018_pp0_iter7_reg <= trunc_ln1192_2_reg_1018_pp0_iter6_reg;
                trunc_ln1192_2_reg_1018_pp0_iter8_reg <= trunc_ln1192_2_reg_1018_pp0_iter7_reg;
                trunc_ln1192_2_reg_1018_pp0_iter9_reg <= trunc_ln1192_2_reg_1018_pp0_iter8_reg;
                trunc_ln1192_reg_1081 <= trunc_ln1192_fu_426_p1;
                trunc_ln718_1_reg_1110 <= trunc_ln718_1_fu_483_p1;
                trunc_ln718_reg_1064 <= trunc_ln718_fu_416_p1;
                trunc_ln790_1_reg_966 <= trunc_ln790_1_fu_205_p1;
                trunc_ln790_2_reg_1135 <= trunc_ln790_2_fu_547_p1;
                trunc_ln790_3_reg_1177 <= trunc_ln790_3_fu_628_p1;
                trunc_ln790_reg_951 <= trunc_ln790_fu_192_p1;
                    zext_ln703_1_reg_956(16 downto 0) <= zext_ln703_1_fu_196_p1(16 downto 0);
                    zext_ln703_1_reg_956_pp0_iter4_reg(16 downto 0) <= zext_ln703_1_reg_956(16 downto 0);
                    zext_ln703_reg_939(16 downto 0) <= zext_ln703_fu_183_p1(16 downto 0);
                    zext_ln703_reg_939_pp0_iter4_reg(16 downto 0) <= zext_ln703_reg_939(16 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                cos_lut_word_V_3_reg_928 <= cos_lut_q1;
                sin_lut_word_V_reg_933 <= cos_lut_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln874_reg_914 <= icmp_ln874_fu_174_p2;
                lsb_V_reg_898 <= acc(19 downto 10);
                msb_V_reg_888 <= acc(21 downto 20);
                msb_V_reg_888_pp0_iter1_reg <= msb_V_reg_888;
                p_Result_s_reg_883 <= acc(9 downto 1);
                p_Result_s_reg_883_pp0_iter1_reg <= p_Result_s_reg_883;
                sin_adr_V_reg_904 <= sin_adr_V_fu_164_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                ret_V_reg_1049 <= grp_fu_865_p3;
            end if;
        end if;
    end process;
    zext_ln703_reg_939(17) <= '0';
    zext_ln703_reg_939_pp0_iter4_reg(17) <= '0';
    zext_ln703_1_reg_956(17) <= '0';
    zext_ln703_1_reg_956_pp0_iter4_reg(17) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Range1_all_zeros_1_fu_745_p2 <= (p_Result_14_reg_1102_pp0_iter12_reg xor ap_const_lv1_1);
    Range1_all_zeros_fu_566_p2 <= (p_Result_10_reg_1056_pp0_iter11_reg xor ap_const_lv1_1);
    add_ln1192_1_fu_464_p2 <= std_logic_vector(unsigned(trunc_ln1192_reg_1081) + unsigned(trunc_ln1192_1_fu_451_p3));
    add_ln1192_2_fu_469_p2 <= std_logic_vector(signed(sext_ln1192_1_fu_448_p1) + signed(lhs_V_1_fu_434_p3));
    and_ln412_1_fu_604_p2 <= (p_Result_15_fu_592_p3 and or_ln412_1_fu_599_p2);
    and_ln412_fu_523_p2 <= (p_Result_11_fu_511_p3 and or_ln412_fu_518_p2);
    and_ln786_1_fu_791_p2 <= (p_Result_17_reg_1169_pp0_iter13_reg and deleted_ones_1_fu_760_p3);
    and_ln786_fu_668_p2 <= (p_Result_13_reg_1127_pp0_iter12_reg and deleted_ones_fu_637_p3);
    and_ln788_2_fu_807_p2 <= (or_ln788_1_fu_802_p2 and or_ln781_1_fu_770_p2);
    and_ln788_fu_684_p2 <= (or_ln788_fu_679_p2 and or_ln781_fu_647_p2);
    and_ln874_1_fu_300_p2 <= (icmp_ln874_reg_914_pp0_iter4_reg and icmp_ln58_1_reg_981);
    and_ln874_2_fu_326_p2 <= (icmp_ln58_5_fu_321_p2 and icmp_ln58_4_fu_316_p2);
    and_ln874_3_fu_332_p2 <= (icmp_ln874_reg_914_pp0_iter4_reg and icmp_ln58_3_fu_311_p2);
    and_ln874_4_fu_337_p2 <= (and_ln874_3_fu_332_p2 and and_ln874_2_fu_326_p2);
    and_ln874_fu_275_p2 <= (xor_ln874_fu_270_p2 and icmp_ln58_1_reg_981);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to13_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to13 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to13)
    begin
        if (((ap_idle_pp0_0to13 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= (p_Val2_s_fu_850_p3 & i_reg_1182);
    carry_1_fu_561_p2 <= (xor_ln416_fu_556_p2 and p_Result_12_reg_1069_pp0_iter11_reg);
    carry_3_fu_740_p2 <= (xor_ln416_1_fu_735_p2 and p_Result_16_reg_1115_pp0_iter12_reg);
    cos_lut_address0 <= zext_ln538_1_fu_179_p1(10 - 1 downto 0);
    cos_lut_address1 <= zext_ln538_fu_170_p1(10 - 1 downto 0);

    cos_lut_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cos_lut_ce0 <= ap_const_logic_1;
        else 
            cos_lut_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cos_lut_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cos_lut_ce1 <= ap_const_logic_1;
        else 
            cos_lut_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    cos_lut_word_V_fu_228_p3 <= 
        ap_const_lv18_20001 when (icmp_ln790_reg_971(0) = '1') else 
        r_V_reg_946_pp0_iter4_reg;
    deleted_ones_1_fu_760_p3 <= 
        Range1_all_zeros_1_reg_1193 when (carry_3_reg_1187(0) = '1') else 
        p_Result_14_reg_1102_pp0_iter13_reg;
    deleted_ones_fu_637_p3 <= 
        Range1_all_zeros_reg_1151 when (carry_1_reg_1145(0) = '1') else 
        p_Result_10_reg_1056_pp0_iter12_reg;
    deleted_zeros_1_fu_755_p3 <= 
        p_Result_14_reg_1102_pp0_iter13_reg when (carry_3_reg_1187(0) = '1') else 
        Range1_all_zeros_1_reg_1193;
    deleted_zeros_fu_632_p3 <= 
        p_Result_10_reg_1056_pp0_iter12_reg when (carry_1_reg_1145(0) = '1') else 
        Range1_all_zeros_reg_1151;
    fine_lut_address0 <= zext_ln538_2_fu_224_p1(9 - 1 downto 0);

    fine_lut_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then 
            fine_lut_ce0 <= ap_const_logic_1;
        else 
            fine_lut_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_865_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_865_ce <= ap_const_logic_1;
        else 
            grp_fu_865_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_865_p1 <= zext_ln1118_fu_391_p1(16 - 1 downto 0);

    grp_fu_876_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_876_ce <= ap_const_logic_1;
        else 
            grp_fu_876_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_876_p1 <= zext_ln1118_fu_391_p1(16 - 1 downto 0);
    i_fu_727_p3 <= 
        select_ln340_fu_713_p3 when (or_ln340_1_fu_707_p2(0) = '1') else 
        select_ln388_fu_720_p3;
    icmp_ln58_1_fu_219_p2 <= "1" when (msb_V_reg_888_pp0_iter3_reg = ap_const_lv2_0) else "0";
    icmp_ln58_2_fu_287_p2 <= "1" when (msb_V_reg_888_pp0_iter4_reg = ap_const_lv2_3) else "0";
    icmp_ln58_3_fu_311_p2 <= "0" when (msb_V_reg_888_pp0_iter4_reg = ap_const_lv2_0) else "1";
    icmp_ln58_4_fu_316_p2 <= "0" when (msb_V_reg_888_pp0_iter4_reg = ap_const_lv2_1) else "1";
    icmp_ln58_5_fu_321_p2 <= "0" when (msb_V_reg_888_pp0_iter4_reg = ap_const_lv2_3) else "1";
    icmp_ln58_fu_257_p2 <= "1" when (msb_V_reg_888_pp0_iter4_reg = ap_const_lv2_1) else "0";
    icmp_ln790_1_fu_214_p2 <= "1" when (trunc_ln790_1_reg_966 = ap_const_lv17_0) else "0";
    icmp_ln790_2_fu_571_p2 <= "1" when (trunc_ln790_2_reg_1135 = ap_const_lv15_0) else "0";
    icmp_ln790_3_fu_750_p2 <= "1" when (trunc_ln790_3_reg_1177 = ap_const_lv15_0) else "0";
    icmp_ln790_fu_209_p2 <= "1" when (trunc_ln790_reg_951 = ap_const_lv17_0) else "0";
    icmp_ln874_fu_174_p2 <= "1" when (lsb_V_reg_898 = ap_const_lv10_0) else "0";
    lhs_V_1_fu_434_p3 <= (sin_lut_word_V_4_reg_1007_pp0_iter9_reg & ap_const_lv25_0);
    lhs_V_fu_398_p3 <= (select_ln874_4_reg_1023_pp0_iter7_reg & ap_const_lv25_0);
    lsb_V_fu_154_p4 <= acc(19 downto 10);
    or_ln340_1_fu_707_p2 <= (xor_ln340_fu_701_p2 or overflow_fu_663_p2);
    or_ln340_2_fu_818_p2 <= (underflow_1_fu_813_p2 or overflow_1_fu_786_p2);
    or_ln340_3_fu_830_p2 <= (xor_ln340_1_fu_824_p2 or overflow_1_fu_786_p2);
    or_ln340_fu_695_p2 <= (underflow_fu_690_p2 or overflow_fu_663_p2);
    or_ln412_1_fu_599_p2 <= (r_1_reg_1140 or p_Result_6_fu_585_p3);
    or_ln412_fu_518_p2 <= (r_reg_1086 or p_Result_s_27_fu_504_p3);
    or_ln781_1_fu_770_p2 <= (xor_ln781_1_fu_765_p2 or p_Result_17_reg_1169_pp0_iter13_reg);
    or_ln781_fu_647_p2 <= (xor_ln781_fu_642_p2 or p_Result_13_reg_1127_pp0_iter12_reg);
    or_ln785_1_fu_781_p2 <= (xor_ln785_1_fu_775_p2 or p_Result_17_reg_1169_pp0_iter13_reg);
    or_ln785_fu_658_p2 <= (xor_ln785_fu_652_p2 or p_Result_13_reg_1127_pp0_iter12_reg);
    or_ln788_1_fu_802_p2 <= (xor_ln786_1_fu_796_p2 or icmp_ln790_3_reg_1200);
    or_ln788_fu_679_p2 <= (xor_ln786_fu_673_p2 or icmp_ln790_2_reg_1158);
    or_ln874_fu_365_p2 <= (and_ln874_4_fu_337_p2 or and_ln874_1_fu_300_p2);
    overflow_1_fu_786_p2 <= (or_ln785_1_fu_781_p2 and Range1_all_zeros_1_reg_1193);
    overflow_fu_663_p2 <= (or_ln785_fu_658_p2 and Range1_all_zeros_reg_1151);
    p_Result_11_fu_511_p3 <= ret_V_reg_1049_pp0_iter10_reg(26 downto 26);
    p_Result_15_fu_592_p3 <= add_ln1192_1_reg_1091_pp0_iter11_reg(26 downto 26);
    p_Result_6_fu_585_p3 <= add_ln1192_2_reg_1096_pp0_iter11_reg(27 downto 27);
    p_Result_s_27_fu_504_p3 <= ret_V_reg_1049_pp0_iter10_reg(27 downto 27);
    p_Val2_4_fu_495_p4 <= ret_V_reg_1049_pp0_iter10_reg(42 downto 27);
    p_Val2_5_fu_533_p2 <= std_logic_vector(unsigned(p_Val2_4_fu_495_p4) + unsigned(zext_ln415_fu_529_p1));
    p_Val2_7_fu_576_p4 <= add_ln1192_2_reg_1096_pp0_iter11_reg(42 downto 27);
    p_Val2_8_fu_614_p2 <= std_logic_vector(unsigned(p_Val2_7_fu_576_p4) + unsigned(zext_ln415_1_fu_610_p1));
    p_Val2_s_fu_850_p3 <= 
        select_ln340_2_fu_836_p3 when (or_ln340_3_fu_830_p2(0) = '1') else 
        select_ln388_1_fu_843_p3;
    phitmp3_fu_234_p3 <= 
        ap_const_lv18_20001 when (icmp_ln790_1_reg_976(0) = '1') else 
        r_V_1_reg_961_pp0_iter4_reg;
    r_1_fu_551_p2 <= "0" when (trunc_ln718_1_reg_1110 = ap_const_lv26_0) else "1";
    r_V_1_fu_199_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(zext_ln703_1_fu_196_p1));
    r_V_fu_186_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(zext_ln703_fu_183_p1));
    r_fu_429_p2 <= "0" when (trunc_ln718_reg_1064 = ap_const_lv26_0) else "1";
    ret_V_1_fu_458_p2 <= std_logic_vector(signed(sext_ln1192_fu_441_p1) + signed(sext_ln703_1_fu_445_p1));
    select_ln340_2_fu_836_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_2_fu_818_p2(0) = '1') else 
        p_Val2_8_reg_1163_pp0_iter13_reg;
    select_ln340_fu_713_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_fu_695_p2(0) = '1') else 
        p_Val2_5_reg_1121_pp0_iter12_reg;
    select_ln388_1_fu_843_p3 <= 
        ap_const_lv16_8001 when (underflow_1_fu_813_p2(0) = '1') else 
        p_Val2_8_reg_1163_pp0_iter13_reg;
    select_ln388_fu_720_p3 <= 
        ap_const_lv16_8001 when (underflow_fu_690_p2(0) = '1') else 
        p_Val2_5_reg_1121_pp0_iter12_reg;
    select_ln58_1_fu_292_p3 <= 
        zext_ln44_fu_253_p1 when (icmp_ln58_2_fu_287_p2(0) = '1') else 
        select_ln874_2_fu_280_p3;
    select_ln58_fu_262_p3 <= 
        select_ln874_fu_240_p3 when (icmp_ln58_fu_257_p2(0) = '1') else 
        cos_lut_word_V_fu_228_p3;
    select_ln874_1_fu_247_p3 <= 
        ap_const_lv17_0 when (icmp_ln874_reg_914_pp0_iter4_reg(0) = '1') else 
        sin_lut_word_V_reg_933_pp0_iter4_reg;
    select_ln874_2_fu_280_p3 <= 
        zext_ln703_reg_939_pp0_iter4_reg when (and_ln874_fu_275_p2(0) = '1') else 
        select_ln58_fu_262_p3;
    select_ln874_3_fu_304_p3 <= 
        zext_ln703_reg_939_pp0_iter4_reg when (and_ln874_1_fu_300_p2(0) = '1') else 
        select_ln58_1_fu_292_p3;
    select_ln874_4_fu_383_p3 <= 
        cos_lut_word_V_reg_992 when (and_ln874_4_reg_1002(0) = '1') else 
        select_ln874_3_reg_997;
    select_ln874_fu_240_p3 <= 
        ap_const_lv18_0 when (icmp_ln874_reg_914_pp0_iter4_reg(0) = '1') else 
        phitmp3_fu_234_p3;
        sext_ln1192_1_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_3_reg_1075),43));

        sext_ln1192_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_1_fu_434_p3),44));

        sext_ln703_1_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_3_reg_1075),44));

    sin_adr_V_fu_164_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(lsb_V_fu_154_p4));
    sin_lut_word_V_1_fu_343_p3 <= 
        zext_ln703_reg_939_pp0_iter4_reg when (icmp_ln58_fu_257_p2(0) = '1') else 
        phitmp3_fu_234_p3;
    sin_lut_word_V_2_fu_350_p3 <= 
        zext_ln703_1_reg_956_pp0_iter4_reg when (and_ln874_fu_275_p2(0) = '1') else 
        sin_lut_word_V_1_fu_343_p3;
    sin_lut_word_V_3_fu_357_p3 <= 
        cos_lut_word_V_fu_228_p3 when (icmp_ln58_2_fu_287_p2(0) = '1') else 
        sin_lut_word_V_2_fu_350_p3;
    sin_lut_word_V_4_fu_371_p3 <= 
        ap_const_lv18_0 when (or_ln874_fu_365_p2(0) = '1') else 
        sin_lut_word_V_3_fu_357_p3;
    trunc_ln1192_1_fu_451_p3 <= (trunc_ln1192_2_reg_1018_pp0_iter9_reg & ap_const_lv25_0);
    trunc_ln1192_2_fu_379_p1 <= sin_lut_word_V_4_fu_371_p3(2 - 1 downto 0);
    trunc_ln1192_fu_426_p1 <= grp_fu_876_p2(27 - 1 downto 0);
    trunc_ln718_1_fu_483_p1 <= ret_V_1_fu_458_p2(26 - 1 downto 0);
    trunc_ln718_fu_416_p1 <= grp_fu_865_p3(26 - 1 downto 0);
    trunc_ln790_1_fu_205_p1 <= r_V_1_fu_199_p2(17 - 1 downto 0);
    trunc_ln790_2_fu_547_p1 <= p_Val2_5_fu_533_p2(15 - 1 downto 0);
    trunc_ln790_3_fu_628_p1 <= p_Val2_8_fu_614_p2(15 - 1 downto 0);
    trunc_ln790_fu_192_p1 <= r_V_fu_186_p2(17 - 1 downto 0);
    underflow_1_fu_813_p2 <= (p_Result_14_reg_1102_pp0_iter13_reg and and_ln788_2_fu_807_p2);
    underflow_fu_690_p2 <= (p_Result_10_reg_1056_pp0_iter12_reg and and_ln788_fu_684_p2);
    xor_ln340_1_fu_824_p2 <= (underflow_1_fu_813_p2 xor ap_const_lv1_1);
    xor_ln340_fu_701_p2 <= (underflow_fu_690_p2 xor ap_const_lv1_1);
    xor_ln416_1_fu_735_p2 <= (p_Result_17_reg_1169 xor ap_const_lv1_1);
    xor_ln416_fu_556_p2 <= (p_Result_13_reg_1127 xor ap_const_lv1_1);
    xor_ln781_1_fu_765_p2 <= (p_Result_16_reg_1115_pp0_iter13_reg xor ap_const_lv1_1);
    xor_ln781_fu_642_p2 <= (p_Result_12_reg_1069_pp0_iter12_reg xor ap_const_lv1_1);
    xor_ln785_1_fu_775_p2 <= (deleted_zeros_1_fu_755_p3 xor ap_const_lv1_1);
    xor_ln785_fu_652_p2 <= (deleted_zeros_fu_632_p3 xor ap_const_lv1_1);
    xor_ln786_1_fu_796_p2 <= (ap_const_lv1_1 xor and_ln786_1_fu_791_p2);
    xor_ln786_fu_673_p2 <= (ap_const_lv1_1 xor and_ln786_fu_668_p2);
    xor_ln874_fu_270_p2 <= (icmp_ln874_reg_914_pp0_iter4_reg xor ap_const_lv1_1);
    zext_ln1118_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fine_word_V_reg_1013),34));
    zext_ln415_1_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln412_1_fu_604_p2),16));
    zext_ln415_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln412_fu_523_p2),16));
    zext_ln44_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln874_1_fu_247_p3),18));
    zext_ln538_1_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sin_adr_V_reg_904),64));
    zext_ln538_2_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_reg_883_pp0_iter3_reg),64));
    zext_ln538_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lsb_V_reg_898),64));
    zext_ln703_1_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sin_lut_word_V_reg_933),18));
    zext_ln703_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cos_lut_word_V_3_reg_928),18));
end behav;
