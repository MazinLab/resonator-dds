-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity resonator_dds_accumulate is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    group_r : IN STD_LOGIC_VECTOR (7 downto 0);
    tonesgroup : IN STD_LOGIC_VECTOR (255 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (175 downto 0) );
end;


architecture behav of resonator_dds_accumulate is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_99 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011001";
    constant ap_const_lv32_9A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal acc : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal accumulator_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal accumulator_V_ce0 : STD_LOGIC;
    signal accumulator_V_we0 : STD_LOGIC;
    signal accumulator_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal accumulator_V_ce1 : STD_LOGIC;
    signal accumulator_V_q1 : STD_LOGIC_VECTOR (175 downto 0);
    signal group_read_reg_642 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_652 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_652_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1192_fu_172_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1192_reg_657 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1192_reg_657_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_662 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_662_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_667 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_667_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_672 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_672_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_677 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_677_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_reg_682 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_reg_682_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_687 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_687_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_reg_692 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_reg_692_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_reg_697 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_reg_697_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_reg_702 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_reg_702_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_reg_707 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_reg_707_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_reg_712 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_reg_712_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_reg_717 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_reg_717_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_reg_722 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_reg_722_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_reg_727 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_reg_727_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln216_fu_316_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln216_reg_732 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln674_fu_321_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln674_reg_737 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_124_1_reg_743 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_124_2_reg_749 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_124_3_reg_755 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_124_4_reg_761 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_124_5_reg_767 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_124_6_reg_773 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_124_7_reg_779 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln538_3_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln538_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_121_7_fu_616_p9 : STD_LOGIC_VECTOR (175 downto 0);
    signal shl_ln_fu_404_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1_fu_416_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_1_fu_428_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1192_1_fu_440_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_2_fu_452_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1192_2_fu_464_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_3_fu_476_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1192_3_fu_488_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_4_fu_500_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1192_4_fu_512_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_5_fu_524_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1192_5_fu_536_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_6_fu_548_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1192_6_fu_560_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_7_fu_572_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_14_fu_579_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_12_fu_555_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_10_fu_531_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_8_fu_507_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_6_fu_483_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_4_fu_459_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_2_fu_435_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_fu_411_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1192_7_fu_604_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_15_fu_611_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_13_fu_567_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_11_fu_543_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_9_fu_519_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_7_fu_495_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_5_fu_471_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_3_fu_447_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_1_fu_423_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component resonator_dds_accumulate_accumulator_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (175 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (175 downto 0) );
    end component;



begin
    accumulator_V_U : component resonator_dds_accumulate_accumulator_V
    generic map (
        DataWidth => 176,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => accumulator_V_address0,
        ce0 => accumulator_V_ce0,
        we0 => accumulator_V_we0,
        d0 => acc,
        address1 => accumulator_V_address1,
        ce1 => accumulator_V_ce1,
        q1 => accumulator_V_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                acc <= p_Result_121_7_fu_616_p9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln216_reg_732 <= add_ln216_fu_316_p2;
                group_read_reg_642 <= group_r;
                p_Result_124_1_reg_743 <= accumulator_V_q1(43 downto 22);
                p_Result_124_2_reg_749 <= accumulator_V_q1(65 downto 44);
                p_Result_124_3_reg_755 <= accumulator_V_q1(87 downto 66);
                p_Result_124_4_reg_761 <= accumulator_V_q1(109 downto 88);
                p_Result_124_5_reg_767 <= accumulator_V_q1(131 downto 110);
                p_Result_124_6_reg_773 <= accumulator_V_q1(153 downto 132);
                p_Result_124_7_reg_779 <= accumulator_V_q1(175 downto 154);
                tmp_10_reg_702 <= tonesgroup(223 downto 208);
                tmp_10_reg_702_pp0_iter1_reg <= tmp_10_reg_702;
                tmp_11_reg_707 <= tonesgroup(95 downto 80);
                tmp_11_reg_707_pp0_iter1_reg <= tmp_11_reg_707;
                tmp_12_reg_712 <= tonesgroup(239 downto 224);
                tmp_12_reg_712_pp0_iter1_reg <= tmp_12_reg_712;
                tmp_13_reg_717 <= tonesgroup(111 downto 96);
                tmp_13_reg_717_pp0_iter1_reg <= tmp_13_reg_717;
                tmp_14_reg_722 <= tonesgroup(255 downto 240);
                tmp_14_reg_722_pp0_iter1_reg <= tmp_14_reg_722;
                tmp_15_reg_727 <= tonesgroup(127 downto 112);
                tmp_15_reg_727_pp0_iter1_reg <= tmp_15_reg_727;
                tmp_2_reg_662 <= tonesgroup(159 downto 144);
                tmp_2_reg_662_pp0_iter1_reg <= tmp_2_reg_662;
                tmp_3_reg_667 <= tonesgroup(31 downto 16);
                tmp_3_reg_667_pp0_iter1_reg <= tmp_3_reg_667;
                tmp_4_reg_672 <= tonesgroup(175 downto 160);
                tmp_4_reg_672_pp0_iter1_reg <= tmp_4_reg_672;
                tmp_5_reg_677 <= tonesgroup(47 downto 32);
                tmp_5_reg_677_pp0_iter1_reg <= tmp_5_reg_677;
                tmp_6_reg_682 <= tonesgroup(191 downto 176);
                tmp_6_reg_682_pp0_iter1_reg <= tmp_6_reg_682;
                tmp_7_reg_687 <= tonesgroup(63 downto 48);
                tmp_7_reg_687_pp0_iter1_reg <= tmp_7_reg_687;
                tmp_8_reg_692 <= tonesgroup(207 downto 192);
                tmp_8_reg_692_pp0_iter1_reg <= tmp_8_reg_692;
                tmp_9_reg_697 <= tonesgroup(79 downto 64);
                tmp_9_reg_697_pp0_iter1_reg <= tmp_9_reg_697;
                tmp_reg_652 <= tonesgroup(143 downto 128);
                tmp_reg_652_pp0_iter1_reg <= tmp_reg_652;
                trunc_ln1192_reg_657 <= trunc_ln1192_fu_172_p1;
                trunc_ln1192_reg_657_pp0_iter1_reg <= trunc_ln1192_reg_657;
                trunc_ln674_reg_737 <= trunc_ln674_fu_321_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    accumulator_V_address0 <= zext_ln538_fu_395_p1(8 - 1 downto 0);
    accumulator_V_address1 <= zext_ln538_3_fu_157_p1(8 - 1 downto 0);

    accumulator_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then 
            accumulator_V_ce0 <= ap_const_logic_1;
        else 
            accumulator_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    accumulator_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1))) then 
            accumulator_V_ce1 <= ap_const_logic_1;
        else 
            accumulator_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    accumulator_V_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then 
            accumulator_V_we0 <= ap_const_logic_1;
        else 
            accumulator_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln216_fu_316_p2 <= std_logic_vector(signed(ap_const_lv8_FF) + signed(group_read_reg_642));
    add_ln703_10_fu_531_p2 <= std_logic_vector(unsigned(shl_ln703_5_fu_524_p3) + unsigned(p_Result_124_5_reg_767));
    add_ln703_11_fu_543_p2 <= std_logic_vector(unsigned(shl_ln1192_5_fu_536_p3) + unsigned(p_Result_124_5_reg_767));
    add_ln703_12_fu_555_p2 <= std_logic_vector(unsigned(shl_ln703_6_fu_548_p3) + unsigned(p_Result_124_6_reg_773));
    add_ln703_13_fu_567_p2 <= std_logic_vector(unsigned(shl_ln1192_6_fu_560_p3) + unsigned(p_Result_124_6_reg_773));
    add_ln703_14_fu_579_p2 <= std_logic_vector(unsigned(shl_ln703_7_fu_572_p3) + unsigned(p_Result_124_7_reg_779));
    add_ln703_15_fu_611_p2 <= std_logic_vector(unsigned(shl_ln1192_7_fu_604_p3) + unsigned(p_Result_124_7_reg_779));
    add_ln703_1_fu_423_p2 <= std_logic_vector(unsigned(shl_ln1_fu_416_p3) + unsigned(trunc_ln674_reg_737));
    add_ln703_2_fu_435_p2 <= std_logic_vector(unsigned(shl_ln703_1_fu_428_p3) + unsigned(p_Result_124_1_reg_743));
    add_ln703_3_fu_447_p2 <= std_logic_vector(unsigned(shl_ln1192_1_fu_440_p3) + unsigned(p_Result_124_1_reg_743));
    add_ln703_4_fu_459_p2 <= std_logic_vector(unsigned(shl_ln703_2_fu_452_p3) + unsigned(p_Result_124_2_reg_749));
    add_ln703_5_fu_471_p2 <= std_logic_vector(unsigned(shl_ln1192_2_fu_464_p3) + unsigned(p_Result_124_2_reg_749));
    add_ln703_6_fu_483_p2 <= std_logic_vector(unsigned(shl_ln703_3_fu_476_p3) + unsigned(p_Result_124_3_reg_755));
    add_ln703_7_fu_495_p2 <= std_logic_vector(unsigned(shl_ln1192_3_fu_488_p3) + unsigned(p_Result_124_3_reg_755));
    add_ln703_8_fu_507_p2 <= std_logic_vector(unsigned(shl_ln703_4_fu_500_p3) + unsigned(p_Result_124_4_reg_761));
    add_ln703_9_fu_519_p2 <= std_logic_vector(unsigned(shl_ln1192_4_fu_512_p3) + unsigned(p_Result_124_4_reg_761));
    add_ln703_fu_411_p2 <= std_logic_vector(unsigned(shl_ln_fu_404_p3) + unsigned(trunc_ln674_reg_737));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= (((((((add_ln703_14_fu_579_p2 & add_ln703_12_fu_555_p2) & add_ln703_10_fu_531_p2) & add_ln703_8_fu_507_p2) & add_ln703_6_fu_483_p2) & add_ln703_4_fu_459_p2) & add_ln703_2_fu_435_p2) & add_ln703_fu_411_p2);
    p_Result_121_7_fu_616_p9 <= (((((((add_ln703_15_fu_611_p2 & add_ln703_13_fu_567_p2) & add_ln703_11_fu_543_p2) & add_ln703_9_fu_519_p2) & add_ln703_7_fu_495_p2) & add_ln703_5_fu_471_p2) & add_ln703_3_fu_447_p2) & add_ln703_1_fu_423_p2);
    shl_ln1192_1_fu_440_p3 <= (tmp_3_reg_667_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln1192_2_fu_464_p3 <= (tmp_5_reg_677_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln1192_3_fu_488_p3 <= (tmp_7_reg_687_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln1192_4_fu_512_p3 <= (tmp_9_reg_697_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln1192_5_fu_536_p3 <= (tmp_11_reg_707_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln1192_6_fu_560_p3 <= (tmp_13_reg_717_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln1192_7_fu_604_p3 <= (tmp_15_reg_727_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln1_fu_416_p3 <= (trunc_ln1192_reg_657_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln703_1_fu_428_p3 <= (tmp_2_reg_662_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln703_2_fu_452_p3 <= (tmp_4_reg_672_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln703_3_fu_476_p3 <= (tmp_6_reg_682_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln703_4_fu_500_p3 <= (tmp_8_reg_692_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln703_5_fu_524_p3 <= (tmp_10_reg_702_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln703_6_fu_548_p3 <= (tmp_12_reg_712_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln703_7_fu_572_p3 <= (tmp_14_reg_722_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln_fu_404_p3 <= (tmp_reg_652_pp0_iter1_reg & ap_const_lv6_0);
    trunc_ln1192_fu_172_p1 <= tonesgroup(16 - 1 downto 0);
    trunc_ln674_fu_321_p1 <= accumulator_V_q1(22 - 1 downto 0);
    zext_ln538_3_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(group_r),64));
    zext_ln538_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln216_reg_732),64));
end behav;
