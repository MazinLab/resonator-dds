// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module resonator_dds_accumulate (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        group_r,
        tonesgroup,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [7:0] group_r;
input  [255:0] tonesgroup;
output  [175:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [175:0] acc;
wire   [7:0] accumulator_V_address0;
reg    accumulator_V_ce0;
reg    accumulator_V_we0;
wire   [7:0] accumulator_V_address1;
reg    accumulator_V_ce1;
wire   [175:0] accumulator_V_q1;
reg   [7:0] group_read_reg_642;
reg   [15:0] tmp_reg_652;
reg   [15:0] tmp_reg_652_pp0_iter1_reg;
wire   [15:0] trunc_ln1192_fu_172_p1;
reg   [15:0] trunc_ln1192_reg_657;
reg   [15:0] trunc_ln1192_reg_657_pp0_iter1_reg;
reg   [15:0] tmp_2_reg_662;
reg   [15:0] tmp_2_reg_662_pp0_iter1_reg;
reg   [15:0] tmp_3_reg_667;
reg   [15:0] tmp_3_reg_667_pp0_iter1_reg;
reg   [15:0] tmp_4_reg_672;
reg   [15:0] tmp_4_reg_672_pp0_iter1_reg;
reg   [15:0] tmp_5_reg_677;
reg   [15:0] tmp_5_reg_677_pp0_iter1_reg;
reg   [15:0] tmp_6_reg_682;
reg   [15:0] tmp_6_reg_682_pp0_iter1_reg;
reg   [15:0] tmp_7_reg_687;
reg   [15:0] tmp_7_reg_687_pp0_iter1_reg;
reg   [15:0] tmp_8_reg_692;
reg   [15:0] tmp_8_reg_692_pp0_iter1_reg;
reg   [15:0] tmp_9_reg_697;
reg   [15:0] tmp_9_reg_697_pp0_iter1_reg;
reg   [15:0] tmp_10_reg_702;
reg   [15:0] tmp_10_reg_702_pp0_iter1_reg;
reg   [15:0] tmp_11_reg_707;
reg   [15:0] tmp_11_reg_707_pp0_iter1_reg;
reg   [15:0] tmp_12_reg_712;
reg   [15:0] tmp_12_reg_712_pp0_iter1_reg;
reg   [15:0] tmp_13_reg_717;
reg   [15:0] tmp_13_reg_717_pp0_iter1_reg;
reg   [15:0] tmp_14_reg_722;
reg   [15:0] tmp_14_reg_722_pp0_iter1_reg;
reg   [15:0] tmp_15_reg_727;
reg   [15:0] tmp_15_reg_727_pp0_iter1_reg;
wire   [7:0] add_ln216_fu_316_p2;
reg   [7:0] add_ln216_reg_732;
wire   [21:0] trunc_ln674_fu_321_p1;
reg   [21:0] trunc_ln674_reg_737;
reg   [21:0] p_Result_124_1_reg_743;
reg   [21:0] p_Result_124_2_reg_749;
reg   [21:0] p_Result_124_3_reg_755;
reg   [21:0] p_Result_124_4_reg_761;
reg   [21:0] p_Result_124_5_reg_767;
reg   [21:0] p_Result_124_6_reg_773;
reg   [21:0] p_Result_124_7_reg_779;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln538_3_fu_157_p1;
wire   [63:0] zext_ln538_fu_395_p1;
wire   [175:0] p_Result_121_7_fu_616_p9;
wire   [21:0] shl_ln_fu_404_p3;
wire   [21:0] shl_ln1_fu_416_p3;
wire   [21:0] shl_ln703_1_fu_428_p3;
wire   [21:0] shl_ln1192_1_fu_440_p3;
wire   [21:0] shl_ln703_2_fu_452_p3;
wire   [21:0] shl_ln1192_2_fu_464_p3;
wire   [21:0] shl_ln703_3_fu_476_p3;
wire   [21:0] shl_ln1192_3_fu_488_p3;
wire   [21:0] shl_ln703_4_fu_500_p3;
wire   [21:0] shl_ln1192_4_fu_512_p3;
wire   [21:0] shl_ln703_5_fu_524_p3;
wire   [21:0] shl_ln1192_5_fu_536_p3;
wire   [21:0] shl_ln703_6_fu_548_p3;
wire   [21:0] shl_ln1192_6_fu_560_p3;
wire   [21:0] shl_ln703_7_fu_572_p3;
wire   [21:0] add_ln703_14_fu_579_p2;
wire   [21:0] add_ln703_12_fu_555_p2;
wire   [21:0] add_ln703_10_fu_531_p2;
wire   [21:0] add_ln703_8_fu_507_p2;
wire   [21:0] add_ln703_6_fu_483_p2;
wire   [21:0] add_ln703_4_fu_459_p2;
wire   [21:0] add_ln703_2_fu_435_p2;
wire   [21:0] add_ln703_fu_411_p2;
wire   [21:0] shl_ln1192_7_fu_604_p3;
wire   [21:0] add_ln703_15_fu_611_p2;
wire   [21:0] add_ln703_13_fu_567_p2;
wire   [21:0] add_ln703_11_fu_543_p2;
wire   [21:0] add_ln703_9_fu_519_p2;
wire   [21:0] add_ln703_7_fu_495_p2;
wire   [21:0] add_ln703_5_fu_471_p2;
wire   [21:0] add_ln703_3_fu_447_p2;
wire   [21:0] add_ln703_1_fu_423_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 acc = 176'd0;
end

resonator_dds_accumulate_accumulator_V #(
    .DataWidth( 176 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
accumulator_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(accumulator_V_address0),
    .ce0(accumulator_V_ce0),
    .we0(accumulator_V_we0),
    .d0(acc),
    .address1(accumulator_V_address1),
    .ce1(accumulator_V_ce1),
    .q1(accumulator_V_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        acc <= p_Result_121_7_fu_616_p9;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln216_reg_732 <= add_ln216_fu_316_p2;
        group_read_reg_642 <= group_r;
        p_Result_124_1_reg_743 <= {{accumulator_V_q1[43:22]}};
        p_Result_124_2_reg_749 <= {{accumulator_V_q1[65:44]}};
        p_Result_124_3_reg_755 <= {{accumulator_V_q1[87:66]}};
        p_Result_124_4_reg_761 <= {{accumulator_V_q1[109:88]}};
        p_Result_124_5_reg_767 <= {{accumulator_V_q1[131:110]}};
        p_Result_124_6_reg_773 <= {{accumulator_V_q1[153:132]}};
        p_Result_124_7_reg_779 <= {{accumulator_V_q1[175:154]}};
        tmp_10_reg_702 <= {{tonesgroup[223:208]}};
        tmp_10_reg_702_pp0_iter1_reg <= tmp_10_reg_702;
        tmp_11_reg_707 <= {{tonesgroup[95:80]}};
        tmp_11_reg_707_pp0_iter1_reg <= tmp_11_reg_707;
        tmp_12_reg_712 <= {{tonesgroup[239:224]}};
        tmp_12_reg_712_pp0_iter1_reg <= tmp_12_reg_712;
        tmp_13_reg_717 <= {{tonesgroup[111:96]}};
        tmp_13_reg_717_pp0_iter1_reg <= tmp_13_reg_717;
        tmp_14_reg_722 <= {{tonesgroup[255:240]}};
        tmp_14_reg_722_pp0_iter1_reg <= tmp_14_reg_722;
        tmp_15_reg_727 <= {{tonesgroup[127:112]}};
        tmp_15_reg_727_pp0_iter1_reg <= tmp_15_reg_727;
        tmp_2_reg_662 <= {{tonesgroup[159:144]}};
        tmp_2_reg_662_pp0_iter1_reg <= tmp_2_reg_662;
        tmp_3_reg_667 <= {{tonesgroup[31:16]}};
        tmp_3_reg_667_pp0_iter1_reg <= tmp_3_reg_667;
        tmp_4_reg_672 <= {{tonesgroup[175:160]}};
        tmp_4_reg_672_pp0_iter1_reg <= tmp_4_reg_672;
        tmp_5_reg_677 <= {{tonesgroup[47:32]}};
        tmp_5_reg_677_pp0_iter1_reg <= tmp_5_reg_677;
        tmp_6_reg_682 <= {{tonesgroup[191:176]}};
        tmp_6_reg_682_pp0_iter1_reg <= tmp_6_reg_682;
        tmp_7_reg_687 <= {{tonesgroup[63:48]}};
        tmp_7_reg_687_pp0_iter1_reg <= tmp_7_reg_687;
        tmp_8_reg_692 <= {{tonesgroup[207:192]}};
        tmp_8_reg_692_pp0_iter1_reg <= tmp_8_reg_692;
        tmp_9_reg_697 <= {{tonesgroup[79:64]}};
        tmp_9_reg_697_pp0_iter1_reg <= tmp_9_reg_697;
        tmp_reg_652 <= {{tonesgroup[143:128]}};
        tmp_reg_652_pp0_iter1_reg <= tmp_reg_652;
        trunc_ln1192_reg_657 <= trunc_ln1192_fu_172_p1;
        trunc_ln1192_reg_657_pp0_iter1_reg <= trunc_ln1192_reg_657;
        trunc_ln674_reg_737 <= trunc_ln674_fu_321_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        accumulator_V_ce0 = 1'b1;
    end else begin
        accumulator_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        accumulator_V_ce1 = 1'b1;
    end else begin
        accumulator_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        accumulator_V_we0 = 1'b1;
    end else begin
        accumulator_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accumulator_V_address0 = zext_ln538_fu_395_p1;

assign accumulator_V_address1 = zext_ln538_3_fu_157_p1;

assign add_ln216_fu_316_p2 = ($signed(8'd255) + $signed(group_read_reg_642));

assign add_ln703_10_fu_531_p2 = (shl_ln703_5_fu_524_p3 + p_Result_124_5_reg_767);

assign add_ln703_11_fu_543_p2 = (shl_ln1192_5_fu_536_p3 + p_Result_124_5_reg_767);

assign add_ln703_12_fu_555_p2 = (shl_ln703_6_fu_548_p3 + p_Result_124_6_reg_773);

assign add_ln703_13_fu_567_p2 = (shl_ln1192_6_fu_560_p3 + p_Result_124_6_reg_773);

assign add_ln703_14_fu_579_p2 = (shl_ln703_7_fu_572_p3 + p_Result_124_7_reg_779);

assign add_ln703_15_fu_611_p2 = (shl_ln1192_7_fu_604_p3 + p_Result_124_7_reg_779);

assign add_ln703_1_fu_423_p2 = (shl_ln1_fu_416_p3 + trunc_ln674_reg_737);

assign add_ln703_2_fu_435_p2 = (shl_ln703_1_fu_428_p3 + p_Result_124_1_reg_743);

assign add_ln703_3_fu_447_p2 = (shl_ln1192_1_fu_440_p3 + p_Result_124_1_reg_743);

assign add_ln703_4_fu_459_p2 = (shl_ln703_2_fu_452_p3 + p_Result_124_2_reg_749);

assign add_ln703_5_fu_471_p2 = (shl_ln1192_2_fu_464_p3 + p_Result_124_2_reg_749);

assign add_ln703_6_fu_483_p2 = (shl_ln703_3_fu_476_p3 + p_Result_124_3_reg_755);

assign add_ln703_7_fu_495_p2 = (shl_ln1192_3_fu_488_p3 + p_Result_124_3_reg_755);

assign add_ln703_8_fu_507_p2 = (shl_ln703_4_fu_500_p3 + p_Result_124_4_reg_761);

assign add_ln703_9_fu_519_p2 = (shl_ln1192_4_fu_512_p3 + p_Result_124_4_reg_761);

assign add_ln703_fu_411_p2 = (shl_ln_fu_404_p3 + trunc_ln674_reg_737);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = {{{{{{{{add_ln703_14_fu_579_p2}, {add_ln703_12_fu_555_p2}}, {add_ln703_10_fu_531_p2}}, {add_ln703_8_fu_507_p2}}, {add_ln703_6_fu_483_p2}}, {add_ln703_4_fu_459_p2}}, {add_ln703_2_fu_435_p2}}, {add_ln703_fu_411_p2}};

assign p_Result_121_7_fu_616_p9 = {{{{{{{{add_ln703_15_fu_611_p2}, {add_ln703_13_fu_567_p2}}, {add_ln703_11_fu_543_p2}}, {add_ln703_9_fu_519_p2}}, {add_ln703_7_fu_495_p2}}, {add_ln703_5_fu_471_p2}}, {add_ln703_3_fu_447_p2}}, {add_ln703_1_fu_423_p2}};

assign shl_ln1192_1_fu_440_p3 = {{tmp_3_reg_667_pp0_iter1_reg}, {6'd0}};

assign shl_ln1192_2_fu_464_p3 = {{tmp_5_reg_677_pp0_iter1_reg}, {6'd0}};

assign shl_ln1192_3_fu_488_p3 = {{tmp_7_reg_687_pp0_iter1_reg}, {6'd0}};

assign shl_ln1192_4_fu_512_p3 = {{tmp_9_reg_697_pp0_iter1_reg}, {6'd0}};

assign shl_ln1192_5_fu_536_p3 = {{tmp_11_reg_707_pp0_iter1_reg}, {6'd0}};

assign shl_ln1192_6_fu_560_p3 = {{tmp_13_reg_717_pp0_iter1_reg}, {6'd0}};

assign shl_ln1192_7_fu_604_p3 = {{tmp_15_reg_727_pp0_iter1_reg}, {6'd0}};

assign shl_ln1_fu_416_p3 = {{trunc_ln1192_reg_657_pp0_iter1_reg}, {6'd0}};

assign shl_ln703_1_fu_428_p3 = {{tmp_2_reg_662_pp0_iter1_reg}, {6'd0}};

assign shl_ln703_2_fu_452_p3 = {{tmp_4_reg_672_pp0_iter1_reg}, {6'd0}};

assign shl_ln703_3_fu_476_p3 = {{tmp_6_reg_682_pp0_iter1_reg}, {6'd0}};

assign shl_ln703_4_fu_500_p3 = {{tmp_8_reg_692_pp0_iter1_reg}, {6'd0}};

assign shl_ln703_5_fu_524_p3 = {{tmp_10_reg_702_pp0_iter1_reg}, {6'd0}};

assign shl_ln703_6_fu_548_p3 = {{tmp_12_reg_712_pp0_iter1_reg}, {6'd0}};

assign shl_ln703_7_fu_572_p3 = {{tmp_14_reg_722_pp0_iter1_reg}, {6'd0}};

assign shl_ln_fu_404_p3 = {{tmp_reg_652_pp0_iter1_reg}, {6'd0}};

assign trunc_ln1192_fu_172_p1 = tonesgroup[15:0];

assign trunc_ln674_fu_321_p1 = accumulator_V_q1[21:0];

assign zext_ln538_3_fu_157_p1 = group_r;

assign zext_ln538_fu_395_p1 = add_ln216_reg_732;

endmodule //resonator_dds_accumulate
