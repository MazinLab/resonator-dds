-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity phase_to_sincos is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    acc_V : IN STD_LOGIC_VECTOR (21 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of phase_to_sincos is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv18_20001 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_8001 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal cos_lut_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal cos_lut_ce0 : STD_LOGIC;
    signal cos_lut_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal cos_lut_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal cos_lut_ce1 : STD_LOGIC;
    signal cos_lut_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal fine_lut_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal fine_lut_ce0 : STD_LOGIC;
    signal fine_lut_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_reg_892 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_s_reg_892_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_s_reg_892_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_s_reg_892_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal msb_V_reg_897 : STD_LOGIC_VECTOR (1 downto 0);
    signal msb_V_reg_897_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal msb_V_reg_897_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal msb_V_reg_897_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal lsb_V_fu_150_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal lsb_V_reg_904 : STD_LOGIC_VECTOR (9 downto 0);
    signal sin_adr_V_fu_160_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sin_adr_V_reg_910 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln879_1_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_reg_920 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_reg_920_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_reg_920_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_reg_920_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_lut_word_V_3_reg_934 : STD_LOGIC_VECTOR (16 downto 0);
    signal sin_lut_word_V_reg_939 : STD_LOGIC_VECTOR (16 downto 0);
    signal sin_lut_word_V_reg_939_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal sin_lut_word_V_reg_939_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln203_fu_179_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln203_reg_945 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln203_reg_945_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln203_1_fu_182_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln203_1_reg_952 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln203_1_reg_952_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_fu_185_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_reg_957 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln790_fu_191_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln790_reg_962 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_1_fu_195_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_1_reg_967 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln790_1_fu_201_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln790_1_reg_972 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln879_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_977 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_2_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_2_reg_985 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_reg_991 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_225_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln340_reg_997 : STD_LOGIC_VECTOR (17 downto 0);
    signal cos_lut_word_V_fu_237_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal cos_lut_word_V_reg_1003 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_s_fu_347_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_s_reg_1015 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_s_reg_1015_pp0_iter6_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_s_reg_1015_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_lut_word_V_5_fu_382_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_lut_word_V_5_reg_1021 : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_lut_word_V_5_reg_1021_pp0_iter6_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_lut_word_V_5_reg_1021_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_lut_word_V_5_reg_1021_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal fine_word_V_reg_1027 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1192_fu_389_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln1192_reg_1032 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln1192_reg_1032_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln1192_reg_1032_pp0_iter7_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln1192_reg_1032_pp0_iter8_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1118_fu_396_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_874_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal ret_V_reg_1053 : STD_LOGIC_VECTOR (43 downto 0);
    signal ret_V_reg_1053_pp0_iter9_reg : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Result_s_14_reg_1060 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_14_reg_1060_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_14_reg_1060_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_14_reg_1060_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln718_fu_420_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln718_reg_1068 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Result_1_reg_1073 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_reg_1073_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_reg_1073_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_reg_1073_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_885_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_3_reg_1079 : STD_LOGIC_VECTOR (33 downto 0);
    signal trunc_ln1192_1_fu_430_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1192_1_reg_1084 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_1_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_1_reg_1089 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_459_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal ret_V_1_reg_1094 : STD_LOGIC_VECTOR (43 downto 0);
    signal ret_V_1_reg_1094_pp0_iter10_reg : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Result_3_reg_1100 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_reg_1100_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_reg_1100_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_reg_1100_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln713_fu_473_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln713_reg_1108 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln713_reg_1108_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln718_1_fu_478_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln718_1_reg_1113 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Result_4_reg_1118 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_reg_1118_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_reg_1118_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_reg_1118_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_fu_528_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_8_reg_1124 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_8_reg_1124_pp0_iter11_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_1130 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1130_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_reg_1136 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_reg_1136_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln790_2_fu_550_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln790_2_reg_1142 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_2_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_2_reg_1147 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln790_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln790_reg_1152 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_13_fu_602_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_13_reg_1157 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_13_reg_1157_pp0_iter12_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_reg_1163 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_1163_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_reg_1169 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_reg_1169_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln790_3_fu_624_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln790_3_reg_1175 : STD_LOGIC_VECTOR (14 downto 0);
    signal cos_dds_V_fu_735_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal cos_dds_V_reg_1180 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln790_1_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln790_1_reg_1185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln544_fu_166_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_1_fu_175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_2_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal underflow_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_1_fu_254_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal xor_ln879_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln879_1_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_1_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_fu_248_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln879_2_fu_274_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal and_ln879_2_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_3_fu_290_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln879_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln879_1_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln879_2_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_3_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_4_fu_302_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal xor_ln879_3_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_4_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln879_fu_260_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln879_5_fu_329_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_lut_word_V_1_fu_355_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln879_2_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_lut_word_V_2_fu_361_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_lut_word_V_3_fu_374_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_fu_402_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal lhs_V_1_fu_438_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal rhs_V_1_fu_449_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal sext_ln728_1_fu_445_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln1_fu_452_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_499_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_511_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_fu_524_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_fu_490_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_573_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_585_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_1_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_1_fu_598_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_12_fu_564_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln416_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln781_2_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_643_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln781_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_721_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_fu_728_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln416_1_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_3_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_1_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln781_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_1_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_1_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_1_fu_763_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_1_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_15_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln781_1_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp46_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_3_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_841_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_1_fu_848_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sin_dds_V_fu_855_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_874_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_885_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_874_ce : STD_LOGIC;
    signal grp_fu_885_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to12 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component resonator_dds_maceOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (42 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component resonator_dds_mulfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component phase_to_sincos_ccud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component phase_to_sincos_fdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    cos_lut_U : component phase_to_sincos_ccud
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cos_lut_address0,
        ce0 => cos_lut_ce0,
        q0 => cos_lut_q0,
        address1 => cos_lut_address1,
        ce1 => cos_lut_ce1,
        q1 => cos_lut_q1);

    fine_lut_U : component phase_to_sincos_fdEe
    generic map (
        DataWidth => 16,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fine_lut_address0,
        ce0 => fine_lut_ce0,
        q0 => fine_lut_q0);

    resonator_dds_maceOg_U41 : component resonator_dds_maceOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        din2_WIDTH => 43,
        dout_WIDTH => 44)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_874_p0,
        din1 => sin_lut_word_V_5_reg_1021,
        din2 => lhs_V_fu_402_p3,
        ce => grp_fu_874_ce,
        dout => grp_fu_874_p3);

    resonator_dds_mulfYi_U42 : component resonator_dds_mulfYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_885_p0,
        din1 => p_Val2_s_reg_1015,
        ce => grp_fu_885_ce,
        dout => grp_fu_885_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln713_reg_1108 <= add_ln713_fu_473_p2;
                add_ln713_reg_1108_pp0_iter10_reg <= add_ln713_reg_1108;
                cos_dds_V_reg_1180 <= cos_dds_V_fu_735_p3;
                cos_lut_word_V_reg_1003 <= cos_lut_word_V_fu_237_p3;
                fine_word_V_reg_1027 <= fine_lut_q0;
                icmp_ln790_1_reg_1185 <= icmp_ln790_1_fu_743_p2;
                icmp_ln790_reg_1152 <= icmp_ln790_fu_559_p2;
                icmp_ln879_1_reg_920_pp0_iter2_reg <= icmp_ln879_1_reg_920;
                icmp_ln879_1_reg_920_pp0_iter3_reg <= icmp_ln879_1_reg_920_pp0_iter2_reg;
                icmp_ln879_1_reg_920_pp0_iter4_reg <= icmp_ln879_1_reg_920_pp0_iter3_reg;
                icmp_ln879_2_reg_985 <= icmp_ln879_2_fu_210_p2;
                icmp_ln879_3_reg_991 <= icmp_ln879_3_fu_215_p2;
                icmp_ln879_reg_977 <= icmp_ln879_fu_205_p2;
                msb_V_reg_897_pp0_iter2_reg <= msb_V_reg_897_pp0_iter1_reg;
                msb_V_reg_897_pp0_iter3_reg <= msb_V_reg_897_pp0_iter2_reg;
                p_Result_1_reg_1073 <= grp_fu_874_p3(42 downto 42);
                p_Result_1_reg_1073_pp0_iter10_reg <= p_Result_1_reg_1073_pp0_iter9_reg;
                p_Result_1_reg_1073_pp0_iter11_reg <= p_Result_1_reg_1073_pp0_iter10_reg;
                p_Result_1_reg_1073_pp0_iter9_reg <= p_Result_1_reg_1073;
                p_Result_2_reg_1136 <= p_Val2_8_fu_528_p2(15 downto 15);
                p_Result_2_reg_1136_pp0_iter11_reg <= p_Result_2_reg_1136;
                p_Result_3_reg_1100 <= ret_V_1_fu_459_p2(43 downto 43);
                p_Result_3_reg_1100_pp0_iter10_reg <= p_Result_3_reg_1100;
                p_Result_3_reg_1100_pp0_iter11_reg <= p_Result_3_reg_1100_pp0_iter10_reg;
                p_Result_3_reg_1100_pp0_iter12_reg <= p_Result_3_reg_1100_pp0_iter11_reg;
                p_Result_4_reg_1118 <= ret_V_1_fu_459_p2(42 downto 42);
                p_Result_4_reg_1118_pp0_iter10_reg <= p_Result_4_reg_1118;
                p_Result_4_reg_1118_pp0_iter11_reg <= p_Result_4_reg_1118_pp0_iter10_reg;
                p_Result_4_reg_1118_pp0_iter12_reg <= p_Result_4_reg_1118_pp0_iter11_reg;
                p_Result_5_reg_1169 <= p_Val2_13_fu_602_p2(15 downto 15);
                p_Result_5_reg_1169_pp0_iter12_reg <= p_Result_5_reg_1169;
                p_Result_s_14_reg_1060 <= grp_fu_874_p3(43 downto 43);
                p_Result_s_14_reg_1060_pp0_iter10_reg <= p_Result_s_14_reg_1060_pp0_iter9_reg;
                p_Result_s_14_reg_1060_pp0_iter11_reg <= p_Result_s_14_reg_1060_pp0_iter10_reg;
                p_Result_s_14_reg_1060_pp0_iter9_reg <= p_Result_s_14_reg_1060;
                p_Result_s_reg_892_pp0_iter2_reg <= p_Result_s_reg_892_pp0_iter1_reg;
                p_Result_s_reg_892_pp0_iter3_reg <= p_Result_s_reg_892_pp0_iter2_reg;
                p_Val2_13_reg_1157 <= p_Val2_13_fu_602_p2;
                p_Val2_13_reg_1157_pp0_iter12_reg <= p_Val2_13_reg_1157;
                p_Val2_8_reg_1124 <= p_Val2_8_fu_528_p2;
                p_Val2_8_reg_1124_pp0_iter11_reg <= p_Val2_8_reg_1124;
                p_Val2_s_reg_1015 <= p_Val2_s_fu_347_p3;
                p_Val2_s_reg_1015_pp0_iter6_reg <= p_Val2_s_reg_1015;
                p_Val2_s_reg_1015_pp0_iter7_reg <= p_Val2_s_reg_1015_pp0_iter6_reg;
                r_1_reg_1089 <= r_1_fu_433_p2;
                r_2_reg_1147 <= r_2_fu_554_p2;
                r_V_1_reg_967 <= r_V_1_fu_195_p2;
                r_V_3_reg_1079 <= grp_fu_885_p2;
                r_V_reg_957 <= r_V_fu_185_p2;
                ret_V_1_reg_1094 <= ret_V_1_fu_459_p2;
                ret_V_1_reg_1094_pp0_iter10_reg <= ret_V_1_reg_1094;
                ret_V_reg_1053_pp0_iter9_reg <= ret_V_reg_1053;
                select_ln340_reg_997 <= select_ln340_fu_225_p3;
                sin_lut_word_V_5_reg_1021 <= sin_lut_word_V_5_fu_382_p3;
                sin_lut_word_V_5_reg_1021_pp0_iter6_reg <= sin_lut_word_V_5_reg_1021;
                sin_lut_word_V_5_reg_1021_pp0_iter7_reg <= sin_lut_word_V_5_reg_1021_pp0_iter6_reg;
                sin_lut_word_V_5_reg_1021_pp0_iter8_reg <= sin_lut_word_V_5_reg_1021_pp0_iter7_reg;
                sin_lut_word_V_reg_939_pp0_iter3_reg <= sin_lut_word_V_reg_939;
                sin_lut_word_V_reg_939_pp0_iter4_reg <= sin_lut_word_V_reg_939_pp0_iter3_reg;
                tmp_11_reg_1163 <= p_Val2_13_fu_602_p2(15 downto 15);
                tmp_11_reg_1163_pp0_iter12_reg <= tmp_11_reg_1163;
                tmp_5_reg_1130 <= p_Val2_8_fu_528_p2(15 downto 15);
                tmp_5_reg_1130_pp0_iter11_reg <= tmp_5_reg_1130;
                trunc_ln1192_1_reg_1084 <= trunc_ln1192_1_fu_430_p1;
                trunc_ln1192_reg_1032 <= trunc_ln1192_fu_389_p1;
                trunc_ln1192_reg_1032_pp0_iter6_reg <= trunc_ln1192_reg_1032;
                trunc_ln1192_reg_1032_pp0_iter7_reg <= trunc_ln1192_reg_1032_pp0_iter6_reg;
                trunc_ln1192_reg_1032_pp0_iter8_reg <= trunc_ln1192_reg_1032_pp0_iter7_reg;
                trunc_ln718_1_reg_1113 <= trunc_ln718_1_fu_478_p1;
                trunc_ln718_reg_1068 <= trunc_ln718_fu_420_p1;
                trunc_ln790_1_reg_972 <= trunc_ln790_1_fu_201_p1;
                trunc_ln790_2_reg_1142 <= trunc_ln790_2_fu_550_p1;
                trunc_ln790_3_reg_1175 <= trunc_ln790_3_fu_624_p1;
                trunc_ln790_reg_962 <= trunc_ln790_fu_191_p1;
                    zext_ln203_1_reg_952(16 downto 0) <= zext_ln203_1_fu_182_p1(16 downto 0);
                    zext_ln203_1_reg_952_pp0_iter4_reg(16 downto 0) <= zext_ln203_1_reg_952(16 downto 0);
                    zext_ln203_reg_945(16 downto 0) <= zext_ln203_fu_179_p1(16 downto 0);
                    zext_ln203_reg_945_pp0_iter4_reg(16 downto 0) <= zext_ln203_reg_945(16 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                cos_lut_word_V_3_reg_934 <= cos_lut_q0;
                sin_lut_word_V_reg_939 <= cos_lut_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln879_1_reg_920 <= icmp_ln879_1_fu_170_p2;
                lsb_V_reg_904 <= acc_V(19 downto 10);
                msb_V_reg_897 <= acc_V(21 downto 20);
                msb_V_reg_897_pp0_iter1_reg <= msb_V_reg_897;
                p_Result_s_reg_892 <= acc_V(9 downto 1);
                p_Result_s_reg_892_pp0_iter1_reg <= p_Result_s_reg_892;
                sin_adr_V_reg_910 <= sin_adr_V_fu_160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then
                ret_V_reg_1053 <= grp_fu_874_p3;
            end if;
        end if;
    end process;
    zext_ln203_reg_945(17) <= '0';
    zext_ln203_reg_945_pp0_iter4_reg(17) <= '0';
    zext_ln203_1_reg_952(17) <= '0';
    zext_ln203_1_reg_952_pp0_iter4_reg(17) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln713_fu_473_p2 <= std_logic_vector(unsigned(trunc_ln1_fu_452_p3) + unsigned(trunc_ln1192_1_reg_1084));
    and_ln415_1_fu_592_p2 <= (tmp_10_fu_585_p3 and r_fu_580_p2);
    and_ln415_fu_518_p2 <= (tmp_4_fu_511_p3 and or_ln412_fu_506_p2);
    and_ln786_1_fu_796_p2 <= (p_Result_5_reg_1169_pp0_iter12_reg and deleted_ones_1_fu_763_p3);
    and_ln786_fu_676_p2 <= (p_Result_2_reg_1136_pp0_iter11_reg and deleted_ones_fu_643_p3);
    and_ln879_1_fu_285_p2 <= (xor_ln879_1_fu_280_p2 and icmp_ln879_2_reg_985);
    and_ln879_2_fu_298_p2 <= (icmp_ln879_reg_977 and icmp_ln879_1_reg_920_pp0_iter4_reg);
    and_ln879_3_fu_324_p2 <= (xor_ln879_2_fu_318_p2 and icmp_ln879_1_reg_920_pp0_iter4_reg);
    and_ln879_4_fu_342_p2 <= (xor_ln879_3_fu_336_p2 and icmp_ln879_3_reg_991);
    and_ln879_fu_269_p2 <= (xor_ln879_fu_264_p2 and icmp_ln879_reg_977);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to12_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to12 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to12)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to12 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= cos_dds_V_reg_1180;
    ap_return_1 <= sin_dds_V_fu_855_p3;
    carry_1_fu_633_p2 <= (xor_ln416_fu_628_p2 and p_Result_1_reg_1073_pp0_iter11_reg);
    carry_3_fu_753_p2 <= (xor_ln416_1_fu_748_p2 and p_Result_4_reg_1118_pp0_iter12_reg);
    cos_dds_V_fu_735_p3 <= 
        select_ln340_2_fu_721_p3 when (or_ln340_1_fu_715_p2(0) = '1') else 
        select_ln388_fu_728_p3;
    cos_lut_address0 <= zext_ln544_fu_166_p1(10 - 1 downto 0);
    cos_lut_address1 <= zext_ln544_1_fu_175_p1(10 - 1 downto 0);

    cos_lut_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cos_lut_ce0 <= ap_const_logic_1;
        else 
            cos_lut_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cos_lut_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cos_lut_ce1 <= ap_const_logic_1;
        else 
            cos_lut_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    cos_lut_word_V_fu_237_p3 <= 
        ap_const_lv18_20001 when (underflow_1_fu_232_p2(0) = '1') else 
        r_V_1_reg_967;
    deleted_ones_1_fu_763_p3 <= 
        xor_ln779_1_fu_758_p2 when (carry_3_fu_753_p2(0) = '1') else 
        p_Result_3_reg_1100_pp0_iter12_reg;
    deleted_ones_fu_643_p3 <= 
        xor_ln779_fu_638_p2 when (carry_1_fu_633_p2(0) = '1') else 
        p_Result_s_14_reg_1060_pp0_iter11_reg;
    empty_15_fu_807_p2 <= (xor_ln786_1_fu_801_p2 or icmp_ln790_1_reg_1185);
    empty_fu_687_p2 <= (xor_ln786_fu_681_p2 or icmp_ln790_reg_1152);
    fine_lut_address0 <= zext_ln544_2_fu_244_p1(9 - 1 downto 0);

    fine_lut_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            fine_lut_ce0 <= ap_const_logic_1;
        else 
            fine_lut_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_874_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_874_ce <= ap_const_logic_1;
        else 
            grp_fu_874_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_874_p0 <= zext_ln1118_fu_396_p1(16 - 1 downto 0);

    grp_fu_885_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_885_ce <= ap_const_logic_1;
        else 
            grp_fu_885_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_885_p0 <= zext_ln1118_fu_396_p1(16 - 1 downto 0);
    icmp_ln790_1_fu_743_p2 <= "1" when (trunc_ln790_3_reg_1175 = ap_const_lv15_0) else "0";
    icmp_ln790_fu_559_p2 <= "1" when (trunc_ln790_2_reg_1142 = ap_const_lv15_0) else "0";
    icmp_ln879_1_fu_170_p2 <= "1" when (lsb_V_reg_904 = ap_const_lv10_0) else "0";
    icmp_ln879_2_fu_210_p2 <= "1" when (msb_V_reg_897_pp0_iter3_reg = ap_const_lv2_1) else "0";
    icmp_ln879_3_fu_215_p2 <= "1" when (msb_V_reg_897_pp0_iter3_reg = ap_const_lv2_3) else "0";
    icmp_ln879_fu_205_p2 <= "1" when (msb_V_reg_897_pp0_iter3_reg = ap_const_lv2_0) else "0";
    lhs_V_1_fu_438_p3 <= (sin_lut_word_V_5_reg_1021_pp0_iter8_reg & ap_const_lv25_0);
    lhs_V_fu_402_p3 <= (p_Val2_s_reg_1015_pp0_iter7_reg & ap_const_lv25_0);
    lsb_V_fu_150_p4 <= acc_V(19 downto 10);
    or_ln340_1_fu_715_p2 <= (xor_ln340_fu_709_p2 or overflow_fu_670_p2);
    or_ln340_2_fu_823_p2 <= (underflow_3_fu_818_p2 or overflow_1_fu_790_p2);
    or_ln340_3_fu_835_p2 <= (xor_ln340_1_fu_829_p2 or overflow_1_fu_790_p2);
    or_ln340_fu_703_p2 <= (underflow_2_fu_698_p2 or overflow_fu_670_p2);
    or_ln412_fu_506_p2 <= (tmp_2_fu_499_p3 or r_1_reg_1089);
    or_ln781_1_fu_775_p2 <= (xor_ln781_fu_770_p2 or tmp_11_reg_1163_pp0_iter12_reg);
    or_ln781_fu_655_p2 <= (xor_ln781_2_fu_650_p2 or tmp_5_reg_1130_pp0_iter11_reg);
    or_ln785_1_fu_785_p2 <= (xor_ln785_1_fu_780_p2 or p_Result_5_reg_1169_pp0_iter12_reg);
    or_ln785_fu_665_p2 <= (xor_ln785_fu_660_p2 or p_Result_2_reg_1136_pp0_iter11_reg);
    or_ln879_1_fu_313_p2 <= (or_ln879_fu_309_p2 or icmp_ln879_3_reg_991);
    or_ln879_2_fu_368_p2 <= (and_ln879_3_fu_324_p2 or and_ln879_2_fu_298_p2);
    or_ln879_fu_309_p2 <= (icmp_ln879_reg_977 or icmp_ln879_2_reg_985);
    overflow_1_fu_790_p2 <= (xor_ln779_1_fu_758_p2 and or_ln785_1_fu_785_p2);
    overflow_fu_670_p2 <= (xor_ln779_fu_638_p2 and or_ln785_fu_665_p2);
    p_Val2_12_fu_564_p4 <= ret_V_1_reg_1094_pp0_iter10_reg(42 downto 27);
    p_Val2_13_fu_602_p2 <= std_logic_vector(unsigned(zext_ln415_1_fu_598_p1) + unsigned(p_Val2_12_fu_564_p4));
    p_Val2_6_fu_490_p4 <= ret_V_reg_1053_pp0_iter9_reg(42 downto 27);
    p_Val2_8_fu_528_p2 <= std_logic_vector(unsigned(zext_ln415_fu_524_p1) + unsigned(p_Val2_6_fu_490_p4));
    p_Val2_s_fu_347_p3 <= 
        zext_ln879_fu_260_p1 when (and_ln879_4_fu_342_p2(0) = '1') else 
        select_ln879_5_fu_329_p3;
    r_1_fu_433_p2 <= "0" when (trunc_ln718_reg_1068 = ap_const_lv26_0) else "1";
    r_2_fu_554_p2 <= "0" when (trunc_ln718_1_reg_1113 = ap_const_lv26_0) else "1";
    r_V_1_fu_195_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(zext_ln203_fu_179_p1));
    r_V_fu_185_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(zext_ln203_1_fu_182_p1));
    r_fu_580_p2 <= (tmp_8_fu_573_p3 or r_2_reg_1147);
    ret_V_1_fu_459_p2 <= std_logic_vector(signed(rhs_V_1_fu_449_p1) + signed(sext_ln728_1_fu_445_p1));
        rhs_V_1_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_3_reg_1079),44));

    select_ln340_2_fu_721_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_fu_703_p2(0) = '1') else 
        p_Val2_8_reg_1124_pp0_iter11_reg;
    select_ln340_4_fu_841_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_2_fu_823_p2(0) = '1') else 
        p_Val2_13_reg_1157_pp0_iter12_reg;
    select_ln340_fu_225_p3 <= 
        ap_const_lv18_20001 when (underflow_fu_220_p2(0) = '1') else 
        r_V_reg_957;
    select_ln388_1_fu_848_p3 <= 
        ap_const_lv16_8001 when (underflow_3_fu_818_p2(0) = '1') else 
        p_Val2_13_reg_1157_pp0_iter12_reg;
    select_ln388_fu_728_p3 <= 
        ap_const_lv16_8001 when (underflow_2_fu_698_p2(0) = '1') else 
        p_Val2_8_reg_1124_pp0_iter11_reg;
    select_ln879_1_fu_254_p3 <= 
        ap_const_lv17_0 when (icmp_ln879_1_reg_920_pp0_iter4_reg(0) = '1') else 
        sin_lut_word_V_reg_939_pp0_iter4_reg;
    select_ln879_2_fu_274_p3 <= 
        zext_ln203_reg_945_pp0_iter4_reg when (and_ln879_fu_269_p2(0) = '1') else 
        cos_lut_word_V_reg_1003;
    select_ln879_3_fu_290_p3 <= 
        select_ln879_fu_248_p3 when (and_ln879_1_fu_285_p2(0) = '1') else 
        select_ln879_2_fu_274_p3;
    select_ln879_4_fu_302_p3 <= 
        zext_ln203_reg_945_pp0_iter4_reg when (and_ln879_2_fu_298_p2(0) = '1') else 
        select_ln879_3_fu_290_p3;
    select_ln879_5_fu_329_p3 <= 
        cos_lut_word_V_reg_1003 when (and_ln879_3_fu_324_p2(0) = '1') else 
        select_ln879_4_fu_302_p3;
    select_ln879_fu_248_p3 <= 
        ap_const_lv18_0 when (icmp_ln879_1_reg_920_pp0_iter4_reg(0) = '1') else 
        select_ln340_reg_997;
        sext_ln728_1_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_1_fu_438_p3),44));

    sin_adr_V_fu_160_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(lsb_V_fu_150_p4));
    sin_dds_V_fu_855_p3 <= 
        select_ln340_4_fu_841_p3 when (or_ln340_3_fu_835_p2(0) = '1') else 
        select_ln388_1_fu_848_p3;
    sin_lut_word_V_1_fu_355_p3 <= 
        zext_ln203_1_reg_952_pp0_iter4_reg when (and_ln879_fu_269_p2(0) = '1') else 
        select_ln340_reg_997;
    sin_lut_word_V_2_fu_361_p3 <= 
        zext_ln203_reg_945_pp0_iter4_reg when (and_ln879_1_fu_285_p2(0) = '1') else 
        sin_lut_word_V_1_fu_355_p3;
    sin_lut_word_V_3_fu_374_p3 <= 
        ap_const_lv18_0 when (or_ln879_2_fu_368_p2(0) = '1') else 
        sin_lut_word_V_2_fu_361_p3;
    sin_lut_word_V_5_fu_382_p3 <= 
        cos_lut_word_V_reg_1003 when (and_ln879_4_fu_342_p2(0) = '1') else 
        sin_lut_word_V_3_fu_374_p3;
    tmp46_fu_812_p2 <= (or_ln781_1_fu_775_p2 and empty_15_fu_807_p2);
    tmp_10_fu_585_p3 <= add_ln713_reg_1108_pp0_iter10_reg(26 downto 26);
    tmp_2_fu_499_p3 <= ret_V_reg_1053_pp0_iter9_reg(27 downto 27);
    tmp_4_fu_511_p3 <= ret_V_reg_1053_pp0_iter9_reg(26 downto 26);
    tmp_8_fu_573_p3 <= ret_V_1_reg_1094_pp0_iter10_reg(27 downto 27);
    tmp_fu_692_p2 <= (or_ln781_fu_655_p2 and empty_fu_687_p2);
    trunc_ln1192_1_fu_430_p1 <= grp_fu_885_p2(32 - 1 downto 0);
    trunc_ln1192_fu_389_p1 <= sin_lut_word_V_5_fu_382_p3(7 - 1 downto 0);
    trunc_ln1_fu_452_p3 <= (trunc_ln1192_reg_1032_pp0_iter8_reg & ap_const_lv25_0);
    trunc_ln718_1_fu_478_p1 <= ret_V_1_fu_459_p2(26 - 1 downto 0);
    trunc_ln718_fu_420_p1 <= grp_fu_874_p3(26 - 1 downto 0);
    trunc_ln790_1_fu_201_p1 <= r_V_1_fu_195_p2(17 - 1 downto 0);
    trunc_ln790_2_fu_550_p1 <= p_Val2_8_fu_528_p2(15 - 1 downto 0);
    trunc_ln790_3_fu_624_p1 <= p_Val2_13_fu_602_p2(15 - 1 downto 0);
    trunc_ln790_fu_191_p1 <= r_V_fu_185_p2(17 - 1 downto 0);
    underflow_1_fu_232_p2 <= "1" when (trunc_ln790_1_reg_972 = ap_const_lv17_0) else "0";
    underflow_2_fu_698_p2 <= (tmp_fu_692_p2 and p_Result_s_14_reg_1060_pp0_iter11_reg);
    underflow_3_fu_818_p2 <= (tmp46_fu_812_p2 and p_Result_3_reg_1100_pp0_iter12_reg);
    underflow_fu_220_p2 <= "1" when (trunc_ln790_reg_962 = ap_const_lv17_0) else "0";
    xor_ln340_1_fu_829_p2 <= (underflow_3_fu_818_p2 xor ap_const_lv1_1);
    xor_ln340_fu_709_p2 <= (underflow_2_fu_698_p2 xor ap_const_lv1_1);
    xor_ln416_1_fu_748_p2 <= (tmp_11_reg_1163_pp0_iter12_reg xor ap_const_lv1_1);
    xor_ln416_fu_628_p2 <= (tmp_5_reg_1130_pp0_iter11_reg xor ap_const_lv1_1);
    xor_ln779_1_fu_758_p2 <= (p_Result_3_reg_1100_pp0_iter12_reg xor ap_const_lv1_1);
    xor_ln779_fu_638_p2 <= (p_Result_s_14_reg_1060_pp0_iter11_reg xor ap_const_lv1_1);
    xor_ln781_2_fu_650_p2 <= (p_Result_1_reg_1073_pp0_iter11_reg xor ap_const_lv1_1);
    xor_ln781_fu_770_p2 <= (p_Result_4_reg_1118_pp0_iter12_reg xor ap_const_lv1_1);
    xor_ln785_1_fu_780_p2 <= (p_Result_3_reg_1100_pp0_iter12_reg xor carry_3_fu_753_p2);
    xor_ln785_fu_660_p2 <= (p_Result_s_14_reg_1060_pp0_iter11_reg xor carry_1_fu_633_p2);
    xor_ln786_1_fu_801_p2 <= (ap_const_lv1_1 xor and_ln786_1_fu_796_p2);
    xor_ln786_fu_681_p2 <= (ap_const_lv1_1 xor and_ln786_fu_676_p2);
    xor_ln879_1_fu_280_p2 <= (icmp_ln879_reg_977 xor ap_const_lv1_1);
    xor_ln879_2_fu_318_p2 <= (or_ln879_1_fu_313_p2 xor ap_const_lv1_1);
    xor_ln879_3_fu_336_p2 <= (or_ln879_fu_309_p2 xor ap_const_lv1_1);
    xor_ln879_fu_264_p2 <= (icmp_ln879_1_reg_920_pp0_iter4_reg xor ap_const_lv1_1);
    zext_ln1118_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fine_word_V_reg_1027),34));
    zext_ln203_1_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sin_lut_word_V_reg_939),18));
    zext_ln203_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cos_lut_word_V_3_reg_934),18));
    zext_ln415_1_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_1_fu_592_p2),16));
    zext_ln415_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_fu_518_p2),16));
    zext_ln544_1_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sin_adr_V_reg_910),64));
    zext_ln544_2_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_reg_892_pp0_iter3_reg),64));
    zext_ln544_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lsb_V_reg_904),64));
    zext_ln879_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln879_1_fu_254_p3),18));
end behav;
