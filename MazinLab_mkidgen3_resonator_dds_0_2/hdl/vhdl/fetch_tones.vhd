-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fetch_tones is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    res_in_TVALID : IN STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    res_in_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    res_in_TREADY : OUT STD_LOGIC;
    res_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    toneinc_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    toneinc_V_ce0 : OUT STD_LOGIC;
    toneinc_V_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    phase0_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    phase0_V_ce0 : OUT STD_LOGIC;
    phase0_V_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    group_V : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_25 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_26 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_27 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_28 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_29 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_30 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_31 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_32 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_in_TDATA_blk_n : OUT STD_LOGIC );
end;


architecture behav of fetch_tones is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal input_last_V_tmp_reg_641 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln203_fu_152_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln203_reg_646 : STD_LOGIC_VECTOR (15 downto 0);
    signal resdat_data_iq_q_V_reg_651 : STD_LOGIC_VECTOR (15 downto 0);
    signal resdat_data_iq_i_V_1_reg_656 : STD_LOGIC_VECTOR (15 downto 0);
    signal resdat_data_iq_q_V_1_reg_661 : STD_LOGIC_VECTOR (15 downto 0);
    signal resdat_data_iq_i_V_2_reg_666 : STD_LOGIC_VECTOR (15 downto 0);
    signal resdat_data_iq_q_V_2_reg_671 : STD_LOGIC_VECTOR (15 downto 0);
    signal resdat_data_iq_i_V_3_reg_676 : STD_LOGIC_VECTOR (15 downto 0);
    signal resdat_data_iq_q_V_3_reg_681 : STD_LOGIC_VECTOR (15 downto 0);
    signal resdat_data_iq_i_V_4_reg_686 : STD_LOGIC_VECTOR (15 downto 0);
    signal resdat_data_iq_q_V_4_reg_691 : STD_LOGIC_VECTOR (15 downto 0);
    signal resdat_data_iq_i_V_5_reg_696 : STD_LOGIC_VECTOR (15 downto 0);
    signal resdat_data_iq_q_V_5_reg_701 : STD_LOGIC_VECTOR (15 downto 0);
    signal resdat_data_iq_i_V_6_reg_706 : STD_LOGIC_VECTOR (15 downto 0);
    signal resdat_data_iq_q_V_6_reg_711 : STD_LOGIC_VECTOR (15 downto 0);
    signal resdat_data_iq_i_V_7_reg_716 : STD_LOGIC_VECTOR (15 downto 0);
    signal resdat_data_iq_q_V_7_reg_721 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln544_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln203_1_fu_312_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln356_fu_316_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                input_last_V_tmp_reg_641 <= res_in_TLAST;
                resdat_data_iq_i_V_1_reg_656 <= res_in_TDATA(31 downto 16);
                resdat_data_iq_i_V_2_reg_666 <= res_in_TDATA(47 downto 32);
                resdat_data_iq_i_V_3_reg_676 <= res_in_TDATA(63 downto 48);
                resdat_data_iq_i_V_4_reg_686 <= res_in_TDATA(79 downto 64);
                resdat_data_iq_i_V_5_reg_696 <= res_in_TDATA(95 downto 80);
                resdat_data_iq_i_V_6_reg_706 <= res_in_TDATA(111 downto 96);
                resdat_data_iq_i_V_7_reg_716 <= res_in_TDATA(127 downto 112);
                resdat_data_iq_q_V_1_reg_661 <= res_in_TDATA(159 downto 144);
                resdat_data_iq_q_V_2_reg_671 <= res_in_TDATA(175 downto 160);
                resdat_data_iq_q_V_3_reg_681 <= res_in_TDATA(191 downto 176);
                resdat_data_iq_q_V_4_reg_691 <= res_in_TDATA(207 downto 192);
                resdat_data_iq_q_V_5_reg_701 <= res_in_TDATA(223 downto 208);
                resdat_data_iq_q_V_6_reg_711 <= res_in_TDATA(239 downto 224);
                resdat_data_iq_q_V_7_reg_721 <= res_in_TDATA(255 downto 240);
                resdat_data_iq_q_V_reg_651 <= res_in_TDATA(143 downto 128);
                trunc_ln203_reg_646 <= trunc_ln203_fu_152_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, res_in_TVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (res_in_TVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, res_in_TVALID, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (res_in_TVALID = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, res_in_TVALID)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (res_in_TVALID = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= input_last_V_tmp_reg_641;
    ap_return_1 <= trunc_ln203_1_fu_312_p1;
    ap_return_10 <= phase0_V_q0(31 downto 16);
    ap_return_11 <= phase0_V_q0(47 downto 32);
    ap_return_12 <= phase0_V_q0(63 downto 48);
    ap_return_13 <= phase0_V_q0(79 downto 64);
    ap_return_14 <= phase0_V_q0(95 downto 80);
    ap_return_15 <= phase0_V_q0(111 downto 96);
    ap_return_16 <= phase0_V_q0(127 downto 112);
    ap_return_17 <= trunc_ln203_reg_646;
    ap_return_18 <= resdat_data_iq_i_V_1_reg_656;
    ap_return_19 <= resdat_data_iq_i_V_2_reg_666;
    ap_return_2 <= toneinc_V_q0(31 downto 16);
    ap_return_20 <= resdat_data_iq_i_V_3_reg_676;
    ap_return_21 <= resdat_data_iq_i_V_4_reg_686;
    ap_return_22 <= resdat_data_iq_i_V_5_reg_696;
    ap_return_23 <= resdat_data_iq_i_V_6_reg_706;
    ap_return_24 <= resdat_data_iq_i_V_7_reg_716;
    ap_return_25 <= resdat_data_iq_q_V_reg_651;
    ap_return_26 <= resdat_data_iq_q_V_1_reg_661;
    ap_return_27 <= resdat_data_iq_q_V_2_reg_671;
    ap_return_28 <= resdat_data_iq_q_V_3_reg_681;
    ap_return_29 <= resdat_data_iq_q_V_4_reg_691;
    ap_return_3 <= toneinc_V_q0(47 downto 32);
    ap_return_30 <= resdat_data_iq_q_V_5_reg_701;
    ap_return_31 <= resdat_data_iq_q_V_6_reg_711;
    ap_return_32 <= resdat_data_iq_q_V_7_reg_721;
    ap_return_4 <= toneinc_V_q0(63 downto 48);
    ap_return_5 <= toneinc_V_q0(79 downto 64);
    ap_return_6 <= toneinc_V_q0(95 downto 80);
    ap_return_7 <= toneinc_V_q0(111 downto 96);
    ap_return_8 <= toneinc_V_q0(127 downto 112);
    ap_return_9 <= trunc_ln356_fu_316_p1;
    phase0_V_address0 <= zext_ln544_fu_306_p1(8 - 1 downto 0);

    phase0_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            phase0_V_ce0 <= ap_const_logic_1;
        else 
            phase0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    res_in_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, res_in_TVALID)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_in_TDATA_blk_n <= res_in_TVALID;
        else 
            res_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    res_in_TREADY_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_in_TREADY <= ap_const_logic_1;
        else 
            res_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    toneinc_V_address0 <= zext_ln544_fu_306_p1(8 - 1 downto 0);

    toneinc_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            toneinc_V_ce0 <= ap_const_logic_1;
        else 
            toneinc_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln203_1_fu_312_p1 <= toneinc_V_q0(16 - 1 downto 0);
    trunc_ln203_fu_152_p1 <= res_in_TDATA(16 - 1 downto 0);
    trunc_ln356_fu_316_p1 <= phase0_V_q0(16 - 1 downto 0);
    zext_ln544_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(group_V),64));
end behav;
