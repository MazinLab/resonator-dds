-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity increment_phases is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    group_V : IN STD_LOGIC_VECTOR (7 downto 0);
    tones_0_inc_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    tones_1_inc_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    tones_2_inc_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    tones_3_inc_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    tones_4_inc_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    tones_5_inc_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    tones_6_inc_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    tones_7_inc_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    tones_0_phase_V_rea : IN STD_LOGIC_VECTOR (15 downto 0);
    tones_1_phase_V_rea : IN STD_LOGIC_VECTOR (15 downto 0);
    tones_2_phase_V_rea : IN STD_LOGIC_VECTOR (15 downto 0);
    tones_3_phase_V_rea : IN STD_LOGIC_VECTOR (15 downto 0);
    tones_4_phase_V_rea : IN STD_LOGIC_VECTOR (15 downto 0);
    tones_5_phase_V_rea : IN STD_LOGIC_VECTOR (15 downto 0);
    tones_6_phase_V_rea : IN STD_LOGIC_VECTOR (15 downto 0);
    tones_7_phase_V_rea : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (21 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (21 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (21 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (21 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (21 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (21 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (21 downto 0) );
end;


architecture behav of increment_phases is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_16 : STD_LOGIC_VECTOR (8 downto 0) := "000010110";
    constant ap_const_lv9_2B : STD_LOGIC_VECTOR (8 downto 0) := "000101011";
    constant ap_const_lv9_2C : STD_LOGIC_VECTOR (8 downto 0) := "000101100";
    constant ap_const_lv9_41 : STD_LOGIC_VECTOR (8 downto 0) := "001000001";
    constant ap_const_lv9_42 : STD_LOGIC_VECTOR (8 downto 0) := "001000010";
    constant ap_const_lv9_57 : STD_LOGIC_VECTOR (8 downto 0) := "001010111";
    constant ap_const_lv9_58 : STD_LOGIC_VECTOR (8 downto 0) := "001011000";
    constant ap_const_lv9_6D : STD_LOGIC_VECTOR (8 downto 0) := "001101101";
    constant ap_const_lv9_6E : STD_LOGIC_VECTOR (8 downto 0) := "001101110";
    constant ap_const_lv9_83 : STD_LOGIC_VECTOR (8 downto 0) := "010000011";
    constant ap_const_lv9_84 : STD_LOGIC_VECTOR (8 downto 0) := "010000100";
    constant ap_const_lv9_99 : STD_LOGIC_VECTOR (8 downto 0) := "010011001";
    constant ap_const_lv9_9A : STD_LOGIC_VECTOR (8 downto 0) := "010011010";
    constant ap_const_lv9_AF : STD_LOGIC_VECTOR (8 downto 0) := "010101111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal temp_phases_V : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal phase_cache_phases_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal phase_cache_phases_V_ce0 : STD_LOGIC;
    signal phase_cache_phases_V_q0 : STD_LOGIC_VECTOR (175 downto 0);
    signal phase_cache_phases_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal phase_cache_phases_V_ce1 : STD_LOGIC;
    signal phase_cache_phases_V_we1 : STD_LOGIC;
    signal tones_7_phase_V_rea_1_reg_582 : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_7_phase_V_rea_1_reg_582_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_7_phase_V_rea_1_reg_582_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_6_phase_V_rea_1_reg_587 : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_6_phase_V_rea_1_reg_587_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_6_phase_V_rea_1_reg_587_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_5_phase_V_rea_1_reg_592 : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_5_phase_V_rea_1_reg_592_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_5_phase_V_rea_1_reg_592_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_4_phase_V_rea_1_reg_597 : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_4_phase_V_rea_1_reg_597_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_4_phase_V_rea_1_reg_597_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_3_phase_V_rea_1_reg_602 : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_3_phase_V_rea_1_reg_602_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_3_phase_V_rea_1_reg_602_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_2_phase_V_rea_1_reg_607 : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_2_phase_V_rea_1_reg_607_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_2_phase_V_rea_1_reg_607_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_1_phase_V_rea_1_reg_612 : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_1_phase_V_rea_1_reg_612_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_1_phase_V_rea_1_reg_612_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_0_phase_V_rea_1_reg_617 : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_0_phase_V_rea_1_reg_617_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_0_phase_V_rea_1_reg_617_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_7_inc_V_read_1_reg_622 : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_7_inc_V_read_1_reg_622_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_7_inc_V_read_1_reg_622_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_6_inc_V_read_1_reg_627 : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_6_inc_V_read_1_reg_627_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_6_inc_V_read_1_reg_627_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_5_inc_V_read_1_reg_632 : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_5_inc_V_read_1_reg_632_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_5_inc_V_read_1_reg_632_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_4_inc_V_read_1_reg_637 : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_4_inc_V_read_1_reg_637_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_4_inc_V_read_1_reg_637_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_3_inc_V_read_1_reg_642 : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_3_inc_V_read_1_reg_642_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_3_inc_V_read_1_reg_642_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_2_inc_V_read_1_reg_647 : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_2_inc_V_read_1_reg_647_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_2_inc_V_read_1_reg_647_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_1_inc_V_read_1_reg_652 : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_1_inc_V_read_1_reg_652_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_1_inc_V_read_1_reg_652_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_0_inc_V_read_1_reg_657 : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_0_inc_V_read_1_reg_657_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tones_0_inc_V_read_1_reg_657_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal group_V_read_reg_662 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_227_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_672 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1265_fu_242_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln1265_reg_677 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_2_reg_683 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_3_reg_689 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_4_reg_695 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_5_reg_701 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_6_reg_707 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_7_reg_713 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_8_reg_719 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln544_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_508_p9 : STD_LOGIC_VECTOR (175 downto 0);
    signal ap_sig_allocacmp_temp_phases_V_load : STD_LOGIC_VECTOR (175 downto 0);
    signal zext_ln215_fu_224_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_316_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_1_fu_328_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_2_fu_340_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_3_fu_352_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_4_fu_364_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_5_fu_376_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_6_fu_388_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_7_fu_400_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_8_fu_412_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_9_fu_424_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_s_fu_436_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_10_fu_448_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_11_fu_460_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_12_fu_472_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_13_fu_484_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_14_fu_496_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_15_fu_503_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_13_fu_479_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_11_fu_455_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_9_fu_431_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_7_fu_407_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_5_fu_383_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_3_fu_359_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_1_fu_335_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_fu_323_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_2_fu_347_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_4_fu_371_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_6_fu_395_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_8_fu_419_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_10_fu_443_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_12_fu_467_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_14_fu_491_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component increment_phases_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (175 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (175 downto 0) );
    end component;



begin
    phase_cache_phases_V_U : component increment_phases_bkb
    generic map (
        DataWidth => 176,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => phase_cache_phases_V_address0,
        ce0 => phase_cache_phases_V_ce0,
        q0 => phase_cache_phases_V_q0,
        address1 => phase_cache_phases_V_address1,
        ce1 => phase_cache_phases_V_ce1,
        we1 => phase_cache_phases_V_we1,
        d1 => ap_sig_allocacmp_temp_phases_V_load);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                group_V_read_reg_662 <= group_V;
                ret_V_reg_672 <= ret_V_fu_227_p2;
                tones_0_inc_V_read_1_reg_657 <= tones_0_inc_V_read;
                tones_0_inc_V_read_1_reg_657_pp0_iter1_reg <= tones_0_inc_V_read_1_reg_657;
                tones_0_phase_V_rea_1_reg_617 <= tones_0_phase_V_rea;
                tones_0_phase_V_rea_1_reg_617_pp0_iter1_reg <= tones_0_phase_V_rea_1_reg_617;
                tones_1_inc_V_read_1_reg_652 <= tones_1_inc_V_read;
                tones_1_inc_V_read_1_reg_652_pp0_iter1_reg <= tones_1_inc_V_read_1_reg_652;
                tones_1_phase_V_rea_1_reg_612 <= tones_1_phase_V_rea;
                tones_1_phase_V_rea_1_reg_612_pp0_iter1_reg <= tones_1_phase_V_rea_1_reg_612;
                tones_2_inc_V_read_1_reg_647 <= tones_2_inc_V_read;
                tones_2_inc_V_read_1_reg_647_pp0_iter1_reg <= tones_2_inc_V_read_1_reg_647;
                tones_2_phase_V_rea_1_reg_607 <= tones_2_phase_V_rea;
                tones_2_phase_V_rea_1_reg_607_pp0_iter1_reg <= tones_2_phase_V_rea_1_reg_607;
                tones_3_inc_V_read_1_reg_642 <= tones_3_inc_V_read;
                tones_3_inc_V_read_1_reg_642_pp0_iter1_reg <= tones_3_inc_V_read_1_reg_642;
                tones_3_phase_V_rea_1_reg_602 <= tones_3_phase_V_rea;
                tones_3_phase_V_rea_1_reg_602_pp0_iter1_reg <= tones_3_phase_V_rea_1_reg_602;
                tones_4_inc_V_read_1_reg_637 <= tones_4_inc_V_read;
                tones_4_inc_V_read_1_reg_637_pp0_iter1_reg <= tones_4_inc_V_read_1_reg_637;
                tones_4_phase_V_rea_1_reg_597 <= tones_4_phase_V_rea;
                tones_4_phase_V_rea_1_reg_597_pp0_iter1_reg <= tones_4_phase_V_rea_1_reg_597;
                tones_5_inc_V_read_1_reg_632 <= tones_5_inc_V_read;
                tones_5_inc_V_read_1_reg_632_pp0_iter1_reg <= tones_5_inc_V_read_1_reg_632;
                tones_5_phase_V_rea_1_reg_592 <= tones_5_phase_V_rea;
                tones_5_phase_V_rea_1_reg_592_pp0_iter1_reg <= tones_5_phase_V_rea_1_reg_592;
                tones_6_inc_V_read_1_reg_627 <= tones_6_inc_V_read;
                tones_6_inc_V_read_1_reg_627_pp0_iter1_reg <= tones_6_inc_V_read_1_reg_627;
                tones_6_phase_V_rea_1_reg_587 <= tones_6_phase_V_rea;
                tones_6_phase_V_rea_1_reg_587_pp0_iter1_reg <= tones_6_phase_V_rea_1_reg_587;
                tones_7_inc_V_read_1_reg_622 <= tones_7_inc_V_read;
                tones_7_inc_V_read_1_reg_622_pp0_iter1_reg <= tones_7_inc_V_read_1_reg_622;
                tones_7_phase_V_rea_1_reg_582 <= tones_7_phase_V_rea;
                tones_7_phase_V_rea_1_reg_582_pp0_iter1_reg <= tones_7_phase_V_rea_1_reg_582;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                temp_phases_V <= tmp_9_fu_508_p9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_2_reg_683 <= phase_cache_phases_V_q0(43 downto 22);
                tmp_3_reg_689 <= phase_cache_phases_V_q0(65 downto 44);
                tmp_4_reg_695 <= phase_cache_phases_V_q0(87 downto 66);
                tmp_5_reg_701 <= phase_cache_phases_V_q0(109 downto 88);
                tmp_6_reg_707 <= phase_cache_phases_V_q0(131 downto 110);
                tmp_7_reg_713 <= phase_cache_phases_V_q0(153 downto 132);
                tmp_8_reg_719 <= phase_cache_phases_V_q0(175 downto 154);
                tones_0_inc_V_read_1_reg_657_pp0_iter2_reg <= tones_0_inc_V_read_1_reg_657_pp0_iter1_reg;
                tones_0_phase_V_rea_1_reg_617_pp0_iter2_reg <= tones_0_phase_V_rea_1_reg_617_pp0_iter1_reg;
                tones_1_inc_V_read_1_reg_652_pp0_iter2_reg <= tones_1_inc_V_read_1_reg_652_pp0_iter1_reg;
                tones_1_phase_V_rea_1_reg_612_pp0_iter2_reg <= tones_1_phase_V_rea_1_reg_612_pp0_iter1_reg;
                tones_2_inc_V_read_1_reg_647_pp0_iter2_reg <= tones_2_inc_V_read_1_reg_647_pp0_iter1_reg;
                tones_2_phase_V_rea_1_reg_607_pp0_iter2_reg <= tones_2_phase_V_rea_1_reg_607_pp0_iter1_reg;
                tones_3_inc_V_read_1_reg_642_pp0_iter2_reg <= tones_3_inc_V_read_1_reg_642_pp0_iter1_reg;
                tones_3_phase_V_rea_1_reg_602_pp0_iter2_reg <= tones_3_phase_V_rea_1_reg_602_pp0_iter1_reg;
                tones_4_inc_V_read_1_reg_637_pp0_iter2_reg <= tones_4_inc_V_read_1_reg_637_pp0_iter1_reg;
                tones_4_phase_V_rea_1_reg_597_pp0_iter2_reg <= tones_4_phase_V_rea_1_reg_597_pp0_iter1_reg;
                tones_5_inc_V_read_1_reg_632_pp0_iter2_reg <= tones_5_inc_V_read_1_reg_632_pp0_iter1_reg;
                tones_5_phase_V_rea_1_reg_592_pp0_iter2_reg <= tones_5_phase_V_rea_1_reg_592_pp0_iter1_reg;
                tones_6_inc_V_read_1_reg_627_pp0_iter2_reg <= tones_6_inc_V_read_1_reg_627_pp0_iter1_reg;
                tones_6_phase_V_rea_1_reg_587_pp0_iter2_reg <= tones_6_phase_V_rea_1_reg_587_pp0_iter1_reg;
                tones_7_inc_V_read_1_reg_622_pp0_iter2_reg <= tones_7_inc_V_read_1_reg_622_pp0_iter1_reg;
                tones_7_phase_V_rea_1_reg_582_pp0_iter2_reg <= tones_7_phase_V_rea_1_reg_582_pp0_iter1_reg;
                trunc_ln1265_reg_677 <= trunc_ln1265_fu_242_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln703_10_fu_443_p2 <= std_logic_vector(unsigned(shl_ln703_s_fu_436_p3) + unsigned(tmp_6_reg_707));
    add_ln703_11_fu_455_p2 <= std_logic_vector(unsigned(shl_ln703_10_fu_448_p3) + unsigned(tmp_6_reg_707));
    add_ln703_12_fu_467_p2 <= std_logic_vector(unsigned(shl_ln703_11_fu_460_p3) + unsigned(tmp_7_reg_713));
    add_ln703_13_fu_479_p2 <= std_logic_vector(unsigned(shl_ln703_12_fu_472_p3) + unsigned(tmp_7_reg_713));
    add_ln703_14_fu_491_p2 <= std_logic_vector(unsigned(shl_ln703_13_fu_484_p3) + unsigned(tmp_8_reg_719));
    add_ln703_15_fu_503_p2 <= std_logic_vector(unsigned(shl_ln703_14_fu_496_p3) + unsigned(tmp_8_reg_719));
    add_ln703_1_fu_335_p2 <= std_logic_vector(unsigned(shl_ln703_1_fu_328_p3) + unsigned(trunc_ln1265_reg_677));
    add_ln703_2_fu_347_p2 <= std_logic_vector(unsigned(shl_ln703_2_fu_340_p3) + unsigned(tmp_2_reg_683));
    add_ln703_3_fu_359_p2 <= std_logic_vector(unsigned(shl_ln703_3_fu_352_p3) + unsigned(tmp_2_reg_683));
    add_ln703_4_fu_371_p2 <= std_logic_vector(unsigned(shl_ln703_4_fu_364_p3) + unsigned(tmp_3_reg_689));
    add_ln703_5_fu_383_p2 <= std_logic_vector(unsigned(shl_ln703_5_fu_376_p3) + unsigned(tmp_3_reg_689));
    add_ln703_6_fu_395_p2 <= std_logic_vector(unsigned(shl_ln703_6_fu_388_p3) + unsigned(tmp_4_reg_695));
    add_ln703_7_fu_407_p2 <= std_logic_vector(unsigned(shl_ln703_7_fu_400_p3) + unsigned(tmp_4_reg_695));
    add_ln703_8_fu_419_p2 <= std_logic_vector(unsigned(shl_ln703_8_fu_412_p3) + unsigned(tmp_5_reg_701));
    add_ln703_9_fu_431_p2 <= std_logic_vector(unsigned(shl_ln703_9_fu_424_p3) + unsigned(tmp_5_reg_701));
    add_ln703_fu_323_p2 <= std_logic_vector(unsigned(shl_ln_fu_316_p3) + unsigned(trunc_ln1265_reg_677));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= add_ln703_fu_323_p2;
    ap_return_1 <= add_ln703_2_fu_347_p2;
    ap_return_2 <= add_ln703_4_fu_371_p2;
    ap_return_3 <= add_ln703_6_fu_395_p2;
    ap_return_4 <= add_ln703_8_fu_419_p2;
    ap_return_5 <= add_ln703_10_fu_443_p2;
    ap_return_6 <= add_ln703_12_fu_467_p2;
    ap_return_7 <= add_ln703_14_fu_491_p2;

    ap_sig_allocacmp_temp_phases_V_load_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, temp_phases_V, tmp_9_fu_508_p9)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_sig_allocacmp_temp_phases_V_load <= tmp_9_fu_508_p9;
        else 
            ap_sig_allocacmp_temp_phases_V_load <= temp_phases_V;
        end if; 
    end process;

    phase_cache_phases_V_address0 <= zext_ln544_fu_219_p1(8 - 1 downto 0);
    phase_cache_phases_V_address1 <= sext_ln544_fu_233_p1(8 - 1 downto 0);

    phase_cache_phases_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            phase_cache_phases_V_ce0 <= ap_const_logic_1;
        else 
            phase_cache_phases_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    phase_cache_phases_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            phase_cache_phases_V_ce1 <= ap_const_logic_1;
        else 
            phase_cache_phases_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    phase_cache_phases_V_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            phase_cache_phases_V_we1 <= ap_const_logic_1;
        else 
            phase_cache_phases_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_227_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(zext_ln215_fu_224_p1));
        sext_ln544_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_reg_672),64));

    shl_ln703_10_fu_448_p3 <= (tones_5_inc_V_read_1_reg_632_pp0_iter2_reg & ap_const_lv6_0);
    shl_ln703_11_fu_460_p3 <= (tones_6_phase_V_rea_1_reg_587_pp0_iter2_reg & ap_const_lv6_0);
    shl_ln703_12_fu_472_p3 <= (tones_6_inc_V_read_1_reg_627_pp0_iter2_reg & ap_const_lv6_0);
    shl_ln703_13_fu_484_p3 <= (tones_7_phase_V_rea_1_reg_582_pp0_iter2_reg & ap_const_lv6_0);
    shl_ln703_14_fu_496_p3 <= (tones_7_inc_V_read_1_reg_622_pp0_iter2_reg & ap_const_lv6_0);
    shl_ln703_1_fu_328_p3 <= (tones_0_inc_V_read_1_reg_657_pp0_iter2_reg & ap_const_lv6_0);
    shl_ln703_2_fu_340_p3 <= (tones_1_phase_V_rea_1_reg_612_pp0_iter2_reg & ap_const_lv6_0);
    shl_ln703_3_fu_352_p3 <= (tones_1_inc_V_read_1_reg_652_pp0_iter2_reg & ap_const_lv6_0);
    shl_ln703_4_fu_364_p3 <= (tones_2_phase_V_rea_1_reg_607_pp0_iter2_reg & ap_const_lv6_0);
    shl_ln703_5_fu_376_p3 <= (tones_2_inc_V_read_1_reg_647_pp0_iter2_reg & ap_const_lv6_0);
    shl_ln703_6_fu_388_p3 <= (tones_3_phase_V_rea_1_reg_602_pp0_iter2_reg & ap_const_lv6_0);
    shl_ln703_7_fu_400_p3 <= (tones_3_inc_V_read_1_reg_642_pp0_iter2_reg & ap_const_lv6_0);
    shl_ln703_8_fu_412_p3 <= (tones_4_phase_V_rea_1_reg_597_pp0_iter2_reg & ap_const_lv6_0);
    shl_ln703_9_fu_424_p3 <= (tones_4_inc_V_read_1_reg_637_pp0_iter2_reg & ap_const_lv6_0);
    shl_ln703_s_fu_436_p3 <= (tones_5_phase_V_rea_1_reg_592_pp0_iter2_reg & ap_const_lv6_0);
    shl_ln_fu_316_p3 <= (tones_0_phase_V_rea_1_reg_617_pp0_iter2_reg & ap_const_lv6_0);
    tmp_9_fu_508_p9 <= (((((((add_ln703_15_fu_503_p2 & add_ln703_13_fu_479_p2) & add_ln703_11_fu_455_p2) & add_ln703_9_fu_431_p2) & add_ln703_7_fu_407_p2) & add_ln703_5_fu_383_p2) & add_ln703_3_fu_359_p2) & add_ln703_1_fu_335_p2);
    trunc_ln1265_fu_242_p1 <= phase_cache_phases_V_q0(22 - 1 downto 0);
    zext_ln215_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(group_V_read_reg_662),9));
    zext_ln544_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(group_V),64));
end behav;
