// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module increment_phases (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        group_V,
        tones_0_inc_V_read,
        tones_1_inc_V_read,
        tones_2_inc_V_read,
        tones_3_inc_V_read,
        tones_4_inc_V_read,
        tones_5_inc_V_read,
        tones_6_inc_V_read,
        tones_7_inc_V_read,
        tones_0_phase_V_rea,
        tones_1_phase_V_rea,
        tones_2_phase_V_rea,
        tones_3_phase_V_rea,
        tones_4_phase_V_rea,
        tones_5_phase_V_rea,
        tones_6_phase_V_rea,
        tones_7_phase_V_rea,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [7:0] group_V;
input  [15:0] tones_0_inc_V_read;
input  [15:0] tones_1_inc_V_read;
input  [15:0] tones_2_inc_V_read;
input  [15:0] tones_3_inc_V_read;
input  [15:0] tones_4_inc_V_read;
input  [15:0] tones_5_inc_V_read;
input  [15:0] tones_6_inc_V_read;
input  [15:0] tones_7_inc_V_read;
input  [15:0] tones_0_phase_V_rea;
input  [15:0] tones_1_phase_V_rea;
input  [15:0] tones_2_phase_V_rea;
input  [15:0] tones_3_phase_V_rea;
input  [15:0] tones_4_phase_V_rea;
input  [15:0] tones_5_phase_V_rea;
input  [15:0] tones_6_phase_V_rea;
input  [15:0] tones_7_phase_V_rea;
output  [21:0] ap_return_0;
output  [21:0] ap_return_1;
output  [21:0] ap_return_2;
output  [21:0] ap_return_3;
output  [21:0] ap_return_4;
output  [21:0] ap_return_5;
output  [21:0] ap_return_6;
output  [21:0] ap_return_7;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [175:0] temp_phases_V;
wire   [7:0] phase_cache_phases_V_address0;
reg    phase_cache_phases_V_ce0;
wire   [175:0] phase_cache_phases_V_q0;
wire   [7:0] phase_cache_phases_V_address1;
reg    phase_cache_phases_V_ce1;
reg    phase_cache_phases_V_we1;
reg   [15:0] tones_7_phase_V_rea_1_reg_582;
reg   [15:0] tones_7_phase_V_rea_1_reg_582_pp0_iter1_reg;
reg   [15:0] tones_7_phase_V_rea_1_reg_582_pp0_iter2_reg;
reg   [15:0] tones_6_phase_V_rea_1_reg_587;
reg   [15:0] tones_6_phase_V_rea_1_reg_587_pp0_iter1_reg;
reg   [15:0] tones_6_phase_V_rea_1_reg_587_pp0_iter2_reg;
reg   [15:0] tones_5_phase_V_rea_1_reg_592;
reg   [15:0] tones_5_phase_V_rea_1_reg_592_pp0_iter1_reg;
reg   [15:0] tones_5_phase_V_rea_1_reg_592_pp0_iter2_reg;
reg   [15:0] tones_4_phase_V_rea_1_reg_597;
reg   [15:0] tones_4_phase_V_rea_1_reg_597_pp0_iter1_reg;
reg   [15:0] tones_4_phase_V_rea_1_reg_597_pp0_iter2_reg;
reg   [15:0] tones_3_phase_V_rea_1_reg_602;
reg   [15:0] tones_3_phase_V_rea_1_reg_602_pp0_iter1_reg;
reg   [15:0] tones_3_phase_V_rea_1_reg_602_pp0_iter2_reg;
reg   [15:0] tones_2_phase_V_rea_1_reg_607;
reg   [15:0] tones_2_phase_V_rea_1_reg_607_pp0_iter1_reg;
reg   [15:0] tones_2_phase_V_rea_1_reg_607_pp0_iter2_reg;
reg   [15:0] tones_1_phase_V_rea_1_reg_612;
reg   [15:0] tones_1_phase_V_rea_1_reg_612_pp0_iter1_reg;
reg   [15:0] tones_1_phase_V_rea_1_reg_612_pp0_iter2_reg;
reg   [15:0] tones_0_phase_V_rea_1_reg_617;
reg   [15:0] tones_0_phase_V_rea_1_reg_617_pp0_iter1_reg;
reg   [15:0] tones_0_phase_V_rea_1_reg_617_pp0_iter2_reg;
reg   [15:0] tones_7_inc_V_read_1_reg_622;
reg   [15:0] tones_7_inc_V_read_1_reg_622_pp0_iter1_reg;
reg   [15:0] tones_7_inc_V_read_1_reg_622_pp0_iter2_reg;
reg   [15:0] tones_6_inc_V_read_1_reg_627;
reg   [15:0] tones_6_inc_V_read_1_reg_627_pp0_iter1_reg;
reg   [15:0] tones_6_inc_V_read_1_reg_627_pp0_iter2_reg;
reg   [15:0] tones_5_inc_V_read_1_reg_632;
reg   [15:0] tones_5_inc_V_read_1_reg_632_pp0_iter1_reg;
reg   [15:0] tones_5_inc_V_read_1_reg_632_pp0_iter2_reg;
reg   [15:0] tones_4_inc_V_read_1_reg_637;
reg   [15:0] tones_4_inc_V_read_1_reg_637_pp0_iter1_reg;
reg   [15:0] tones_4_inc_V_read_1_reg_637_pp0_iter2_reg;
reg   [15:0] tones_3_inc_V_read_1_reg_642;
reg   [15:0] tones_3_inc_V_read_1_reg_642_pp0_iter1_reg;
reg   [15:0] tones_3_inc_V_read_1_reg_642_pp0_iter2_reg;
reg   [15:0] tones_2_inc_V_read_1_reg_647;
reg   [15:0] tones_2_inc_V_read_1_reg_647_pp0_iter1_reg;
reg   [15:0] tones_2_inc_V_read_1_reg_647_pp0_iter2_reg;
reg   [15:0] tones_1_inc_V_read_1_reg_652;
reg   [15:0] tones_1_inc_V_read_1_reg_652_pp0_iter1_reg;
reg   [15:0] tones_1_inc_V_read_1_reg_652_pp0_iter2_reg;
reg   [15:0] tones_0_inc_V_read_1_reg_657;
reg   [15:0] tones_0_inc_V_read_1_reg_657_pp0_iter1_reg;
reg   [15:0] tones_0_inc_V_read_1_reg_657_pp0_iter2_reg;
reg   [7:0] group_V_read_reg_662;
wire   [8:0] ret_V_fu_227_p2;
reg   [8:0] ret_V_reg_672;
wire   [21:0] trunc_ln1265_fu_242_p1;
reg   [21:0] trunc_ln1265_reg_677;
reg   [21:0] tmp_2_reg_683;
reg   [21:0] tmp_3_reg_689;
reg   [21:0] tmp_4_reg_695;
reg   [21:0] tmp_5_reg_701;
reg   [21:0] tmp_6_reg_707;
reg   [21:0] tmp_7_reg_713;
reg   [21:0] tmp_8_reg_719;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln544_fu_219_p1;
wire  signed [63:0] sext_ln544_fu_233_p1;
wire   [175:0] tmp_9_fu_508_p9;
reg   [175:0] ap_sig_allocacmp_temp_phases_V_load;
wire   [8:0] zext_ln215_fu_224_p1;
wire   [21:0] shl_ln_fu_316_p3;
wire   [21:0] shl_ln703_1_fu_328_p3;
wire   [21:0] shl_ln703_2_fu_340_p3;
wire   [21:0] shl_ln703_3_fu_352_p3;
wire   [21:0] shl_ln703_4_fu_364_p3;
wire   [21:0] shl_ln703_5_fu_376_p3;
wire   [21:0] shl_ln703_6_fu_388_p3;
wire   [21:0] shl_ln703_7_fu_400_p3;
wire   [21:0] shl_ln703_8_fu_412_p3;
wire   [21:0] shl_ln703_9_fu_424_p3;
wire   [21:0] shl_ln703_s_fu_436_p3;
wire   [21:0] shl_ln703_10_fu_448_p3;
wire   [21:0] shl_ln703_11_fu_460_p3;
wire   [21:0] shl_ln703_12_fu_472_p3;
wire   [21:0] shl_ln703_13_fu_484_p3;
wire   [21:0] shl_ln703_14_fu_496_p3;
wire   [21:0] add_ln703_15_fu_503_p2;
wire   [21:0] add_ln703_13_fu_479_p2;
wire   [21:0] add_ln703_11_fu_455_p2;
wire   [21:0] add_ln703_9_fu_431_p2;
wire   [21:0] add_ln703_7_fu_407_p2;
wire   [21:0] add_ln703_5_fu_383_p2;
wire   [21:0] add_ln703_3_fu_359_p2;
wire   [21:0] add_ln703_1_fu_335_p2;
wire   [21:0] add_ln703_fu_323_p2;
wire   [21:0] add_ln703_2_fu_347_p2;
wire   [21:0] add_ln703_4_fu_371_p2;
wire   [21:0] add_ln703_6_fu_395_p2;
wire   [21:0] add_ln703_8_fu_419_p2;
wire   [21:0] add_ln703_10_fu_443_p2;
wire   [21:0] add_ln703_12_fu_467_p2;
wire   [21:0] add_ln703_14_fu_491_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 temp_phases_V = 176'd0;
end

increment_phases_bkb #(
    .DataWidth( 176 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
phase_cache_phases_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(phase_cache_phases_V_address0),
    .ce0(phase_cache_phases_V_ce0),
    .q0(phase_cache_phases_V_q0),
    .address1(phase_cache_phases_V_address1),
    .ce1(phase_cache_phases_V_ce1),
    .we1(phase_cache_phases_V_we1),
    .d1(ap_sig_allocacmp_temp_phases_V_load)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        group_V_read_reg_662 <= group_V;
        ret_V_reg_672 <= ret_V_fu_227_p2;
        tones_0_inc_V_read_1_reg_657 <= tones_0_inc_V_read;
        tones_0_inc_V_read_1_reg_657_pp0_iter1_reg <= tones_0_inc_V_read_1_reg_657;
        tones_0_phase_V_rea_1_reg_617 <= tones_0_phase_V_rea;
        tones_0_phase_V_rea_1_reg_617_pp0_iter1_reg <= tones_0_phase_V_rea_1_reg_617;
        tones_1_inc_V_read_1_reg_652 <= tones_1_inc_V_read;
        tones_1_inc_V_read_1_reg_652_pp0_iter1_reg <= tones_1_inc_V_read_1_reg_652;
        tones_1_phase_V_rea_1_reg_612 <= tones_1_phase_V_rea;
        tones_1_phase_V_rea_1_reg_612_pp0_iter1_reg <= tones_1_phase_V_rea_1_reg_612;
        tones_2_inc_V_read_1_reg_647 <= tones_2_inc_V_read;
        tones_2_inc_V_read_1_reg_647_pp0_iter1_reg <= tones_2_inc_V_read_1_reg_647;
        tones_2_phase_V_rea_1_reg_607 <= tones_2_phase_V_rea;
        tones_2_phase_V_rea_1_reg_607_pp0_iter1_reg <= tones_2_phase_V_rea_1_reg_607;
        tones_3_inc_V_read_1_reg_642 <= tones_3_inc_V_read;
        tones_3_inc_V_read_1_reg_642_pp0_iter1_reg <= tones_3_inc_V_read_1_reg_642;
        tones_3_phase_V_rea_1_reg_602 <= tones_3_phase_V_rea;
        tones_3_phase_V_rea_1_reg_602_pp0_iter1_reg <= tones_3_phase_V_rea_1_reg_602;
        tones_4_inc_V_read_1_reg_637 <= tones_4_inc_V_read;
        tones_4_inc_V_read_1_reg_637_pp0_iter1_reg <= tones_4_inc_V_read_1_reg_637;
        tones_4_phase_V_rea_1_reg_597 <= tones_4_phase_V_rea;
        tones_4_phase_V_rea_1_reg_597_pp0_iter1_reg <= tones_4_phase_V_rea_1_reg_597;
        tones_5_inc_V_read_1_reg_632 <= tones_5_inc_V_read;
        tones_5_inc_V_read_1_reg_632_pp0_iter1_reg <= tones_5_inc_V_read_1_reg_632;
        tones_5_phase_V_rea_1_reg_592 <= tones_5_phase_V_rea;
        tones_5_phase_V_rea_1_reg_592_pp0_iter1_reg <= tones_5_phase_V_rea_1_reg_592;
        tones_6_inc_V_read_1_reg_627 <= tones_6_inc_V_read;
        tones_6_inc_V_read_1_reg_627_pp0_iter1_reg <= tones_6_inc_V_read_1_reg_627;
        tones_6_phase_V_rea_1_reg_587 <= tones_6_phase_V_rea;
        tones_6_phase_V_rea_1_reg_587_pp0_iter1_reg <= tones_6_phase_V_rea_1_reg_587;
        tones_7_inc_V_read_1_reg_622 <= tones_7_inc_V_read;
        tones_7_inc_V_read_1_reg_622_pp0_iter1_reg <= tones_7_inc_V_read_1_reg_622;
        tones_7_phase_V_rea_1_reg_582 <= tones_7_phase_V_rea;
        tones_7_phase_V_rea_1_reg_582_pp0_iter1_reg <= tones_7_phase_V_rea_1_reg_582;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        temp_phases_V <= tmp_9_fu_508_p9;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_reg_683 <= {{phase_cache_phases_V_q0[43:22]}};
        tmp_3_reg_689 <= {{phase_cache_phases_V_q0[65:44]}};
        tmp_4_reg_695 <= {{phase_cache_phases_V_q0[87:66]}};
        tmp_5_reg_701 <= {{phase_cache_phases_V_q0[109:88]}};
        tmp_6_reg_707 <= {{phase_cache_phases_V_q0[131:110]}};
        tmp_7_reg_713 <= {{phase_cache_phases_V_q0[153:132]}};
        tmp_8_reg_719 <= {{phase_cache_phases_V_q0[175:154]}};
        tones_0_inc_V_read_1_reg_657_pp0_iter2_reg <= tones_0_inc_V_read_1_reg_657_pp0_iter1_reg;
        tones_0_phase_V_rea_1_reg_617_pp0_iter2_reg <= tones_0_phase_V_rea_1_reg_617_pp0_iter1_reg;
        tones_1_inc_V_read_1_reg_652_pp0_iter2_reg <= tones_1_inc_V_read_1_reg_652_pp0_iter1_reg;
        tones_1_phase_V_rea_1_reg_612_pp0_iter2_reg <= tones_1_phase_V_rea_1_reg_612_pp0_iter1_reg;
        tones_2_inc_V_read_1_reg_647_pp0_iter2_reg <= tones_2_inc_V_read_1_reg_647_pp0_iter1_reg;
        tones_2_phase_V_rea_1_reg_607_pp0_iter2_reg <= tones_2_phase_V_rea_1_reg_607_pp0_iter1_reg;
        tones_3_inc_V_read_1_reg_642_pp0_iter2_reg <= tones_3_inc_V_read_1_reg_642_pp0_iter1_reg;
        tones_3_phase_V_rea_1_reg_602_pp0_iter2_reg <= tones_3_phase_V_rea_1_reg_602_pp0_iter1_reg;
        tones_4_inc_V_read_1_reg_637_pp0_iter2_reg <= tones_4_inc_V_read_1_reg_637_pp0_iter1_reg;
        tones_4_phase_V_rea_1_reg_597_pp0_iter2_reg <= tones_4_phase_V_rea_1_reg_597_pp0_iter1_reg;
        tones_5_inc_V_read_1_reg_632_pp0_iter2_reg <= tones_5_inc_V_read_1_reg_632_pp0_iter1_reg;
        tones_5_phase_V_rea_1_reg_592_pp0_iter2_reg <= tones_5_phase_V_rea_1_reg_592_pp0_iter1_reg;
        tones_6_inc_V_read_1_reg_627_pp0_iter2_reg <= tones_6_inc_V_read_1_reg_627_pp0_iter1_reg;
        tones_6_phase_V_rea_1_reg_587_pp0_iter2_reg <= tones_6_phase_V_rea_1_reg_587_pp0_iter1_reg;
        tones_7_inc_V_read_1_reg_622_pp0_iter2_reg <= tones_7_inc_V_read_1_reg_622_pp0_iter1_reg;
        tones_7_phase_V_rea_1_reg_582_pp0_iter2_reg <= tones_7_phase_V_rea_1_reg_582_pp0_iter1_reg;
        trunc_ln1265_reg_677 <= trunc_ln1265_fu_242_p1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_sig_allocacmp_temp_phases_V_load = tmp_9_fu_508_p9;
    end else begin
        ap_sig_allocacmp_temp_phases_V_load = temp_phases_V;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        phase_cache_phases_V_ce0 = 1'b1;
    end else begin
        phase_cache_phases_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        phase_cache_phases_V_ce1 = 1'b1;
    end else begin
        phase_cache_phases_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        phase_cache_phases_V_we1 = 1'b1;
    end else begin
        phase_cache_phases_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_10_fu_443_p2 = (shl_ln703_s_fu_436_p3 + tmp_6_reg_707);

assign add_ln703_11_fu_455_p2 = (shl_ln703_10_fu_448_p3 + tmp_6_reg_707);

assign add_ln703_12_fu_467_p2 = (shl_ln703_11_fu_460_p3 + tmp_7_reg_713);

assign add_ln703_13_fu_479_p2 = (shl_ln703_12_fu_472_p3 + tmp_7_reg_713);

assign add_ln703_14_fu_491_p2 = (shl_ln703_13_fu_484_p3 + tmp_8_reg_719);

assign add_ln703_15_fu_503_p2 = (shl_ln703_14_fu_496_p3 + tmp_8_reg_719);

assign add_ln703_1_fu_335_p2 = (shl_ln703_1_fu_328_p3 + trunc_ln1265_reg_677);

assign add_ln703_2_fu_347_p2 = (shl_ln703_2_fu_340_p3 + tmp_2_reg_683);

assign add_ln703_3_fu_359_p2 = (shl_ln703_3_fu_352_p3 + tmp_2_reg_683);

assign add_ln703_4_fu_371_p2 = (shl_ln703_4_fu_364_p3 + tmp_3_reg_689);

assign add_ln703_5_fu_383_p2 = (shl_ln703_5_fu_376_p3 + tmp_3_reg_689);

assign add_ln703_6_fu_395_p2 = (shl_ln703_6_fu_388_p3 + tmp_4_reg_695);

assign add_ln703_7_fu_407_p2 = (shl_ln703_7_fu_400_p3 + tmp_4_reg_695);

assign add_ln703_8_fu_419_p2 = (shl_ln703_8_fu_412_p3 + tmp_5_reg_701);

assign add_ln703_9_fu_431_p2 = (shl_ln703_9_fu_424_p3 + tmp_5_reg_701);

assign add_ln703_fu_323_p2 = (shl_ln_fu_316_p3 + trunc_ln1265_reg_677);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = add_ln703_fu_323_p2;

assign ap_return_1 = add_ln703_2_fu_347_p2;

assign ap_return_2 = add_ln703_4_fu_371_p2;

assign ap_return_3 = add_ln703_6_fu_395_p2;

assign ap_return_4 = add_ln703_8_fu_419_p2;

assign ap_return_5 = add_ln703_10_fu_443_p2;

assign ap_return_6 = add_ln703_12_fu_467_p2;

assign ap_return_7 = add_ln703_14_fu_491_p2;

assign phase_cache_phases_V_address0 = zext_ln544_fu_219_p1;

assign phase_cache_phases_V_address1 = sext_ln544_fu_233_p1;

assign ret_V_fu_227_p2 = ($signed(9'd511) + $signed(zext_ln215_fu_224_p1));

assign sext_ln544_fu_233_p1 = $signed(ret_V_reg_672);

assign shl_ln703_10_fu_448_p3 = {{tones_5_inc_V_read_1_reg_632_pp0_iter2_reg}, {6'd0}};

assign shl_ln703_11_fu_460_p3 = {{tones_6_phase_V_rea_1_reg_587_pp0_iter2_reg}, {6'd0}};

assign shl_ln703_12_fu_472_p3 = {{tones_6_inc_V_read_1_reg_627_pp0_iter2_reg}, {6'd0}};

assign shl_ln703_13_fu_484_p3 = {{tones_7_phase_V_rea_1_reg_582_pp0_iter2_reg}, {6'd0}};

assign shl_ln703_14_fu_496_p3 = {{tones_7_inc_V_read_1_reg_622_pp0_iter2_reg}, {6'd0}};

assign shl_ln703_1_fu_328_p3 = {{tones_0_inc_V_read_1_reg_657_pp0_iter2_reg}, {6'd0}};

assign shl_ln703_2_fu_340_p3 = {{tones_1_phase_V_rea_1_reg_612_pp0_iter2_reg}, {6'd0}};

assign shl_ln703_3_fu_352_p3 = {{tones_1_inc_V_read_1_reg_652_pp0_iter2_reg}, {6'd0}};

assign shl_ln703_4_fu_364_p3 = {{tones_2_phase_V_rea_1_reg_607_pp0_iter2_reg}, {6'd0}};

assign shl_ln703_5_fu_376_p3 = {{tones_2_inc_V_read_1_reg_647_pp0_iter2_reg}, {6'd0}};

assign shl_ln703_6_fu_388_p3 = {{tones_3_phase_V_rea_1_reg_602_pp0_iter2_reg}, {6'd0}};

assign shl_ln703_7_fu_400_p3 = {{tones_3_inc_V_read_1_reg_642_pp0_iter2_reg}, {6'd0}};

assign shl_ln703_8_fu_412_p3 = {{tones_4_phase_V_rea_1_reg_597_pp0_iter2_reg}, {6'd0}};

assign shl_ln703_9_fu_424_p3 = {{tones_4_inc_V_read_1_reg_637_pp0_iter2_reg}, {6'd0}};

assign shl_ln703_s_fu_436_p3 = {{tones_5_phase_V_rea_1_reg_592_pp0_iter2_reg}, {6'd0}};

assign shl_ln_fu_316_p3 = {{tones_0_phase_V_rea_1_reg_617_pp0_iter2_reg}, {6'd0}};

assign tmp_9_fu_508_p9 = {{{{{{{{add_ln703_15_fu_503_p2}, {add_ln703_13_fu_479_p2}}, {add_ln703_11_fu_455_p2}}, {add_ln703_9_fu_431_p2}}, {add_ln703_7_fu_407_p2}}, {add_ln703_5_fu_383_p2}}, {add_ln703_3_fu_359_p2}}, {add_ln703_1_fu_335_p2}};

assign trunc_ln1265_fu_242_p1 = phase_cache_phases_V_q0[21:0];

assign zext_ln215_fu_224_p1 = group_V_read_reg_662;

assign zext_ln544_fu_219_p1 = group_V;

endmodule //increment_phases
