-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity increment_phases is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    group_V_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read38 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read39 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read40 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read41 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read42 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read43 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read44 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read45 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read46 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read47 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read48 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read49 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read50 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read51 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read52 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read53 : IN STD_LOGIC_VECTOR (15 downto 0);
    dummyout_last_V_writ : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (21 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (21 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (21 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (21 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (21 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (21 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (21 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (21 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of increment_phases is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_16 : STD_LOGIC_VECTOR (8 downto 0) := "000010110";
    constant ap_const_lv9_2B : STD_LOGIC_VECTOR (8 downto 0) := "000101011";
    constant ap_const_lv9_2C : STD_LOGIC_VECTOR (8 downto 0) := "000101100";
    constant ap_const_lv9_41 : STD_LOGIC_VECTOR (8 downto 0) := "001000001";
    constant ap_const_lv9_42 : STD_LOGIC_VECTOR (8 downto 0) := "001000010";
    constant ap_const_lv9_57 : STD_LOGIC_VECTOR (8 downto 0) := "001010111";
    constant ap_const_lv9_58 : STD_LOGIC_VECTOR (8 downto 0) := "001011000";
    constant ap_const_lv9_6D : STD_LOGIC_VECTOR (8 downto 0) := "001101101";
    constant ap_const_lv9_6E : STD_LOGIC_VECTOR (8 downto 0) := "001101110";
    constant ap_const_lv9_83 : STD_LOGIC_VECTOR (8 downto 0) := "010000011";
    constant ap_const_lv9_84 : STD_LOGIC_VECTOR (8 downto 0) := "010000100";
    constant ap_const_lv9_99 : STD_LOGIC_VECTOR (8 downto 0) := "010011001";
    constant ap_const_lv9_9A : STD_LOGIC_VECTOR (8 downto 0) := "010011010";
    constant ap_const_lv9_AF : STD_LOGIC_VECTOR (8 downto 0) := "010101111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal last_phases_V_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    signal last_phases_V_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    signal last_phases_V_2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    signal last_phases_V_3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    signal last_phases_V_4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    signal last_phases_V_5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    signal last_phases_V_6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    signal last_phases_V_7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    signal phase_cache_phases_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal phase_cache_phases_V_ce0 : STD_LOGIC;
    signal phase_cache_phases_V_q0 : STD_LOGIC_VECTOR (175 downto 0);
    signal phase_cache_phases_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal phase_cache_phases_V_ce1 : STD_LOGIC;
    signal phase_cache_phases_V_we1 : STD_LOGIC;
    signal phase_cache_phases_V_d1 : STD_LOGIC_VECTOR (175 downto 0);
    signal dummyout_last_V_writ_1_reg_894 : STD_LOGIC_VECTOR (0 downto 0);
    signal dummyout_last_V_writ_1_reg_894_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_read_1_reg_899 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_1_reg_899_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_2_reg_904 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_2_reg_904_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_3_reg_909 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_3_reg_909_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_4_reg_914 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_4_reg_914_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_5_reg_919 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_5_reg_919_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_6_reg_924 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_6_reg_924_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_7_reg_929 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_7_reg_929_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_8_reg_934 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_8_reg_934_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_9_reg_939 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_9_reg_939_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_10_reg_944 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_10_reg_944_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_11_reg_949 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_11_reg_949_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_12_reg_954 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_12_reg_954_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_13_reg_959 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_13_reg_959_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_14_reg_964 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_14_reg_964_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_15_reg_969 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_15_reg_969_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_16_reg_974 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_16_reg_974_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_17_reg_979 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_17_reg_979_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_18_reg_984 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_18_reg_984_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_19_reg_989 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_19_reg_989_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_20_reg_994 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_20_reg_994_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_21_reg_999 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_21_reg_999_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_22_reg_1004 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_22_reg_1004_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_23_reg_1009 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_23_reg_1009_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_24_reg_1014 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_24_reg_1014_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read723_reg_1019 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read723_reg_1019_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read622_reg_1024 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read622_reg_1024_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read521_reg_1029 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read521_reg_1029_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read420_reg_1034 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read420_reg_1034_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read319_reg_1039 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read319_reg_1039_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read218_reg_1044 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read218_reg_1044_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read117_reg_1049 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read117_reg_1049_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read16_reg_1054 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read16_reg_1054_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_fu_379_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_1059 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln203_fu_447_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln203_reg_1079 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_2_reg_1085 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_3_reg_1091 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_4_reg_1097 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_5_reg_1103 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_6_reg_1109 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_7_reg_1115 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_8_reg_1121 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln544_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln703_1_fu_540_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_sig_allocacmp_last_phases_V_0_load : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_3_fu_564_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_sig_allocacmp_last_phases_V_1_load : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_5_fu_588_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_sig_allocacmp_last_phases_V_2_load : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_7_fu_612_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_sig_allocacmp_last_phases_V_3_load : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_9_fu_636_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_sig_allocacmp_last_phases_V_4_load : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_11_fu_660_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_sig_allocacmp_last_phases_V_5_load : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_13_fu_684_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_sig_allocacmp_last_phases_V_6_load : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_15_fu_708_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_sig_allocacmp_last_phases_V_7_load : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln215_fu_375_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_521_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_1_fu_533_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_2_fu_545_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_3_fu_557_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_4_fu_569_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_5_fu_581_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_6_fu_593_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_7_fu_605_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_8_fu_617_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_9_fu_629_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_s_fu_641_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_10_fu_653_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_11_fu_665_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_12_fu_677_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_13_fu_689_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln703_14_fu_701_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_fu_528_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_2_fu_552_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_4_fu_576_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_6_fu_600_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_8_fu_624_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_10_fu_648_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_12_fu_672_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_14_fu_696_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component increment_phases_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (175 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (175 downto 0) );
    end component;



begin
    phase_cache_phases_V_U : component increment_phases_bkb
    generic map (
        DataWidth => 176,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => phase_cache_phases_V_address0,
        ce0 => phase_cache_phases_V_ce0,
        q0 => phase_cache_phases_V_q0,
        address1 => phase_cache_phases_V_address1,
        ce1 => phase_cache_phases_V_ce1,
        we1 => phase_cache_phases_V_we1,
        d1 => phase_cache_phases_V_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                dummyout_last_V_writ_1_reg_894 <= dummyout_last_V_writ;
                dummyout_last_V_writ_1_reg_894_pp0_iter1_reg <= dummyout_last_V_writ_1_reg_894;
                p_read117_reg_1049 <= p_read1;
                p_read117_reg_1049_pp0_iter1_reg <= p_read117_reg_1049;
                p_read16_reg_1054 <= p_read;
                p_read16_reg_1054_pp0_iter1_reg <= p_read16_reg_1054;
                p_read218_reg_1044 <= p_read2;
                p_read218_reg_1044_pp0_iter1_reg <= p_read218_reg_1044;
                p_read319_reg_1039 <= p_read3;
                p_read319_reg_1039_pp0_iter1_reg <= p_read319_reg_1039;
                p_read420_reg_1034 <= p_read4;
                p_read420_reg_1034_pp0_iter1_reg <= p_read420_reg_1034;
                p_read521_reg_1029 <= p_read5;
                p_read521_reg_1029_pp0_iter1_reg <= p_read521_reg_1029;
                p_read622_reg_1024 <= p_read6;
                p_read622_reg_1024_pp0_iter1_reg <= p_read622_reg_1024;
                p_read723_reg_1019 <= p_read7;
                p_read723_reg_1019_pp0_iter1_reg <= p_read723_reg_1019;
                p_read_10_reg_944 <= p_read44;
                p_read_10_reg_944_pp0_iter1_reg <= p_read_10_reg_944;
                p_read_11_reg_949 <= p_read43;
                p_read_11_reg_949_pp0_iter1_reg <= p_read_11_reg_949;
                p_read_12_reg_954 <= p_read42;
                p_read_12_reg_954_pp0_iter1_reg <= p_read_12_reg_954;
                p_read_13_reg_959 <= p_read41;
                p_read_13_reg_959_pp0_iter1_reg <= p_read_13_reg_959;
                p_read_14_reg_964 <= p_read40;
                p_read_14_reg_964_pp0_iter1_reg <= p_read_14_reg_964;
                p_read_15_reg_969 <= p_read39;
                p_read_15_reg_969_pp0_iter1_reg <= p_read_15_reg_969;
                p_read_16_reg_974 <= p_read38;
                p_read_16_reg_974_pp0_iter1_reg <= p_read_16_reg_974;
                p_read_17_reg_979 <= p_read15;
                p_read_17_reg_979_pp0_iter1_reg <= p_read_17_reg_979;
                p_read_18_reg_984 <= p_read14;
                p_read_18_reg_984_pp0_iter1_reg <= p_read_18_reg_984;
                p_read_19_reg_989 <= p_read13;
                p_read_19_reg_989_pp0_iter1_reg <= p_read_19_reg_989;
                p_read_1_reg_899 <= p_read53;
                p_read_1_reg_899_pp0_iter1_reg <= p_read_1_reg_899;
                p_read_20_reg_994 <= p_read12;
                p_read_20_reg_994_pp0_iter1_reg <= p_read_20_reg_994;
                p_read_21_reg_999 <= p_read11;
                p_read_21_reg_999_pp0_iter1_reg <= p_read_21_reg_999;
                p_read_22_reg_1004 <= p_read10;
                p_read_22_reg_1004_pp0_iter1_reg <= p_read_22_reg_1004;
                p_read_23_reg_1009 <= p_read9;
                p_read_23_reg_1009_pp0_iter1_reg <= p_read_23_reg_1009;
                p_read_24_reg_1014 <= p_read8;
                p_read_24_reg_1014_pp0_iter1_reg <= p_read_24_reg_1014;
                p_read_2_reg_904 <= p_read52;
                p_read_2_reg_904_pp0_iter1_reg <= p_read_2_reg_904;
                p_read_3_reg_909 <= p_read51;
                p_read_3_reg_909_pp0_iter1_reg <= p_read_3_reg_909;
                p_read_4_reg_914 <= p_read50;
                p_read_4_reg_914_pp0_iter1_reg <= p_read_4_reg_914;
                p_read_5_reg_919 <= p_read49;
                p_read_5_reg_919_pp0_iter1_reg <= p_read_5_reg_919;
                p_read_6_reg_924 <= p_read48;
                p_read_6_reg_924_pp0_iter1_reg <= p_read_6_reg_924;
                p_read_7_reg_929 <= p_read47;
                p_read_7_reg_929_pp0_iter1_reg <= p_read_7_reg_929;
                p_read_8_reg_934 <= p_read46;
                p_read_8_reg_934_pp0_iter1_reg <= p_read_8_reg_934;
                p_read_9_reg_939 <= p_read45;
                p_read_9_reg_939_pp0_iter1_reg <= p_read_9_reg_939;
                ret_V_reg_1059 <= ret_V_fu_379_p2;
                tmp_2_reg_1085 <= phase_cache_phases_V_q0(43 downto 22);
                tmp_3_reg_1091 <= phase_cache_phases_V_q0(65 downto 44);
                tmp_4_reg_1097 <= phase_cache_phases_V_q0(87 downto 66);
                tmp_5_reg_1103 <= phase_cache_phases_V_q0(109 downto 88);
                tmp_6_reg_1109 <= phase_cache_phases_V_q0(131 downto 110);
                tmp_7_reg_1115 <= phase_cache_phases_V_q0(153 downto 132);
                tmp_8_reg_1121 <= phase_cache_phases_V_q0(175 downto 154);
                trunc_ln203_reg_1079 <= trunc_ln203_fu_447_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                last_phases_V_0 <= add_ln703_1_fu_540_p2;
                last_phases_V_1 <= add_ln703_3_fu_564_p2;
                last_phases_V_2 <= add_ln703_5_fu_588_p2;
                last_phases_V_3 <= add_ln703_7_fu_612_p2;
                last_phases_V_4 <= add_ln703_9_fu_636_p2;
                last_phases_V_5 <= add_ln703_11_fu_660_p2;
                last_phases_V_6 <= add_ln703_13_fu_684_p2;
                last_phases_V_7 <= add_ln703_15_fu_708_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln703_10_fu_648_p2 <= std_logic_vector(unsigned(shl_ln703_s_fu_641_p3) + unsigned(tmp_6_reg_1109));
    add_ln703_11_fu_660_p2 <= std_logic_vector(unsigned(shl_ln703_10_fu_653_p3) + unsigned(tmp_6_reg_1109));
    add_ln703_12_fu_672_p2 <= std_logic_vector(unsigned(shl_ln703_11_fu_665_p3) + unsigned(tmp_7_reg_1115));
    add_ln703_13_fu_684_p2 <= std_logic_vector(unsigned(shl_ln703_12_fu_677_p3) + unsigned(tmp_7_reg_1115));
    add_ln703_14_fu_696_p2 <= std_logic_vector(unsigned(shl_ln703_13_fu_689_p3) + unsigned(tmp_8_reg_1121));
    add_ln703_15_fu_708_p2 <= std_logic_vector(unsigned(shl_ln703_14_fu_701_p3) + unsigned(tmp_8_reg_1121));
    add_ln703_1_fu_540_p2 <= std_logic_vector(unsigned(shl_ln703_1_fu_533_p3) + unsigned(trunc_ln203_reg_1079));
    add_ln703_2_fu_552_p2 <= std_logic_vector(unsigned(shl_ln703_2_fu_545_p3) + unsigned(tmp_2_reg_1085));
    add_ln703_3_fu_564_p2 <= std_logic_vector(unsigned(shl_ln703_3_fu_557_p3) + unsigned(tmp_2_reg_1085));
    add_ln703_4_fu_576_p2 <= std_logic_vector(unsigned(shl_ln703_4_fu_569_p3) + unsigned(tmp_3_reg_1091));
    add_ln703_5_fu_588_p2 <= std_logic_vector(unsigned(shl_ln703_5_fu_581_p3) + unsigned(tmp_3_reg_1091));
    add_ln703_6_fu_600_p2 <= std_logic_vector(unsigned(shl_ln703_6_fu_593_p3) + unsigned(tmp_4_reg_1097));
    add_ln703_7_fu_612_p2 <= std_logic_vector(unsigned(shl_ln703_7_fu_605_p3) + unsigned(tmp_4_reg_1097));
    add_ln703_8_fu_624_p2 <= std_logic_vector(unsigned(shl_ln703_8_fu_617_p3) + unsigned(tmp_5_reg_1103));
    add_ln703_9_fu_636_p2 <= std_logic_vector(unsigned(shl_ln703_9_fu_629_p3) + unsigned(tmp_5_reg_1103));
    add_ln703_fu_528_p2 <= std_logic_vector(unsigned(shl_ln_fu_521_p3) + unsigned(trunc_ln203_reg_1079));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= dummyout_last_V_writ_1_reg_894_pp0_iter1_reg;
    ap_return_1 <= add_ln703_fu_528_p2;
    ap_return_10 <= p_read_15_reg_969_pp0_iter1_reg;
    ap_return_11 <= p_read_14_reg_964_pp0_iter1_reg;
    ap_return_12 <= p_read_13_reg_959_pp0_iter1_reg;
    ap_return_13 <= p_read_12_reg_954_pp0_iter1_reg;
    ap_return_14 <= p_read_11_reg_949_pp0_iter1_reg;
    ap_return_15 <= p_read_10_reg_944_pp0_iter1_reg;
    ap_return_16 <= p_read_9_reg_939_pp0_iter1_reg;
    ap_return_17 <= p_read_8_reg_934_pp0_iter1_reg;
    ap_return_18 <= p_read_7_reg_929_pp0_iter1_reg;
    ap_return_19 <= p_read_6_reg_924_pp0_iter1_reg;
    ap_return_2 <= add_ln703_2_fu_552_p2;
    ap_return_20 <= p_read_5_reg_919_pp0_iter1_reg;
    ap_return_21 <= p_read_4_reg_914_pp0_iter1_reg;
    ap_return_22 <= p_read_3_reg_909_pp0_iter1_reg;
    ap_return_23 <= p_read_2_reg_904_pp0_iter1_reg;
    ap_return_24 <= p_read_1_reg_899_pp0_iter1_reg;
    ap_return_3 <= add_ln703_4_fu_576_p2;
    ap_return_4 <= add_ln703_6_fu_600_p2;
    ap_return_5 <= add_ln703_8_fu_624_p2;
    ap_return_6 <= add_ln703_10_fu_648_p2;
    ap_return_7 <= add_ln703_12_fu_672_p2;
    ap_return_8 <= add_ln703_14_fu_696_p2;
    ap_return_9 <= p_read_16_reg_974_pp0_iter1_reg;

    ap_sig_allocacmp_last_phases_V_0_load_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, last_phases_V_0, add_ln703_1_fu_540_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_last_phases_V_0_load <= add_ln703_1_fu_540_p2;
        else 
            ap_sig_allocacmp_last_phases_V_0_load <= last_phases_V_0;
        end if; 
    end process;


    ap_sig_allocacmp_last_phases_V_1_load_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, last_phases_V_1, add_ln703_3_fu_564_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_last_phases_V_1_load <= add_ln703_3_fu_564_p2;
        else 
            ap_sig_allocacmp_last_phases_V_1_load <= last_phases_V_1;
        end if; 
    end process;


    ap_sig_allocacmp_last_phases_V_2_load_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, last_phases_V_2, add_ln703_5_fu_588_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_last_phases_V_2_load <= add_ln703_5_fu_588_p2;
        else 
            ap_sig_allocacmp_last_phases_V_2_load <= last_phases_V_2;
        end if; 
    end process;


    ap_sig_allocacmp_last_phases_V_3_load_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, last_phases_V_3, add_ln703_7_fu_612_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_last_phases_V_3_load <= add_ln703_7_fu_612_p2;
        else 
            ap_sig_allocacmp_last_phases_V_3_load <= last_phases_V_3;
        end if; 
    end process;


    ap_sig_allocacmp_last_phases_V_4_load_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, last_phases_V_4, add_ln703_9_fu_636_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_last_phases_V_4_load <= add_ln703_9_fu_636_p2;
        else 
            ap_sig_allocacmp_last_phases_V_4_load <= last_phases_V_4;
        end if; 
    end process;


    ap_sig_allocacmp_last_phases_V_5_load_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, last_phases_V_5, add_ln703_11_fu_660_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_last_phases_V_5_load <= add_ln703_11_fu_660_p2;
        else 
            ap_sig_allocacmp_last_phases_V_5_load <= last_phases_V_5;
        end if; 
    end process;


    ap_sig_allocacmp_last_phases_V_6_load_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, last_phases_V_6, add_ln703_13_fu_684_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_last_phases_V_6_load <= add_ln703_13_fu_684_p2;
        else 
            ap_sig_allocacmp_last_phases_V_6_load <= last_phases_V_6;
        end if; 
    end process;


    ap_sig_allocacmp_last_phases_V_7_load_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, last_phases_V_7, add_ln703_15_fu_708_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_last_phases_V_7_load <= add_ln703_15_fu_708_p2;
        else 
            ap_sig_allocacmp_last_phases_V_7_load <= last_phases_V_7;
        end if; 
    end process;

    phase_cache_phases_V_address0 <= zext_ln544_fu_385_p1(8 - 1 downto 0);
    phase_cache_phases_V_address1 <= sext_ln544_fu_390_p1(8 - 1 downto 0);

    phase_cache_phases_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            phase_cache_phases_V_ce0 <= ap_const_logic_1;
        else 
            phase_cache_phases_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    phase_cache_phases_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            phase_cache_phases_V_ce1 <= ap_const_logic_1;
        else 
            phase_cache_phases_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    phase_cache_phases_V_d1 <= (((((((ap_sig_allocacmp_last_phases_V_7_load & ap_sig_allocacmp_last_phases_V_6_load) & ap_sig_allocacmp_last_phases_V_5_load) & ap_sig_allocacmp_last_phases_V_4_load) & ap_sig_allocacmp_last_phases_V_3_load) & ap_sig_allocacmp_last_phases_V_2_load) & ap_sig_allocacmp_last_phases_V_1_load) & ap_sig_allocacmp_last_phases_V_0_load);

    phase_cache_phases_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            phase_cache_phases_V_we1 <= ap_const_logic_1;
        else 
            phase_cache_phases_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_379_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(zext_ln215_fu_375_p1));
        sext_ln544_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_reg_1059),64));

    shl_ln703_10_fu_653_p3 <= (p_read521_reg_1029_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln703_11_fu_665_p3 <= (p_read_18_reg_984_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln703_12_fu_677_p3 <= (p_read622_reg_1024_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln703_13_fu_689_p3 <= (p_read_17_reg_979_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln703_14_fu_701_p3 <= (p_read723_reg_1019_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln703_1_fu_533_p3 <= (p_read16_reg_1054_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln703_2_fu_545_p3 <= (p_read_23_reg_1009_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln703_3_fu_557_p3 <= (p_read117_reg_1049_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln703_4_fu_569_p3 <= (p_read_22_reg_1004_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln703_5_fu_581_p3 <= (p_read218_reg_1044_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln703_6_fu_593_p3 <= (p_read_21_reg_999_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln703_7_fu_605_p3 <= (p_read319_reg_1039_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln703_8_fu_617_p3 <= (p_read_20_reg_994_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln703_9_fu_629_p3 <= (p_read420_reg_1034_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln703_s_fu_641_p3 <= (p_read_19_reg_989_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln_fu_521_p3 <= (p_read_24_reg_1014_pp0_iter1_reg & ap_const_lv6_0);
    trunc_ln203_fu_447_p1 <= phase_cache_phases_V_q0(22 - 1 downto 0);
    zext_ln215_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(group_V_2),9));
    zext_ln544_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(group_V_2),64));
end behav;
