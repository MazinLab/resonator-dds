-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity resonator_dds_phase_to_sincos_wLUT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    acc : IN STD_LOGIC_VECTOR (20 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of resonator_dds_phase_to_sincos_wLUT is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv18_20001 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_8001 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal cos_lut_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal cos_lut_ce0 : STD_LOGIC;
    signal cos_lut_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal cos_lut_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal cos_lut_ce1 : STD_LOGIC;
    signal cos_lut_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal fine_lut_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal fine_lut_ce0 : STD_LOGIC;
    signal fine_lut_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal fine_adr_V_fu_128_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal fine_adr_V_reg_844 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal fine_adr_V_reg_844_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal fine_adr_V_reg_844_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal fine_adr_V_reg_844_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal msb_V_reg_849 : STD_LOGIC_VECTOR (1 downto 0);
    signal msb_V_reg_849_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal msb_V_reg_849_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal msb_V_reg_849_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal msb_V_reg_849_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal lsb_V_fu_142_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal lsb_V_reg_859 : STD_LOGIC_VECTOR (9 downto 0);
    signal sin_adr_V_fu_152_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sin_adr_V_reg_865 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln1049_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_reg_875 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_reg_875_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_reg_875_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_reg_875_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_reg_875_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal r_6_reg_889 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_8_reg_894 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_8_reg_894_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal r_8_reg_894_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal r_8_reg_894_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln712_fu_171_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln712_reg_900 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln712_reg_900_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_7_fu_174_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_7_reg_907 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_7_reg_907_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln799_fu_180_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln799_reg_912 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln712_1_fu_184_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln712_1_reg_917 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln712_1_reg_917_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_9_fu_187_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_9_reg_922 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_9_reg_922_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln799_1_fu_193_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln799_1_reg_927 : STD_LOGIC_VECTOR (16 downto 0);
    signal underflow_1_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_reg_932 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_937 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_942 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_lut_word_V_8_fu_308_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal cos_lut_word_V_8_reg_953 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln58_5_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_5_reg_958 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_lut_word_V_fu_349_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_lut_word_V_reg_963 : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_lut_word_V_reg_963_pp0_iter6_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_lut_word_V_reg_963_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_lut_word_V_reg_963_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_lut_word_V_reg_963_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal fine_word_V_reg_969 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1245_2_fu_357_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1245_2_reg_974 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1245_2_reg_974_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1245_2_reg_974_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1245_2_reg_974_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1245_2_reg_974_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal cos_lut_word_V_10_fu_371_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal cos_lut_word_V_10_reg_979 : STD_LOGIC_VECTOR (17 downto 0);
    signal cos_lut_word_V_10_reg_979_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln1171_fu_380_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_826_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal ret_V_reg_1005 : STD_LOGIC_VECTOR (43 downto 0);
    signal ret_V_reg_1005_pp0_iter10_reg : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Result_10_reg_1012 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_1012_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_1012_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_1012_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln727_fu_405_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln727_reg_1020 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Result_12_reg_1025 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_reg_1025_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_reg_1025_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_reg_1025_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_837_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_3_reg_1031 : STD_LOGIC_VECTOR (33 downto 0);
    signal trunc_ln1245_fu_415_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln1245_reg_1037 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_reg_1042 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1245_1_fu_453_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln1245_1_reg_1047 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln1245_1_reg_1047_pp0_iter11_reg : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln1245_2_fu_458_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal add_ln1245_2_reg_1052 : STD_LOGIC_VECTOR (42 downto 0);
    signal add_ln1245_2_reg_1052_pp0_iter11_reg : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Result_14_reg_1058 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_reg_1058_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_reg_1058_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_reg_1058_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln727_1_fu_472_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln727_1_reg_1066 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Result_16_reg_1071 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_reg_1071_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_reg_1071_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_reg_1071_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_4_fu_522_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_4_reg_1077 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_4_reg_1077_pp0_iter12_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_13_reg_1082 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_13_reg_1082_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln799_2_fu_536_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln799_2_reg_1090 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_5_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_5_reg_1095 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln799_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln799_reg_1100 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_7_fu_588_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_7_reg_1105 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_7_reg_1105_pp0_iter13_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_17_reg_1110 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_reg_1110_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln799_3_fu_602_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln799_3_reg_1118 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_V_fu_703_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_V_reg_1123 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln799_2_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln799_2_reg_1128 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln573_fu_158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln573_1_fu_167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln573_2_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln340_fu_222_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal xor_ln1049_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1049_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_lut_word_V_fu_216_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln58_1_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_lut_word_V_3_fu_228_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal cos_lut_word_V_5_fu_245_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal and_ln1049_1_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_lut_word_V_6_fu_257_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln58_3_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_4_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_2_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1049_3_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1049_2_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1049_4_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_lut_word_V_7_fu_269_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_lut_word_V_3_fu_321_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln1049_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_lut_word_V_4_fu_328_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_lut_word_V_5_fu_341_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal cos_lut_word_V_4_fu_361_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln47_fu_367_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_1_fu_387_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal lhs_2_fu_423_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal sext_ln1245_fu_430_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal sext_ln712_1_fu_434_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln1245_1_fu_440_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln1245_1_fu_437_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal ret_V_1_fu_447_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Result_s_fu_493_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_fu_500_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln412_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_fu_484_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_fu_518_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_5_fu_559_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_1_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_fu_566_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln412_1_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_fu_550_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_1_fu_584_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln416_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln790_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_621_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln794_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln794_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_628_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln795_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln795_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln790_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln797_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln797_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln384_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_fu_689_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln416_1_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_3_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln790_1_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_1_fu_730_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln794_1_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln794_1_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_1_fu_737_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln795_1_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln795_1_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln790_1_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln797_1_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln797_2_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_3_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln384_1_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_2_fu_798_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_V_fu_812_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_826_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_837_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_826_ce : STD_LOGIC;
    signal grp_fu_837_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to13 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component resonator_dds_mac_mulsub_16ns_18s_43s_44_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (42 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component resonator_dds_mul_mul_16ns_18s_34_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component resonator_dds_phase_to_sincos_wLUT_cos_lut IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component resonator_dds_phase_to_sincos_wLUT_fine_lut IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    cos_lut_U : component resonator_dds_phase_to_sincos_wLUT_cos_lut
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cos_lut_address0,
        ce0 => cos_lut_ce0,
        q0 => cos_lut_q0,
        address1 => cos_lut_address1,
        ce1 => cos_lut_ce1,
        q1 => cos_lut_q1);

    fine_lut_U : component resonator_dds_phase_to_sincos_wLUT_fine_lut
    generic map (
        DataWidth => 16,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fine_lut_address0,
        ce0 => fine_lut_ce0,
        q0 => fine_lut_q0);

    mac_mulsub_16ns_18s_43s_44_4_1_U4 : component resonator_dds_mac_mulsub_16ns_18s_43s_44_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        din2_WIDTH => 43,
        dout_WIDTH => 44)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_826_p0,
        din1 => sin_lut_word_V_reg_963,
        din2 => lhs_1_fu_387_p3,
        ce => grp_fu_826_ce,
        dout => grp_fu_826_p3);

    mul_mul_16ns_18s_34_4_1_U5 : component resonator_dds_mul_mul_16ns_18s_34_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_837_p0,
        din1 => cos_lut_word_V_10_fu_371_p3,
        ce => grp_fu_837_ce,
        dout => grp_fu_837_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                add_ln1245_1_reg_1047 <= add_ln1245_1_fu_453_p2;
                add_ln1245_1_reg_1047_pp0_iter11_reg <= add_ln1245_1_reg_1047;
                add_ln1245_2_reg_1052 <= add_ln1245_2_fu_458_p2;
                add_ln1245_2_reg_1052_pp0_iter11_reg <= add_ln1245_2_reg_1052;
                cos_lut_word_V_10_reg_979 <= cos_lut_word_V_10_fu_371_p3;
                cos_lut_word_V_10_reg_979_pp0_iter7_reg <= cos_lut_word_V_10_reg_979;
                cos_lut_word_V_8_reg_953 <= cos_lut_word_V_8_fu_308_p3;
                fine_adr_V_reg_844_pp0_iter2_reg <= fine_adr_V_reg_844_pp0_iter1_reg;
                fine_adr_V_reg_844_pp0_iter3_reg <= fine_adr_V_reg_844_pp0_iter2_reg;
                fine_word_V_reg_969 <= fine_lut_q0;
                i_V_reg_1123 <= i_V_fu_703_p3;
                icmp_ln1049_reg_875_pp0_iter2_reg <= icmp_ln1049_reg_875;
                icmp_ln1049_reg_875_pp0_iter3_reg <= icmp_ln1049_reg_875_pp0_iter2_reg;
                icmp_ln1049_reg_875_pp0_iter4_reg <= icmp_ln1049_reg_875_pp0_iter3_reg;
                icmp_ln1049_reg_875_pp0_iter5_reg <= icmp_ln1049_reg_875_pp0_iter4_reg;
                icmp_ln58_5_reg_958 <= icmp_ln58_5_fu_316_p2;
                icmp_ln58_reg_942 <= icmp_ln58_fu_207_p2;
                icmp_ln799_2_reg_1128 <= icmp_ln799_2_fu_710_p2;
                icmp_ln799_reg_1100 <= icmp_ln799_fu_545_p2;
                msb_V_reg_849_pp0_iter2_reg <= msb_V_reg_849_pp0_iter1_reg;
                msb_V_reg_849_pp0_iter3_reg <= msb_V_reg_849_pp0_iter2_reg;
                msb_V_reg_849_pp0_iter4_reg <= msb_V_reg_849_pp0_iter3_reg;
                p_Result_10_reg_1012 <= grp_fu_826_p3(43 downto 43);
                p_Result_10_reg_1012_pp0_iter10_reg <= p_Result_10_reg_1012;
                p_Result_10_reg_1012_pp0_iter11_reg <= p_Result_10_reg_1012_pp0_iter10_reg;
                p_Result_10_reg_1012_pp0_iter12_reg <= p_Result_10_reg_1012_pp0_iter11_reg;
                p_Result_12_reg_1025 <= grp_fu_826_p3(42 downto 42);
                p_Result_12_reg_1025_pp0_iter10_reg <= p_Result_12_reg_1025;
                p_Result_12_reg_1025_pp0_iter11_reg <= p_Result_12_reg_1025_pp0_iter10_reg;
                p_Result_12_reg_1025_pp0_iter12_reg <= p_Result_12_reg_1025_pp0_iter11_reg;
                p_Result_13_reg_1082 <= p_Val2_4_fu_522_p2(15 downto 15);
                p_Result_13_reg_1082_pp0_iter12_reg <= p_Result_13_reg_1082;
                p_Result_14_reg_1058 <= ret_V_1_fu_447_p2(43 downto 43);
                p_Result_14_reg_1058_pp0_iter11_reg <= p_Result_14_reg_1058;
                p_Result_14_reg_1058_pp0_iter12_reg <= p_Result_14_reg_1058_pp0_iter11_reg;
                p_Result_14_reg_1058_pp0_iter13_reg <= p_Result_14_reg_1058_pp0_iter12_reg;
                p_Result_16_reg_1071 <= add_ln1245_2_fu_458_p2(42 downto 42);
                p_Result_16_reg_1071_pp0_iter11_reg <= p_Result_16_reg_1071;
                p_Result_16_reg_1071_pp0_iter12_reg <= p_Result_16_reg_1071_pp0_iter11_reg;
                p_Result_16_reg_1071_pp0_iter13_reg <= p_Result_16_reg_1071_pp0_iter12_reg;
                p_Result_17_reg_1110 <= p_Val2_7_fu_588_p2(15 downto 15);
                p_Result_17_reg_1110_pp0_iter13_reg <= p_Result_17_reg_1110;
                p_Val2_4_reg_1077 <= p_Val2_4_fu_522_p2;
                p_Val2_4_reg_1077_pp0_iter12_reg <= p_Val2_4_reg_1077;
                p_Val2_7_reg_1105 <= p_Val2_7_fu_588_p2;
                p_Val2_7_reg_1105_pp0_iter13_reg <= p_Val2_7_reg_1105;
                r_5_reg_1095 <= r_5_fu_540_p2;
                r_7_reg_907 <= r_7_fu_174_p2;
                r_7_reg_907_pp0_iter4_reg <= r_7_reg_907;
                r_8_reg_894_pp0_iter3_reg <= r_8_reg_894;
                r_8_reg_894_pp0_iter4_reg <= r_8_reg_894_pp0_iter3_reg;
                r_8_reg_894_pp0_iter5_reg <= r_8_reg_894_pp0_iter4_reg;
                r_9_reg_922 <= r_9_fu_187_p2;
                r_9_reg_922_pp0_iter4_reg <= r_9_reg_922;
                r_V_3_reg_1031 <= grp_fu_837_p2;
                r_reg_1042 <= r_fu_418_p2;
                ret_V_reg_1005_pp0_iter10_reg <= ret_V_reg_1005;
                sin_lut_word_V_reg_963 <= sin_lut_word_V_fu_349_p3;
                sin_lut_word_V_reg_963_pp0_iter6_reg <= sin_lut_word_V_reg_963;
                sin_lut_word_V_reg_963_pp0_iter7_reg <= sin_lut_word_V_reg_963_pp0_iter6_reg;
                sin_lut_word_V_reg_963_pp0_iter8_reg <= sin_lut_word_V_reg_963_pp0_iter7_reg;
                sin_lut_word_V_reg_963_pp0_iter9_reg <= sin_lut_word_V_reg_963_pp0_iter8_reg;
                trunc_ln1245_2_reg_974 <= trunc_ln1245_2_fu_357_p1;
                trunc_ln1245_2_reg_974_pp0_iter6_reg <= trunc_ln1245_2_reg_974;
                trunc_ln1245_2_reg_974_pp0_iter7_reg <= trunc_ln1245_2_reg_974_pp0_iter6_reg;
                trunc_ln1245_2_reg_974_pp0_iter8_reg <= trunc_ln1245_2_reg_974_pp0_iter7_reg;
                trunc_ln1245_2_reg_974_pp0_iter9_reg <= trunc_ln1245_2_reg_974_pp0_iter8_reg;
                trunc_ln1245_reg_1037 <= trunc_ln1245_fu_415_p1;
                trunc_ln727_1_reg_1066 <= trunc_ln727_1_fu_472_p1;
                trunc_ln727_reg_1020 <= trunc_ln727_fu_405_p1;
                trunc_ln799_1_reg_927 <= trunc_ln799_1_fu_193_p1;
                trunc_ln799_2_reg_1090 <= trunc_ln799_2_fu_536_p1;
                trunc_ln799_3_reg_1118 <= trunc_ln799_3_fu_602_p1;
                trunc_ln799_reg_912 <= trunc_ln799_fu_180_p1;
                underflow_1_reg_932 <= underflow_1_fu_197_p2;
                underflow_reg_937 <= underflow_fu_202_p2;
                    zext_ln712_1_reg_917(16 downto 0) <= zext_ln712_1_fu_184_p1(16 downto 0);
                    zext_ln712_1_reg_917_pp0_iter4_reg(16 downto 0) <= zext_ln712_1_reg_917(16 downto 0);
                    zext_ln712_reg_900(16 downto 0) <= zext_ln712_fu_171_p1(16 downto 0);
                    zext_ln712_reg_900_pp0_iter4_reg(16 downto 0) <= zext_ln712_reg_900(16 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                fine_adr_V_reg_844 <= fine_adr_V_fu_128_p1;
                fine_adr_V_reg_844_pp0_iter1_reg <= fine_adr_V_reg_844;
                icmp_ln1049_reg_875 <= icmp_ln1049_fu_162_p2;
                lsb_V_reg_859 <= acc(18 downto 9);
                msb_V_reg_849 <= acc(20 downto 19);
                msb_V_reg_849_pp0_iter1_reg <= msb_V_reg_849;
                sin_adr_V_reg_865 <= sin_adr_V_fu_152_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                r_6_reg_889 <= cos_lut_q1;
                r_8_reg_894 <= cos_lut_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                ret_V_reg_1005 <= grp_fu_826_p3;
            end if;
        end if;
    end process;
    zext_ln712_reg_900(17) <= '0';
    zext_ln712_reg_900_pp0_iter4_reg(17) <= '0';
    zext_ln712_1_reg_917(17) <= '0';
    zext_ln712_1_reg_917_pp0_iter4_reg(17) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Range1_all_zeros_1_fu_725_p2 <= (p_Result_14_reg_1058_pp0_iter13_reg xor ap_const_lv1_1);
    Range1_all_zeros_fu_616_p2 <= (p_Result_10_reg_1012_pp0_iter12_reg xor ap_const_lv1_1);
    add_ln1245_1_fu_453_p2 <= std_logic_vector(unsigned(trunc_ln1245_1_fu_440_p3) + unsigned(trunc_ln1245_reg_1037));
    add_ln1245_2_fu_458_p2 <= std_logic_vector(signed(lhs_2_fu_423_p3) + signed(sext_ln1245_1_fu_437_p1));
    and_ln1049_1_fu_265_p2 <= (icmp_ln58_reg_942 and icmp_ln1049_reg_875_pp0_iter4_reg);
    and_ln1049_2_fu_291_p2 <= (icmp_ln58_4_fu_286_p2 and icmp_ln58_3_fu_281_p2);
    and_ln1049_3_fu_297_p2 <= (icmp_ln58_2_fu_276_p2 and icmp_ln1049_reg_875_pp0_iter4_reg);
    and_ln1049_4_fu_302_p2 <= (and_ln1049_3_fu_297_p2 and and_ln1049_2_fu_291_p2);
    and_ln1049_fu_240_p2 <= (xor_ln1049_fu_235_p2 and icmp_ln58_reg_942);
    and_ln412_1_fu_578_p2 <= (p_Result_15_fu_566_p3 and or_ln412_1_fu_573_p2);
    and_ln412_fu_512_p2 <= (p_Result_11_fu_500_p3 and or_ln412_fu_507_p2);
    and_ln795_1_fu_771_p2 <= (p_Result_17_reg_1110_pp0_iter13_reg and deleted_ones_1_fu_737_p3);
    and_ln795_fu_662_p2 <= (p_Result_13_reg_1082_pp0_iter12_reg and deleted_ones_fu_628_p3);
    and_ln797_2_fu_787_p2 <= (or_ln797_1_fu_782_p2 and or_ln790_1_fu_749_p2);
    and_ln797_fu_678_p2 <= (or_ln797_fu_673_p2 and or_ln790_fu_640_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to13_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to13 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to13)
    begin
        if (((ap_idle_pp0_0to13 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= (q_V_fu_812_p3 & i_V_reg_1123);
    carry_1_fu_611_p2 <= (xor_ln416_fu_606_p2 and p_Result_12_reg_1025_pp0_iter12_reg);
    carry_3_fu_720_p2 <= (xor_ln416_1_fu_715_p2 and p_Result_16_reg_1071_pp0_iter13_reg);
    cos_lut_address0 <= zext_ln573_1_fu_167_p1(10 - 1 downto 0);
    cos_lut_address1 <= zext_ln573_fu_158_p1(10 - 1 downto 0);

    cos_lut_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cos_lut_ce0 <= ap_const_logic_1;
        else 
            cos_lut_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cos_lut_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cos_lut_ce1 <= ap_const_logic_1;
        else 
            cos_lut_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    cos_lut_word_V_10_fu_371_p3 <= 
        zext_ln47_fu_367_p1 when (icmp_ln58_5_reg_958(0) = '1') else 
        cos_lut_word_V_8_reg_953;
    cos_lut_word_V_3_fu_228_p3 <= 
        ap_const_lv18_0 when (icmp_ln1049_reg_875_pp0_iter4_reg(0) = '1') else 
        select_ln340_fu_222_p3;
    cos_lut_word_V_4_fu_361_p3 <= 
        ap_const_lv17_0 when (icmp_ln1049_reg_875_pp0_iter5_reg(0) = '1') else 
        r_8_reg_894_pp0_iter5_reg;
    cos_lut_word_V_5_fu_245_p3 <= 
        zext_ln712_reg_900_pp0_iter4_reg when (and_ln1049_fu_240_p2(0) = '1') else 
        cos_lut_word_V_fu_216_p3;
    cos_lut_word_V_6_fu_257_p3 <= 
        cos_lut_word_V_3_fu_228_p3 when (icmp_ln58_1_fu_252_p2(0) = '1') else 
        cos_lut_word_V_5_fu_245_p3;
    cos_lut_word_V_7_fu_269_p3 <= 
        zext_ln712_reg_900_pp0_iter4_reg when (and_ln1049_1_fu_265_p2(0) = '1') else 
        cos_lut_word_V_6_fu_257_p3;
    cos_lut_word_V_8_fu_308_p3 <= 
        cos_lut_word_V_fu_216_p3 when (and_ln1049_4_fu_302_p2(0) = '1') else 
        cos_lut_word_V_7_fu_269_p3;
    cos_lut_word_V_fu_216_p3 <= 
        ap_const_lv18_20001 when (underflow_1_reg_932(0) = '1') else 
        r_7_reg_907_pp0_iter4_reg;
    deleted_ones_1_fu_737_p3 <= 
        Range1_all_zeros_1_fu_725_p2 when (carry_3_fu_720_p2(0) = '1') else 
        p_Result_14_reg_1058_pp0_iter13_reg;
    deleted_ones_fu_628_p3 <= 
        Range1_all_zeros_fu_616_p2 when (carry_1_fu_611_p2(0) = '1') else 
        p_Result_10_reg_1012_pp0_iter12_reg;
    deleted_zeros_1_fu_730_p3 <= 
        p_Result_14_reg_1058_pp0_iter13_reg when (carry_3_fu_720_p2(0) = '1') else 
        Range1_all_zeros_1_fu_725_p2;
    deleted_zeros_fu_621_p3 <= 
        p_Result_10_reg_1012_pp0_iter12_reg when (carry_1_fu_611_p2(0) = '1') else 
        Range1_all_zeros_fu_616_p2;
    fine_adr_V_fu_128_p1 <= acc(9 - 1 downto 0);
    fine_lut_address0 <= zext_ln573_2_fu_212_p1(9 - 1 downto 0);

    fine_lut_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            fine_lut_ce0 <= ap_const_logic_1;
        else 
            fine_lut_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_826_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_826_ce <= ap_const_logic_1;
        else 
            grp_fu_826_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_826_p0 <= zext_ln1171_fu_380_p1(16 - 1 downto 0);

    grp_fu_837_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_837_ce <= ap_const_logic_1;
        else 
            grp_fu_837_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_837_p0 <= zext_ln1171_fu_380_p1(16 - 1 downto 0);
    i_V_fu_703_p3 <= 
        select_ln384_fu_689_p3 when (or_ln384_fu_697_p2(0) = '1') else 
        p_Val2_4_reg_1077_pp0_iter12_reg;
    icmp_ln1049_fu_162_p2 <= "1" when (lsb_V_reg_859 = ap_const_lv10_0) else "0";
    icmp_ln58_1_fu_252_p2 <= "1" when (msb_V_reg_849_pp0_iter4_reg = ap_const_lv2_1) else "0";
    icmp_ln58_2_fu_276_p2 <= "0" when (msb_V_reg_849_pp0_iter4_reg = ap_const_lv2_0) else "1";
    icmp_ln58_3_fu_281_p2 <= "0" when (msb_V_reg_849_pp0_iter4_reg = ap_const_lv2_1) else "1";
    icmp_ln58_4_fu_286_p2 <= "0" when (msb_V_reg_849_pp0_iter4_reg = ap_const_lv2_3) else "1";
    icmp_ln58_5_fu_316_p2 <= "1" when (msb_V_reg_849_pp0_iter4_reg = ap_const_lv2_3) else "0";
    icmp_ln58_fu_207_p2 <= "1" when (msb_V_reg_849_pp0_iter3_reg = ap_const_lv2_0) else "0";
    icmp_ln799_2_fu_710_p2 <= "1" when (trunc_ln799_3_reg_1118 = ap_const_lv15_0) else "0";
    icmp_ln799_fu_545_p2 <= "1" when (trunc_ln799_2_reg_1090 = ap_const_lv15_0) else "0";
    lhs_1_fu_387_p3 <= (cos_lut_word_V_10_reg_979_pp0_iter7_reg & ap_const_lv25_0);
    lhs_2_fu_423_p3 <= (sin_lut_word_V_reg_963_pp0_iter9_reg & ap_const_lv25_0);
    lsb_V_fu_142_p4 <= acc(18 downto 9);
    or_ln1049_fu_335_p2 <= (and_ln1049_4_fu_302_p2 or and_ln1049_1_fu_265_p2);
    or_ln384_1_fu_806_p2 <= (underflow_3_fu_793_p2 or overflow_1_fu_765_p2);
    or_ln384_fu_697_p2 <= (underflow_2_fu_684_p2 or overflow_fu_656_p2);
    or_ln412_1_fu_573_p2 <= (r_5_reg_1095 or p_Result_5_fu_559_p3);
    or_ln412_fu_507_p2 <= (r_reg_1042 or p_Result_s_fu_493_p3);
    or_ln790_1_fu_749_p2 <= (xor_ln790_1_fu_744_p2 or p_Result_17_reg_1110_pp0_iter13_reg);
    or_ln790_fu_640_p2 <= (xor_ln790_fu_635_p2 or p_Result_13_reg_1082_pp0_iter12_reg);
    or_ln794_1_fu_760_p2 <= (xor_ln794_1_fu_754_p2 or p_Result_17_reg_1110_pp0_iter13_reg);
    or_ln794_fu_651_p2 <= (xor_ln794_fu_645_p2 or p_Result_13_reg_1082_pp0_iter12_reg);
    or_ln797_1_fu_782_p2 <= (xor_ln795_1_fu_776_p2 or icmp_ln799_2_reg_1128);
    or_ln797_fu_673_p2 <= (xor_ln795_fu_667_p2 or icmp_ln799_reg_1100);
    overflow_1_fu_765_p2 <= (or_ln794_1_fu_760_p2 and Range1_all_zeros_1_fu_725_p2);
    overflow_fu_656_p2 <= (or_ln794_fu_651_p2 and Range1_all_zeros_fu_616_p2);
    p_Result_11_fu_500_p3 <= ret_V_reg_1005_pp0_iter10_reg(26 downto 26);
    p_Result_15_fu_566_p3 <= add_ln1245_1_reg_1047_pp0_iter11_reg(26 downto 26);
    p_Result_5_fu_559_p3 <= add_ln1245_2_reg_1052_pp0_iter11_reg(27 downto 27);
    p_Result_s_fu_493_p3 <= ret_V_reg_1005_pp0_iter10_reg(27 downto 27);
    p_Val2_3_fu_484_p4 <= ret_V_reg_1005_pp0_iter10_reg(42 downto 27);
    p_Val2_4_fu_522_p2 <= std_logic_vector(unsigned(p_Val2_3_fu_484_p4) + unsigned(zext_ln415_fu_518_p1));
    p_Val2_6_fu_550_p4 <= add_ln1245_2_reg_1052_pp0_iter11_reg(42 downto 27);
    p_Val2_7_fu_588_p2 <= std_logic_vector(unsigned(p_Val2_6_fu_550_p4) + unsigned(zext_ln415_1_fu_584_p1));
    q_V_fu_812_p3 <= 
        select_ln384_2_fu_798_p3 when (or_ln384_1_fu_806_p2(0) = '1') else 
        p_Val2_7_reg_1105_pp0_iter13_reg;
    r_5_fu_540_p2 <= "0" when (trunc_ln727_1_reg_1066 = ap_const_lv26_0) else "1";
    r_7_fu_174_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(zext_ln712_fu_171_p1));
    r_9_fu_187_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(zext_ln712_1_fu_184_p1));
    r_fu_418_p2 <= "0" when (trunc_ln727_reg_1020 = ap_const_lv26_0) else "1";
    ret_V_1_fu_447_p2 <= std_logic_vector(signed(sext_ln1245_fu_430_p1) + signed(sext_ln712_1_fu_434_p1));
    select_ln340_fu_222_p3 <= 
        ap_const_lv18_20001 when (underflow_reg_937(0) = '1') else 
        r_9_reg_922_pp0_iter4_reg;
    select_ln384_2_fu_798_p3 <= 
        ap_const_lv16_7FFF when (overflow_1_fu_765_p2(0) = '1') else 
        ap_const_lv16_8001;
    select_ln384_fu_689_p3 <= 
        ap_const_lv16_7FFF when (overflow_fu_656_p2(0) = '1') else 
        ap_const_lv16_8001;
        sext_ln1245_1_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_3_reg_1031),43));

        sext_ln1245_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_2_fu_423_p3),44));

        sext_ln712_1_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_3_reg_1031),44));

    sin_adr_V_fu_152_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(lsb_V_fu_142_p4));
    sin_lut_word_V_3_fu_321_p3 <= 
        zext_ln712_1_reg_917_pp0_iter4_reg when (and_ln1049_fu_240_p2(0) = '1') else 
        select_ln340_fu_222_p3;
    sin_lut_word_V_4_fu_328_p3 <= 
        zext_ln712_reg_900_pp0_iter4_reg when (icmp_ln58_1_fu_252_p2(0) = '1') else 
        sin_lut_word_V_3_fu_321_p3;
    sin_lut_word_V_5_fu_341_p3 <= 
        ap_const_lv18_0 when (or_ln1049_fu_335_p2(0) = '1') else 
        sin_lut_word_V_4_fu_328_p3;
    sin_lut_word_V_fu_349_p3 <= 
        cos_lut_word_V_fu_216_p3 when (icmp_ln58_5_fu_316_p2(0) = '1') else 
        sin_lut_word_V_5_fu_341_p3;
    trunc_ln1245_1_fu_440_p3 <= (trunc_ln1245_2_reg_974_pp0_iter9_reg & ap_const_lv25_0);
    trunc_ln1245_2_fu_357_p1 <= sin_lut_word_V_fu_349_p3(2 - 1 downto 0);
    trunc_ln1245_fu_415_p1 <= grp_fu_837_p2(27 - 1 downto 0);
    trunc_ln727_1_fu_472_p1 <= ret_V_1_fu_447_p2(26 - 1 downto 0);
    trunc_ln727_fu_405_p1 <= grp_fu_826_p3(26 - 1 downto 0);
    trunc_ln799_1_fu_193_p1 <= r_9_fu_187_p2(17 - 1 downto 0);
    trunc_ln799_2_fu_536_p1 <= p_Val2_4_fu_522_p2(15 - 1 downto 0);
    trunc_ln799_3_fu_602_p1 <= p_Val2_7_fu_588_p2(15 - 1 downto 0);
    trunc_ln799_fu_180_p1 <= r_7_fu_174_p2(17 - 1 downto 0);
    underflow_1_fu_197_p2 <= "1" when (trunc_ln799_reg_912 = ap_const_lv17_0) else "0";
    underflow_2_fu_684_p2 <= (p_Result_10_reg_1012_pp0_iter12_reg and and_ln797_fu_678_p2);
    underflow_3_fu_793_p2 <= (p_Result_14_reg_1058_pp0_iter13_reg and and_ln797_2_fu_787_p2);
    underflow_fu_202_p2 <= "1" when (trunc_ln799_1_reg_927 = ap_const_lv17_0) else "0";
    xor_ln1049_fu_235_p2 <= (icmp_ln1049_reg_875_pp0_iter4_reg xor ap_const_lv1_1);
    xor_ln416_1_fu_715_p2 <= (p_Result_17_reg_1110_pp0_iter13_reg xor ap_const_lv1_1);
    xor_ln416_fu_606_p2 <= (p_Result_13_reg_1082_pp0_iter12_reg xor ap_const_lv1_1);
    xor_ln790_1_fu_744_p2 <= (p_Result_16_reg_1071_pp0_iter13_reg xor ap_const_lv1_1);
    xor_ln790_fu_635_p2 <= (p_Result_12_reg_1025_pp0_iter12_reg xor ap_const_lv1_1);
    xor_ln794_1_fu_754_p2 <= (deleted_zeros_1_fu_730_p3 xor ap_const_lv1_1);
    xor_ln794_fu_645_p2 <= (deleted_zeros_fu_621_p3 xor ap_const_lv1_1);
    xor_ln795_1_fu_776_p2 <= (ap_const_lv1_1 xor and_ln795_1_fu_771_p2);
    xor_ln795_fu_667_p2 <= (ap_const_lv1_1 xor and_ln795_fu_662_p2);
    zext_ln1171_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fine_word_V_reg_969),34));
    zext_ln415_1_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln412_1_fu_578_p2),16));
    zext_ln415_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln412_fu_512_p2),16));
    zext_ln47_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cos_lut_word_V_4_fu_361_p3),18));
    zext_ln573_1_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sin_adr_V_reg_865),64));
    zext_ln573_2_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fine_adr_V_reg_844_pp0_iter3_reg),64));
    zext_ln573_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lsb_V_reg_859),64));
    zext_ln712_1_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_8_reg_894),18));
    zext_ln712_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_6_reg_889),18));
end behav;
