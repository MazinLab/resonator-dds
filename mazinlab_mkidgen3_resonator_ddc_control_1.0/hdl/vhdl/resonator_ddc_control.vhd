-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity resonator_ddc_control is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 15;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    res_in_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    res_in_TVALID : IN STD_LOGIC;
    res_in_TREADY : OUT STD_LOGIC;
    res_in_TKEEP : IN STD_LOGIC_VECTOR (31 downto 0);
    res_in_TSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
    res_in_TUSER : IN STD_LOGIC_VECTOR (7 downto 0);
    res_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    res_out_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    res_out_TVALID : OUT STD_LOGIC;
    res_out_TREADY : IN STD_LOGIC;
    res_out_TKEEP : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_out_TSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_out_TUSER : OUT STD_LOGIC_VECTOR (7 downto 0);
    res_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    acc_out_TDATA : OUT STD_LOGIC_VECTOR (167 downto 0);
    acc_out_TVALID : OUT STD_LOGIC;
    acc_out_TREADY : IN STD_LOGIC;
    center_out_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    center_out_TVALID : OUT STD_LOGIC;
    center_out_TREADY : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of resonator_ddc_control is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "resonator_ddc_control_resonator_ddc_control,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.237000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=35,HLS_SYN_DSP=0,HLS_SYN_FF=1940,HLS_SYN_LUT=1027,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv168_lc_1 : STD_LOGIC_VECTOR (167 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_AB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_AC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101100";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_C1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000001";
    constant ap_const_lv32_D5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010101";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_D6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010110";
    constant ap_const_lv32_EA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101010";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_92 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010010";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_EB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101011";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_93 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010011";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal tones_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tones_ce0 : STD_LOGIC;
    signal tones_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal centers_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal centers_ce0 : STD_LOGIC;
    signal centers_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal clear_accumulator : STD_LOGIC;
    signal accg_V : STD_LOGIC_VECTOR (167 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal accumulator_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal accumulator_V_ce0 : STD_LOGIC;
    signal accumulator_V_we0 : STD_LOGIC;
    signal accumulator_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal accumulator_V_ce1 : STD_LOGIC;
    signal accumulator_V_q1 : STD_LOGIC_VECTOR (167 downto 0);
    signal clear : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal res_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal res_out_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal acc_out_TDATA_blk_n : STD_LOGIC;
    signal center_out_TDATA_blk_n : STD_LOGIC;
    signal clear_accumulator_read_reg_764 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal regslice_both_res_out_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_acc_out_U_apdone_blk : STD_LOGIC;
    signal regslice_both_center_out_U_apdone_blk : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal clear_accumulator_read_reg_764_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal clear_accumulator_read_reg_764_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_reg_768 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_data_V_reg_768_pp0_iter1_reg : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_keep_V_reg_773 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_keep_V_reg_773_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_strb_V_reg_778 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_strb_V_reg_778_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_user_V_reg_783 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_783_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_last_V_reg_789 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_789_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_789_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal phase0_V_reg_809 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_V_fu_341_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_V_reg_814 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln1393_fu_345_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1393_reg_820 : STD_LOGIC_VECTOR (10 downto 0);
    signal phase0_V_1_reg_825 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_V_1_reg_830 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_1_reg_836 : STD_LOGIC_VECTOR (10 downto 0);
    signal phase0_V_2_reg_841 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_V_2_reg_846 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_2_reg_852 : STD_LOGIC_VECTOR (10 downto 0);
    signal phase0_V_3_reg_857 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_V_3_reg_862 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_3_reg_868 : STD_LOGIC_VECTOR (10 downto 0);
    signal phase0_V_4_reg_873 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_V_4_reg_878 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_4_reg_884 : STD_LOGIC_VECTOR (10 downto 0);
    signal phase0_V_5_reg_889 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_V_5_reg_894 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_5_reg_900 : STD_LOGIC_VECTOR (10 downto 0);
    signal phase0_V_6_reg_905 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_V_6_reg_910 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_6_reg_916 : STD_LOGIC_VECTOR (10 downto 0);
    signal phase0_V_7_reg_921 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_V_7_reg_926 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_7_reg_932 : STD_LOGIC_VECTOR (10 downto 0);
    signal centers_load_reg_937 : STD_LOGIC_VECTOR (255 downto 0);
    signal add_ln232_fu_559_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln232_reg_942 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_fu_575_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_3_reg_947 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_5_fu_591_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_5_reg_952 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_7_fu_607_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_7_reg_957 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_9_fu_623_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_9_reg_962 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_11_fu_639_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_11_reg_967 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_13_fu_655_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_13_reg_972 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_15_fu_671_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_15_reg_977 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_17_fu_708_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_17_reg_987 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln587_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln587_1_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln80_fu_738_p3 : STD_LOGIC_VECTOR (167 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln_fu_568_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1393_1_fu_584_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1393_2_fu_600_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1393_3_fu_616_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1393_4_fu_632_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1393_5_fu_648_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1393_6_fu_664_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_16_fu_676_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_14_fu_660_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_12_fu_644_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_10_fu_628_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_8_fu_612_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_6_fu_596_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_4_fu_580_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_s_fu_564_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1393_7_fu_701_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Result_3_fu_722_p9 : STD_LOGIC_VECTOR (167 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal res_out_TVALID_int_regslice : STD_LOGIC;
    signal res_out_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_res_out_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_res_out_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_res_out_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_res_out_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_res_out_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_res_out_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_res_out_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_res_out_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_res_out_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_res_out_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_res_out_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_res_out_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_res_out_V_last_V_U_vld_out : STD_LOGIC;
    signal acc_out_TDATA_int_regslice : STD_LOGIC_VECTOR (167 downto 0);
    signal acc_out_TVALID_int_regslice : STD_LOGIC;
    signal acc_out_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_acc_out_U_vld_out : STD_LOGIC;
    signal center_out_TVALID_int_regslice : STD_LOGIC;
    signal center_out_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_center_out_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component resonator_ddc_control_accumulator_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (167 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (167 downto 0) );
    end component;


    component resonator_ddc_control_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        clear_accumulator : OUT STD_LOGIC;
        tones_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        tones_ce0 : IN STD_LOGIC;
        tones_q0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        centers_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        centers_ce0 : IN STD_LOGIC;
        centers_q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component resonator_ddc_control_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    accumulator_V_U : component resonator_ddc_control_accumulator_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 168,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => accumulator_V_address0,
        ce0 => accumulator_V_ce0,
        we0 => accumulator_V_we0,
        d0 => accg_V,
        address1 => accumulator_V_address1,
        ce1 => accumulator_V_ce1,
        q1 => accumulator_V_q1);

    control_s_axi_U : component resonator_ddc_control_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        clear_accumulator => clear_accumulator,
        tones_address0 => tones_address0,
        tones_ce0 => tones_ce0,
        tones_q0 => tones_q0,
        centers_address0 => centers_address0,
        centers_ce0 => centers_ce0,
        centers_q0 => centers_q0);

    regslice_both_res_out_V_data_V_U : component resonator_ddc_control_regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_data_V_reg_768_pp0_iter1_reg,
        vld_in => res_out_TVALID_int_regslice,
        ack_in => res_out_TREADY_int_regslice,
        data_out => res_out_TDATA,
        vld_out => regslice_both_res_out_V_data_V_U_vld_out,
        ack_out => res_out_TREADY,
        apdone_blk => regslice_both_res_out_V_data_V_U_apdone_blk);

    regslice_both_res_out_V_keep_V_U : component resonator_ddc_control_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_keep_V_reg_773_pp0_iter1_reg,
        vld_in => res_out_TVALID_int_regslice,
        ack_in => regslice_both_res_out_V_keep_V_U_ack_in_dummy,
        data_out => res_out_TKEEP,
        vld_out => regslice_both_res_out_V_keep_V_U_vld_out,
        ack_out => res_out_TREADY,
        apdone_blk => regslice_both_res_out_V_keep_V_U_apdone_blk);

    regslice_both_res_out_V_strb_V_U : component resonator_ddc_control_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_strb_V_reg_778_pp0_iter1_reg,
        vld_in => res_out_TVALID_int_regslice,
        ack_in => regslice_both_res_out_V_strb_V_U_ack_in_dummy,
        data_out => res_out_TSTRB,
        vld_out => regslice_both_res_out_V_strb_V_U_vld_out,
        ack_out => res_out_TREADY,
        apdone_blk => regslice_both_res_out_V_strb_V_U_apdone_blk);

    regslice_both_res_out_V_user_V_U : component resonator_ddc_control_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_user_V_reg_783_pp0_iter1_reg,
        vld_in => res_out_TVALID_int_regslice,
        ack_in => regslice_both_res_out_V_user_V_U_ack_in_dummy,
        data_out => res_out_TUSER,
        vld_out => regslice_both_res_out_V_user_V_U_vld_out,
        ack_out => res_out_TREADY,
        apdone_blk => regslice_both_res_out_V_user_V_U_apdone_blk);

    regslice_both_res_out_V_last_V_U : component resonator_ddc_control_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_last_V_reg_789_pp0_iter1_reg,
        vld_in => res_out_TVALID_int_regslice,
        ack_in => regslice_both_res_out_V_last_V_U_ack_in_dummy,
        data_out => res_out_TLAST,
        vld_out => regslice_both_res_out_V_last_V_U_vld_out,
        ack_out => res_out_TREADY,
        apdone_blk => regslice_both_res_out_V_last_V_U_apdone_blk);

    regslice_both_acc_out_U : component resonator_ddc_control_regslice_both
    generic map (
        DataWidth => 168)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => acc_out_TDATA_int_regslice,
        vld_in => acc_out_TVALID_int_regslice,
        ack_in => acc_out_TREADY_int_regslice,
        data_out => acc_out_TDATA,
        vld_out => regslice_both_acc_out_U_vld_out,
        ack_out => acc_out_TREADY,
        apdone_blk => regslice_both_acc_out_U_apdone_blk);

    regslice_both_center_out_U : component resonator_ddc_control_regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => centers_load_reg_937,
        vld_in => center_out_TVALID_int_regslice,
        ack_in => center_out_TREADY_int_regslice,
        data_out => center_out_TDATA,
        vld_out => regslice_both_center_out_U_vld_out,
        ack_out => center_out_TREADY,
        apdone_blk => regslice_both_center_out_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    clear_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((clear_accumulator_read_reg_764_pp0_iter2_reg = ap_const_lv1_1)) then 
                    clear <= ap_const_lv1_1;
                elsif (((tmp_last_V_reg_789_pp0_iter2_reg = ap_const_lv1_1) and (clear_accumulator_read_reg_764_pp0_iter2_reg = ap_const_lv1_0))) then 
                    clear <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                accg_V <= select_ln80_fu_738_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln232_reg_942 <= add_ln232_fu_559_p2;
                clear_accumulator_read_reg_764_pp0_iter2_reg <= clear_accumulator_read_reg_764_pp0_iter1_reg;
                p_Val2_11_reg_967 <= p_Val2_11_fu_639_p2;
                p_Val2_13_reg_972 <= p_Val2_13_fu_655_p2;
                p_Val2_15_reg_977 <= p_Val2_15_fu_671_p2;
                p_Val2_17_reg_987 <= p_Val2_17_fu_708_p2;
                p_Val2_3_reg_947 <= p_Val2_3_fu_575_p2;
                p_Val2_5_reg_952 <= p_Val2_5_fu_591_p2;
                p_Val2_7_reg_957 <= p_Val2_7_fu_607_p2;
                p_Val2_9_reg_962 <= p_Val2_9_fu_623_p2;
                tmp_last_V_reg_789_pp0_iter2_reg <= tmp_last_V_reg_789_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                centers_load_reg_937 <= centers_q0;
                clear_accumulator_read_reg_764 <= (0=>clear_accumulator, others=>'-');
                clear_accumulator_read_reg_764_pp0_iter1_reg <= clear_accumulator_read_reg_764;
                phase0_V_1_reg_825 <= tones_q0(129 downto 109);
                phase0_V_2_reg_841 <= tones_q0(150 downto 130);
                phase0_V_3_reg_857 <= tones_q0(171 downto 151);
                phase0_V_4_reg_873 <= tones_q0(192 downto 172);
                phase0_V_5_reg_889 <= tones_q0(213 downto 193);
                phase0_V_6_reg_905 <= tones_q0(234 downto 214);
                phase0_V_7_reg_921 <= tones_q0(255 downto 235);
                phase0_V_reg_809 <= tones_q0(108 downto 88);
                tmp_1_reg_836 <= tones_q0(21 downto 11);
                tmp_2_reg_852 <= tones_q0(32 downto 22);
                tmp_3_reg_868 <= tones_q0(43 downto 33);
                tmp_4_reg_884 <= tones_q0(54 downto 44);
                tmp_5_reg_900 <= tones_q0(65 downto 55);
                tmp_6_reg_916 <= tones_q0(76 downto 66);
                tmp_7_reg_932 <= tones_q0(87 downto 77);
                tmp_V_1_reg_830 <= accumulator_V_q1(41 downto 21);
                tmp_V_2_reg_846 <= accumulator_V_q1(62 downto 42);
                tmp_V_3_reg_862 <= accumulator_V_q1(83 downto 63);
                tmp_V_4_reg_878 <= accumulator_V_q1(104 downto 84);
                tmp_V_5_reg_894 <= accumulator_V_q1(125 downto 105);
                tmp_V_6_reg_910 <= accumulator_V_q1(146 downto 126);
                tmp_V_7_reg_926 <= accumulator_V_q1(167 downto 147);
                tmp_V_reg_814 <= tmp_V_fu_341_p1;
                tmp_data_V_reg_768 <= res_in_TDATA;
                tmp_data_V_reg_768_pp0_iter1_reg <= tmp_data_V_reg_768;
                tmp_keep_V_reg_773 <= res_in_TKEEP;
                tmp_keep_V_reg_773_pp0_iter1_reg <= tmp_keep_V_reg_773;
                tmp_last_V_reg_789 <= res_in_TLAST;
                tmp_last_V_reg_789_pp0_iter1_reg <= tmp_last_V_reg_789;
                tmp_strb_V_reg_778 <= res_in_TSTRB;
                tmp_strb_V_reg_778_pp0_iter1_reg <= tmp_strb_V_reg_778;
                tmp_user_V_reg_783 <= res_in_TUSER;
                tmp_user_V_reg_783_pp0_iter1_reg <= tmp_user_V_reg_783;
                trunc_ln1393_reg_820 <= trunc_ln1393_fu_345_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    acc_out_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, acc_out_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            acc_out_TDATA_blk_n <= acc_out_TREADY_int_regslice;
        else 
            acc_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    acc_out_TDATA_int_regslice <= (((((((p_Val2_16_fu_676_p2 & p_Val2_14_fu_660_p2) & p_Val2_12_fu_644_p2) & p_Val2_10_fu_628_p2) & p_Val2_8_fu_612_p2) & p_Val2_6_fu_596_p2) & p_Val2_4_fu_580_p2) & p_Val2_s_fu_564_p2);
    acc_out_TVALID <= regslice_both_acc_out_U_vld_out;

    acc_out_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            acc_out_TVALID_int_regslice <= ap_const_logic_1;
        else 
            acc_out_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    accumulator_V_address0 <= zext_ln587_1_fu_713_p1(8 - 1 downto 0);
    accumulator_V_address1 <= zext_ln587_fu_324_p1(8 - 1 downto 0);

    accumulator_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            accumulator_V_ce0 <= ap_const_logic_1;
        else 
            accumulator_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    accumulator_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            accumulator_V_ce1 <= ap_const_logic_1;
        else 
            accumulator_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    accumulator_V_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            accumulator_V_we0 <= ap_const_logic_1;
        else 
            accumulator_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln232_fu_559_p2 <= std_logic_vector(unsigned(tmp_user_V_reg_783_pp0_iter1_reg) + unsigned(ap_const_lv8_FF));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(res_in_TVALID, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, regslice_both_res_out_V_data_V_U_apdone_blk, regslice_both_acc_out_U_apdone_blk, regslice_both_center_out_U_apdone_blk, res_out_TREADY_int_regslice, acc_out_TREADY_int_regslice, center_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((res_in_TVALID = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((center_out_TREADY_int_regslice = ap_const_logic_0) or (res_out_TREADY_int_regslice = ap_const_logic_0) or (ap_const_logic_0 = acc_out_TREADY_int_regslice) or (regslice_both_center_out_U_apdone_blk = ap_const_logic_1) or (regslice_both_acc_out_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_out_V_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((center_out_TREADY_int_regslice = ap_const_logic_0) or (res_out_TREADY_int_regslice = ap_const_logic_0) or (ap_const_logic_0 = acc_out_TREADY_int_regslice))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(res_in_TVALID, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_state3_io, regslice_both_res_out_V_data_V_U_apdone_blk, regslice_both_acc_out_U_apdone_blk, regslice_both_center_out_U_apdone_blk, ap_block_state4_io, res_out_TREADY_int_regslice, acc_out_TREADY_int_regslice, center_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((res_in_TVALID = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((center_out_TREADY_int_regslice = ap_const_logic_0) or (res_out_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state4_io) or (ap_const_logic_0 = acc_out_TREADY_int_regslice) or (regslice_both_center_out_U_apdone_blk = ap_const_logic_1) or (regslice_both_acc_out_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_out_V_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((center_out_TREADY_int_regslice = ap_const_logic_0) or (res_out_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io) or (ap_const_logic_0 = acc_out_TREADY_int_regslice))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(res_in_TVALID, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_state3_io, regslice_both_res_out_V_data_V_U_apdone_blk, regslice_both_acc_out_U_apdone_blk, regslice_both_center_out_U_apdone_blk, ap_block_state4_io, res_out_TREADY_int_regslice, acc_out_TREADY_int_regslice, center_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((res_in_TVALID = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((center_out_TREADY_int_regslice = ap_const_logic_0) or (res_out_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state4_io) or (ap_const_logic_0 = acc_out_TREADY_int_regslice) or (regslice_both_center_out_U_apdone_blk = ap_const_logic_1) or (regslice_both_acc_out_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_out_V_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((center_out_TREADY_int_regslice = ap_const_logic_0) or (res_out_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io) or (ap_const_logic_0 = acc_out_TREADY_int_regslice))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(res_in_TVALID)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (res_in_TVALID = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(res_out_TREADY_int_regslice, acc_out_TREADY_int_regslice, center_out_TREADY_int_regslice)
    begin
                ap_block_state3_io <= ((center_out_TREADY_int_regslice = ap_const_logic_0) or (res_out_TREADY_int_regslice = ap_const_logic_0) or (ap_const_logic_0 = acc_out_TREADY_int_regslice));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(res_out_TREADY_int_regslice, acc_out_TREADY_int_regslice, center_out_TREADY_int_regslice)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((center_out_TREADY_int_regslice = ap_const_logic_0) or (res_out_TREADY_int_regslice = ap_const_logic_0) or (ap_const_logic_0 = acc_out_TREADY_int_regslice));
    end process;


    ap_block_state4_io_assign_proc : process(res_out_TREADY_int_regslice, acc_out_TREADY_int_regslice, center_out_TREADY_int_regslice)
    begin
                ap_block_state4_io <= ((center_out_TREADY_int_regslice = ap_const_logic_0) or (res_out_TREADY_int_regslice = ap_const_logic_0) or (ap_const_logic_0 = acc_out_TREADY_int_regslice));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(regslice_both_res_out_V_data_V_U_apdone_blk, regslice_both_acc_out_U_apdone_blk, regslice_both_center_out_U_apdone_blk, res_out_TREADY_int_regslice, acc_out_TREADY_int_regslice, center_out_TREADY_int_regslice)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((center_out_TREADY_int_regslice = ap_const_logic_0) or (res_out_TREADY_int_regslice = ap_const_logic_0) or (ap_const_logic_0 = acc_out_TREADY_int_regslice) or (regslice_both_center_out_U_apdone_blk = ap_const_logic_1) or (regslice_both_acc_out_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_out_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    center_out_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, center_out_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            center_out_TDATA_blk_n <= center_out_TREADY_int_regslice;
        else 
            center_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    center_out_TVALID <= regslice_both_center_out_U_vld_out;

    center_out_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            center_out_TVALID_int_regslice <= ap_const_logic_1;
        else 
            center_out_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    centers_address0 <= zext_ln587_fu_324_p1(8 - 1 downto 0);

    centers_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            centers_ce0 <= ap_const_logic_1;
        else 
            centers_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_3_fu_722_p9 <= (((((((p_Val2_17_reg_987 & p_Val2_15_reg_977) & p_Val2_13_reg_972) & p_Val2_11_reg_967) & p_Val2_9_reg_962) & p_Val2_7_reg_957) & p_Val2_5_reg_952) & p_Val2_3_reg_947);
    p_Val2_10_fu_628_p2 <= std_logic_vector(unsigned(tmp_V_4_reg_878) + unsigned(phase0_V_4_reg_873));
    p_Val2_11_fu_639_p2 <= std_logic_vector(unsigned(tmp_V_4_reg_878) + unsigned(shl_ln1393_4_fu_632_p3));
    p_Val2_12_fu_644_p2 <= std_logic_vector(unsigned(tmp_V_5_reg_894) + unsigned(phase0_V_5_reg_889));
    p_Val2_13_fu_655_p2 <= std_logic_vector(unsigned(tmp_V_5_reg_894) + unsigned(shl_ln1393_5_fu_648_p3));
    p_Val2_14_fu_660_p2 <= std_logic_vector(unsigned(tmp_V_6_reg_910) + unsigned(phase0_V_6_reg_905));
    p_Val2_15_fu_671_p2 <= std_logic_vector(unsigned(tmp_V_6_reg_910) + unsigned(shl_ln1393_6_fu_664_p3));
    p_Val2_16_fu_676_p2 <= std_logic_vector(unsigned(tmp_V_7_reg_926) + unsigned(phase0_V_7_reg_921));
    p_Val2_17_fu_708_p2 <= std_logic_vector(unsigned(tmp_V_7_reg_926) + unsigned(shl_ln1393_7_fu_701_p3));
    p_Val2_3_fu_575_p2 <= std_logic_vector(unsigned(tmp_V_reg_814) + unsigned(shl_ln_fu_568_p3));
    p_Val2_4_fu_580_p2 <= std_logic_vector(unsigned(tmp_V_1_reg_830) + unsigned(phase0_V_1_reg_825));
    p_Val2_5_fu_591_p2 <= std_logic_vector(unsigned(tmp_V_1_reg_830) + unsigned(shl_ln1393_1_fu_584_p3));
    p_Val2_6_fu_596_p2 <= std_logic_vector(unsigned(tmp_V_2_reg_846) + unsigned(phase0_V_2_reg_841));
    p_Val2_7_fu_607_p2 <= std_logic_vector(unsigned(tmp_V_2_reg_846) + unsigned(shl_ln1393_2_fu_600_p3));
    p_Val2_8_fu_612_p2 <= std_logic_vector(unsigned(tmp_V_3_reg_862) + unsigned(phase0_V_3_reg_857));
    p_Val2_9_fu_623_p2 <= std_logic_vector(unsigned(tmp_V_3_reg_862) + unsigned(shl_ln1393_3_fu_616_p3));
    p_Val2_s_fu_564_p2 <= std_logic_vector(unsigned(tmp_V_reg_814) + unsigned(phase0_V_reg_809));

    res_in_TDATA_blk_n_assign_proc : process(res_in_TVALID, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_in_TDATA_blk_n <= res_in_TVALID;
        else 
            res_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    res_in_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_in_TREADY <= ap_const_logic_1;
        else 
            res_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    res_out_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, res_out_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            res_out_TDATA_blk_n <= res_out_TREADY_int_regslice;
        else 
            res_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_out_TVALID <= regslice_both_res_out_V_data_V_U_vld_out;

    res_out_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_out_TVALID_int_regslice <= ap_const_logic_1;
        else 
            res_out_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    select_ln80_fu_738_p3 <= 
        ap_const_lv168_lc_1 when (clear(0) = '1') else 
        p_Result_3_fu_722_p9;
    shl_ln1393_1_fu_584_p3 <= (tmp_1_reg_836 & ap_const_lv10_0);
    shl_ln1393_2_fu_600_p3 <= (tmp_2_reg_852 & ap_const_lv10_0);
    shl_ln1393_3_fu_616_p3 <= (tmp_3_reg_868 & ap_const_lv10_0);
    shl_ln1393_4_fu_632_p3 <= (tmp_4_reg_884 & ap_const_lv10_0);
    shl_ln1393_5_fu_648_p3 <= (tmp_5_reg_900 & ap_const_lv10_0);
    shl_ln1393_6_fu_664_p3 <= (tmp_6_reg_916 & ap_const_lv10_0);
    shl_ln1393_7_fu_701_p3 <= (tmp_7_reg_932 & ap_const_lv10_0);
    shl_ln_fu_568_p3 <= (trunc_ln1393_reg_820 & ap_const_lv10_0);
    tmp_V_fu_341_p1 <= accumulator_V_q1(21 - 1 downto 0);
    tones_address0 <= zext_ln587_fu_324_p1(8 - 1 downto 0);

    tones_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tones_ce0 <= ap_const_logic_1;
        else 
            tones_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln1393_fu_345_p1 <= tones_q0(11 - 1 downto 0);
    zext_ln587_1_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln232_reg_942),64));
    zext_ln587_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_in_TUSER),64));
end behav;
